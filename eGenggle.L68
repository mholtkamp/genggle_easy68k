00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/14/2016 9:18:07 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : eGenggle
00000000                             3  * Written by : Martin Holtkamp
00000000                             4  * Date       : 10/14/2016
00000000                             5  * Description: A port of the game Genggle from genesis to 
00000000                             6  *              to Easy68k. Use left/right to aim ball and 
00000000                             7  *              press Z to fire the ball. Hit all red pegs 
00000000                             8  *              to clear a level. The fewer red pegs that 
00000000                             9  *              remain, the higher the score of hitting a 
00000000                            10  *              blue peg.
00000000                            11  *-----------------------------------------------------------
00000000                            12  
00000000                            13  START:                  ; first instruction of program
00000000                            14      ORG 0 
00000000  4EF9 0001579E             15      jmp EntryPoint 
00000006                            16      
00000006                            17      ; Consts include 
00000006                            18      INCLUDE "source/constants.asm"
00000006  =25275A0D                 19  KEY_LIST EQU $25275A0D
00000006  =00000013                 20  KEYBOARD_INPUT_TRAP_CODE EQU 19
00000006  =0000005C                 21  DRAW_MODE_TRAP_CODE EQU 92 
00000006  =0000005E                 22  SWAP_BUFFERS_TRAP_CODE EQU 94 
00000006  =00000011                 23  DRAW_MODE_DOUBLE_BUFFERED EQU 17 
00000006  =00000050                 24  PEN_COLOR_TRAP_CODE EQU 80
00000006  =00000051                 25  FILL_COLOR_TRAP_CODE EQU 81 
00000006  =00000057                 26  DRAW_RECT_TRAP_CODE EQU 87
00000006  =00000008                 27  TIME_TRAP_CODE EQU 8 
00000006  =00000054                 28  DRAW_LINE_TRAP_CODE EQU 84
00000006  =00000001                 29  FRAME_TIME EQU 1
00000006                            30  
00000006  =00000000                 31  BUTTON_UP    EQU $0 
00000006  =00000001                 32  BUTTON_DOWN  EQU $1 
00000006  =00000002                 33  BUTTON_LEFT  EQU $2 
00000006  =00000003                 34  BUTTON_RIGHT EQU $3 
00000006  =0000000C                 35  BUTTON_A     EQU $C
00000006  =00000004                 36  BUTTON_B     EQU $4 
00000006  =00000005                 37  BUTTON_C     EQU $5 
00000006  =0000000D                 38  BUTTON_START EQU $D
00000006                            39  
00000006  =00000100                 40  TO_FIXED EQU 256
00000006                            41  
00000006  =00000140                 42  SCREEN_WIDTH EQU 320
00000006  =000000E0                 43  SCREEN_HEIGHT EQU 224
00000006                            44  
00000006  =000001A1                 45  RAND_MULTIPLIER EQU 417
00000006  =00000929                 46  RAND_ADDER EQU 2345
00000006                            47  
00000006                            48  ; Game consts 
00000006  =00009A00                 49  AIM_CENTER_X EQU 154*TO_FIXED
00000006  =00000500                 50  AIM_CENTER_Y EQU 5*TO_FIXED 
00000006  =00001E00                 51  AIM_RADIUS EQU 30*TO_FIXED 
00000006  =00005A00                 52  AIM_START_ANGLE EQU 90*TO_FIXED
00000006  =00000200                 53  AIM_ANGLE_DELTA EQU 2*TO_FIXED
00000006  =00000500                 54  AIM_ANGLE_MIN EQU 5*TO_FIXED
00000006  =0000AF00                 55  AIM_ANGLE_MAX EQU 175*TO_FIXED
00000006                            56  
00000006  =00000400                 57  LAUNCH_SPEED EQU 4*TO_FIXED 
00000006  =00000012                 58  GRAVITY EQU 18
00000006  =0000E000                 59  FALLOUT_Y EQU 224*TO_FIXED
00000006  =00000000                 60  LEFT_BOUND EQU 0*TO_FIXED
00000006  =00013800                 61  RIGHT_BOUND SET (320*TO_FIXED)-BALL_WIDTH
00000006                            62  
00000006  =00000001                 63  BALLS_STRING_X EQU 1 
00000006  =00000000                 64  BALLS_STRING_Y EQU 0
00000006                            65  
00000006  =0000001D                 66  SCORE_STRING_X EQU 29 
00000006  =00000000                 67  SCORE_STRING_Y EQU 0 
00000006                            68  
00000006  =00000002                 69  SAVE_STRING_X EQU 2 
00000006  =00000002                 70  SAVE_STRING_Y EQU 2 
00000006                            71   
00000006                            72  ; Game states 
00000006  =00000000                 73  STATE_START   EQU 0 
00000006  =00000001                 74  STATE_AIM     EQU 1 
00000006  =00000002                 75  STATE_RESOLVE EQU 2 
00000006  =00000003                 76  STATE_LOSE    EQU 3 
00000006  =00000004                 77  STATE_WIN     EQU 4 
00000006                            78  
00000006                            79  ; Genggle Data sizes 
00000006  =00000020                 80  PEG_DATA_SIZE    EQU 32 
00000006  =00000020                 81  BALL_DATA_SIZE   EQU 32 
00000006  =00000020                 82  SAVER_DATA_SIZE  EQU 32 
00000006                            83  
00000006                            84  ; Shift values for multiplying 
00000006  =00000005                 85  PEG_SIZE_SHIFT   EQU 5 
00000006  =00000005                 86  BALL_SIZE_SHIFT  EQU 5 
00000006  =00000005                 87  SAVER_SIZE_SHIFT EQU 5 
00000006                            88  
00000006                            89  ; Game consts 
00000006  =0000001E                 90  MAX_PEGS EQU 30 
00000006  =00000020                 91  MAX_GENGGLE_SPRITES EQU 32
00000006  =00000014                 92  SPRITE_DISABLE_X EQU 20 
00000006  =00000014                 93  SPRITE_DISABLE_Y EQU 20 
00000006                            94  
00000006  =00000800                 95  BALL_WIDTH EQU 8*TO_FIXED 
00000006  =00000800                 96  BALL_HEIGHT EQU 8*TO_FIXED
00000006  =00000043                 97  BALL_PATTERN EQU 67
00000006                            98  
00000006  =FFFF9400                 99  PEG_INIT_X EQU -108*TO_FIXED
00000006  =FFFF9400                100  PEG_INIT_Y EQU -108*TO_FIXED
00000006  =00000800                101  PEG_WIDTH  EQU 8*TO_FIXED
00000006  =00000800                102  PEG_HEIGHT EQU 8*TO_FIXED
00000006  =00000001                103  PEG_PALETTE EQU 1
00000006                           104  
00000006  =00000000                105  PEG_TYPE_BLUE   EQU 0 
00000006  =00000001                106  PEG_TYPE_RED    EQU 1 
00000006  =00000002                107  PEG_TYPE_PURPLE EQU 2 
00000006                           108  
00000006  =00001400                109  SAVER_INIT_X EQU 20*TO_FIXED 
00000006  =0000D400                110  SAVER_INIT_Y EQU 212*TO_FIXED 
00000006  =00002000                111  SAVER_WIDTH EQU 32*TO_FIXED 
00000006  =00000800                112  SAVER_HEIGHT EQU 8*TO_FIXED
00000006  =00000200                113  SAVER_XVEL EQU 2*TO_FIXED
00000006  =00000000                114  SAVER_RECT_OFFSET_X EQU 0 
00000006  =00000008                115  SAVER_RECT_OFFSET_Y EQU 8 
00000006  =00000000                116  SAVER_LEFT_BOUND EQU 0*TO_FIXED
00000006  =00012000                117  SAVER_RIGHT_BOUND EQU 288*TO_FIXED
00000006                           118  
00000006  =00000000                119  BALL_SPRITE_INDEX  EQU 0 
00000006  =00000001                120  SAVER_SPRITE_INDEX EQU 1 
00000006  =00000002                121  PEGS_SPRITE_INDEX  EQU 2 
00000006                           122  
00000006  =00000008                123  NUM_LEVELS EQU 8 
00000006                           124  
00000006  =00000000                125  LEVEL_PEG_COUNT_OFFSET     EQU 0 
00000006  =00000004                126  LEVEL_RED_PEG_COUNT_OFFSET EQU 4 
00000006  =00000008                127  LEVEL_BALL_COUNT_OFFSET    EQU 8 
00000006  =0000000C                128  LEVEL_PEGS_OFFSET          EQU 12 
00000006                           129  
00000006  =00000080                130  MAX_SQRT_INPUT EQU 128
00000006  =000000E0                131  DAMPENING_COEFFICIENT EQU $e0
00000006                           132  
00000006  =00000002                133  RED_PEG_SCORE EQU 2 
00000006  =00000004                134  BLUE_PEG_LOW_SCORE  EQU 4 
00000006  =00000002                135  BLUE_PEG_MID_SCORE  EQU 2 
00000006  =00000001                136  BLUE_PEG_HIGH_SCORE EQU 1
00000006  =00000002                137  LOW_RED EQU 2 
00000006  =00000006                138  MID_RED EQU 6
00000006  =00000020                139  HIGH_RED EQU 32 
00000006  =00000020                140  -------------------- end include --------------------
00000006                           141      
00000006                           142      ; BSS data  
00000006                           143      INCLUDE "source/bss.asm"
00000006                           144  Pegs:
00000006                           145      ds.b MAX_PEGS*PEG_DATA_SIZE
000003C6                           146      
000003C6                           147  Ball:
000003C6                           148      ds.b BALL_DATA_SIZE
000003E6                           149      
000003E6                           150  Saver:
000003E6                           151      ds.b SAVER_DATA_SIZE 
00000406                           152  
00000406                           153  ; All global variables are assumed to be longs even if not
00000406                           154  ; used as such in the program.
00000406                           155  ButtonsDown:
00000406                           156      ds.l 1  
0000040A                           157  GameState:
0000040A                           158      ds.l 1
0000040E                           159  VblankFlag:
0000040E                           160      ds.l 1
00000412                           161  AimAngle:
00000412                           162      ds.l 1
00000416                           163  Level:
00000416                           164      ds.l 1
0000041A                           165  BallCount:
0000041A                           166      ds.l 1
0000041E                           167  LevelPegCount:
0000041E                           168      ds.l 1
00000422                           169  LevelRedPegCount:
00000422                           170      ds.l 1
00000426                           171  LevelBallCount:
00000426                           172      ds.l 1
0000042A                           173  RandVal:
0000042A                           174      ds.l 1
0000042E                           175  FrameCounter:
0000042E                           176      ds.l 1
00000432                           177  RedPegCount:
00000432                           178      ds.l 1
00000436                           179  PegCount:
00000436                           180      ds.l 1
0000043A                           181  Score:
0000043A                           182      ds.l 1
0000043E                           183  PrevDown:
0000043E                           184      ds.l 1 
00000442                           185  PrevTime:
00000442                           186      ds.l 1 
00000446                           187  CurTime:
00000446                           188      ds.l 1 
00000446                           189  -------------------- end include --------------------
0000044A                           190      
0000044A                           191      ; CODE includes 
0000044A                           192      INCLUDE "source/util.asm"
0000044A  =0000000A                193  BITMAP_PIXEL_ARRAY_OFF_OFFSET EQU 10
0000044A  =00000012                194  BITMAP_WIDTH_OFFSET           EQU 18 
0000044A  =00000016                195  BITMAP_HEIGHT_OFFSET          EQU 22 
0000044A  =0000001C                196  BITMAP_BPP_OFFSET             EQU 28
0000044A  =00000036                197  BITMAP_HEADER_SIZE            EQU 54
0000044A                           198  
0000044A  =00000004                199  REQUIRED_BITS_PER_PIXEL EQU 4 
0000044A                           200   
0000044A  =00000050                201  IO_TASK_PEN_COLOR  EQU 80
0000044A  =00000052                202  IO_TASK_DRAW_PIXEL EQU 82
0000044A                           203  
0000044A                           204  ; ------ SUBROUTINE ------
0000044A                           205  ; SeedRandom
0000044A                           206  ;
0000044A                           207  ; Seeds the random number generator with 
0000044A                           208  ; a given word 
0000044A                           209  ; 
0000044A                           210  ; Input:
0000044A                           211  ;   d0.w = seed 
0000044A                           212  ; ------------------------  
0000044A                           213  SeedRandom:
0000044A  31C0 042A                214      move.w d0, RandVal
0000044E  4E75                     215      rts 
00000450                           216      
00000450                           217  ; ------ SUBROUTINE ------
00000450                           218  ; Random
00000450                           219  ;
00000450                           220  ; Returns a byte between
00000450                           221  ; 
00000450                           222  ; Output:
00000450                           223  ;   d0.b = random value (0-255)
00000450                           224  ; ------------------------  
00000450                           225  Random:
00000450                           226      ; Multiply some magic number 
00000450  3038 042A                227      move.w RandVal, d0 
00000454  323C 01A1                228      move.w #RAND_MULTIPLIER, d1 
00000458  C0C1                     229      mulu d1, d0 
0000045A                           230      
0000045A                           231      ; Add some magic number 
0000045A  0640 0929                232      addi.w #RAND_ADDER, d0 
0000045E                           233      
0000045E                           234      ; Save this as the new random value
0000045E  31C0 042A                235      move.w d0, RandVal
00000462                           236      
00000462                           237      ; d0.b will contain a random number 
00000462                           238      ; but mask away other bytes just for safety 
00000462  0280 000000FF            239      andi.l #$000000ff, d0 
00000468                           240      
00000468  4E75                     241      rts 
0000046A                           242  
0000046A                           243  ; ------ SUBROUTINE ------
0000046A                           244  ; UpdateButtons
0000046A                           245  ;
0000046A                           246  ; Grabs the state of buttons from the controller.
0000046A                           247  ; This subroutine places the updated values in the ButtonsDown
0000046A                           248  ; word in BSS memory. Status of an individual button can be
0000046A                           249  ; checked by using btst.w #BUTTON_X, ButtonsDown
0000046A                           250  ; If the bit is set, then that button is down.
0000046A                           251  ; If cleared, then that button is up.
0000046A                           252  ; ------------------------
0000046A                           253  UpdateButtons:
0000046A                           254  
0000046A                           255      ; Save previous button states so you can 
0000046A                           256      ; easily tell if a button was just pressed this frame.
0000046A  31F8 0406 043E           257      move.w ButtonsDown, PrevDown 
00000470                           258      
00000470  4280                     259      clr.l d0 
00000472  223C 25275A0D            260      move.l #KEY_LIST, d1 
00000478  7013                     261      move.l #KEYBOARD_INPUT_TRAP_CODE, d0 
0000047A  4E4F                     262      trap #15 
0000047C                           263      
0000047C  74FF                     264      move.l #$ffffffff, d2
0000047E                           265      
0000047E  0801 0018                266      btst.l #24, d1
00000482  6700 0006                267      beq .check_right 
00000486  0882 0002                268      bclr.l #BUTTON_LEFT, d2 
0000048A                           269      
0000048A                           270  .check_right 
0000048A  0801 0010                271      btst.l #16, d1 
0000048E  6700 0006                272      beq .check_z
00000492  0882 0003                273      bclr.l #BUTTON_RIGHT, d2 
00000496                           274      
00000496                           275  .check_z
00000496  0801 0008                276      btst.l #8, d1 
0000049A  6700 0006                277      beq .check_start 
0000049E  0882 000C                278      bclr.l #BUTTON_A, d2 
000004A2                           279      
000004A2                           280  .check_start 
000004A2  0801 0000                281      btst.l #0, d1 
000004A6  6700 0006                282      beq .save_keys 
000004AA  0882 000D                283      bclr.l #BUTTON_START, d2 
000004AE                           284      
000004AE                           285  .save_keys 
000004AE                           286  
000004AE  31C2 0406                287      move.w d2, ButtonsDown
000004B2                           288      
000004B2  4E75                     289      rts 
000004B4                           290      
000004B4                           291      
000004B4                           292  ;------ SUBROUTINE -------
000004B4                           293  ; RenderBitmap16
000004B4                           294  ; Input:
000004B4                           295  ;   a0.l: pointer to bitmap file data 
000004B4                           296  ;   d0.l: bitmap chunk x position
000004B4                           297  ;   d1.l: bitmap chunk y position 
000004B4                           298  ;   d2.l: bitmap chunk width 
000004B4                           299  ;   d3.l: bitmap chunk height 
000004B4                           300  ;   d4.l: render x position 
000004B4                           301  ;   d5.l: render y position 
000004B4                           302  ;-------------------------
000004B4                           303  RenderBitmap16:
000004B4                           304  
000004B4                           305          ; Save subroutine arguments to system memory for recall later 
000004B4  23C8 000006AC            306          move.l a0, bitmap_addr 
000004BA  23C0 000006B4            307          move.l d0, chunk_x 
000004C0  23C1 000006BC            308          move.l d1, chunk_y 
000004C6  23C2 000006C4            309          move.l d2, chunk_width 
000004CC  23C3 000006CC            310          move.l d3, chunk_height 
000004D2  23C4 000006D4            311          move.l d4, render_x
000004D8  23C5 000006DC            312          move.l d5, render_y
000004DE                           313         
000004DE                           314          ; Examine the bitmap file header, and save important addresses/values
000004DE  2028 0012                315          move.l BITMAP_WIDTH_OFFSET(a0), d0 
000004E2  4EB9 00000710            316          jsr EndianSwap_L
000004E8  23C0 000006E4            317          move.l d0, bitmap_width  
000004EE                           318          
000004EE  2028 0016                319          move.l BITMAP_HEIGHT_OFFSET(a0), d0 
000004F2  4EB9 00000710            320          jsr EndianSwap_L
000004F8  23C0 000006EC            321          move.l d0, bitmap_height 
000004FE                           322          
000004FE  3028 001C                323          move.w BITMAP_BPP_OFFSET(a0), d0 
00000502  4EB9 00000718            324          jsr EndianSwap_W 
00000508  33C0 000006F4            325          move.w d0, bitmap_bpp
0000050E                           326           
0000050E                           327          ; Find the pixel array address based on the offset given in the header
0000050E  2028 000A                328          move.l BITMAP_PIXEL_ARRAY_OFF_OFFSET(a0), d0    ; d0 = offset in bytes from start of file to pixel array
00000512  4EB9 00000710            329          jsr EndianSwap_L                                ; correct endianness 
00000518  2248                     330          movea.l a0, a1                                  ; a1 = address of the bitmap file 
0000051A  D3C0                     331          add.l d0, a1                                    ; a1 = address of the color table 
0000051C  23C9 00000700            332          move.l a1, pixel_array_addr                     ; store the address in memory 
00000522                           333          
00000522                           334          ; Find the color table address. It immediately follows the header.
00000522  2248                     335          movea.l a0, a1                                  ; a1 = address of bitmap file 
00000524  D3FC 00000036            336          adda.l #BITMAP_HEADER_SIZE, a1                  ; a1 = address of color table 
0000052A  23C9 000006F8            337          move.l a1, color_table_addr                     ; store the address in memory
00000530                           338          
00000530                           339          ; Examine the bits per pixel word to see if this bmp
00000530                           340          ; truly is a 16 color paletted bitmap (4bpp).
00000530  3039 000006F4            341          move.w bitmap_bpp, d0
00000536  0C40 0004                342          cmpi.w #REQUIRED_BITS_PER_PIXEL, d0  ; is this bitmap's bitdepth 4?
0000053A  6600 016E                343          bne .return                          ; if not, return and do not attempt to render.
0000053E                           344          
0000053E                           345          ; Determine the number of nibbles to pad row with.
0000053E                           346          ; In the pixel array, the end of each row must be 4-byte aligned
0000053E  2039 000006E4            347          move.l  bitmap_width, d0               ; d0 = bitmap width 
00000544  E288                     348          lsr.l #1, d0                           ; d0 = bitmap width (bytes)
00000546  5680                     349          addq.l #3, d0                          ; add 3 to offset one long if not long aligned 
00000548  0280 FFFFFFFC            350          andi.l #$fffffffc, d0                  ; snap to the long word boundary
0000054E  23C0 00000708            351          move.l d0, bitmap_width_bytes
00000554                           352          
00000554                           353          ; Check for valid chunk_x
00000554  2039 000006B4            354          move.l chunk_x, d0 
0000055A  2239 000006E4            355          move.l bitmap_width, d1 
00000560  B280                     356          cmp.l d0, d1                    ; is the bitmap width bigger than chunk_x?
00000562  6300 0146                357          bls .return                     ; if so, return. chunk_x is outside of image. nothing to draw. 
00000566                           358          
00000566                           359          ; Check for valid chunk_y
00000566  2039 000006BC            360          move.l chunk_y, d0 
0000056C  2239 000006EC            361          move.l bitmap_height, d1 
00000572  B280                     362          cmp.l d0, d1                    ; is the bitmap height bigger than chunk_y?
00000574  6300 0134                363          bls .return                     ; if so, return. chunk_y is outside of image. nothing to draw.
00000578                           364          
00000578                           365          ; Check for chunk_width = 0
00000578  2039 000006C4            366          move.l chunk_width, d0 
0000057E  6700 012A                367          beq .return 
00000582                           368          
00000582                           369          ; Check for chunk_height = 0 
00000582  2039 000006CC            370          move.l chunk_height, d0 
00000588  6700 0120                371          beq .return 
0000058C                           372          
0000058C                           373          ; Clamp chunk_width if needed.
0000058C  2039 000006B4            374          move.l chunk_x, d0 
00000592  2239 000006C4            375          move.l chunk_width, d1 
00000598  2439 000006E4            376          move.l bitmap_width, d2
0000059E  D081                     377          add.l d1, d0                    ; d0 = rightmost edge of chunk + 1 
000005A0  5380                     378          subq.l #1, d0                   ; d0 - rightmost edge of chunk
000005A2  B480                     379          cmp.l d0, d2                    ;  is the bitmap width bigger than the rightmost edge?
000005A4  6200 0010                380          bhi .clamp_chunk_h              ; then no need to clamp. go check the chunk height
000005A8  2039 000006B4            381          move.l chunk_x, d0 
000005AE  9480                     382          sub.l d0, d2                    ; d2 = bitmap width - chunk x 
000005B0  23C2 000006C4            383          move.l d2, chunk_width          ; save d2 as the new chunk width 
000005B6                           384          
000005B6                           385  .clamp_chunk_h
000005B6  2039 000006BC            386          move.l chunk_y, d0 
000005BC  2239 000006CC            387          move.l chunk_height, d1 
000005C2  2439 000006EC            388          move.l bitmap_height, d2 
000005C8  D081                     389          add.l d1, d0 
000005CA  5380                     390          subq.l #1, d0                   ; d0 = bottom most edge of chunk
000005CC  B480                     391          cmp.l d0, d2                    ; is the bitmap height bigger than the bottom (top) most edge?
000005CE  6200 0010                392          bhi .flip_chunk_y               ; do not clamp if bitmap height is bigger than bottom most edge
000005D2  2039 000006BC            393          move.l chunk_y, d0 
000005D8  9480                     394          sub.l d0, d2                    ; d2 = bitmap height - chunk_y
000005DA  23C2 000006CC            395          move.l d2, chunk_height         ; save the new, clamped chunk height
000005E0                           396  
000005E0                           397  .flip_chunk_y     
000005E0                           398          ; Correct chunk_y because BMP pixel data starts from bottom-left, not top-left
000005E0  2039 000006BC            399          move.l chunk_y, d0 
000005E6  2239 000006EC            400          move.l bitmap_height, d1 
000005EC  9280                     401          sub.l d0, d1 
000005EE  5381                     402          subq.l #1, d1                  ; d1 = the flipped y position in bitmap
000005F0  23C1 000006BC            403          move.l d1, chunk_y             ; save the corrected chunk_y
000005F6                           404          
000005F6                           405          ; Now we have all the information to perform rendering. 
000005F6                           406          ; This loop will begin from the bottom left of the chunk data
000005F6  2C39 000006C4            407          move.l chunk_width, d6          ; d6 = horizontal counter 
000005FC  2E39 000006CC            408          move.l chunk_height, d7         ; d7 = vertical counter 
00000602  2839 000006D4            409          move.l render_x, d4             ; d4 = x rendering position
00000608  2A39 000006DC            410          move.l render_y, d5             ; d5 = y rendering position
0000060E                           411          
0000060E  2479 00000700            412          move.l pixel_array_addr, a2    
00000614  2039 000006B4            413          move.l chunk_x, d0 
0000061A  E288                     414          lsr.l #1, d0            ; divide chunk_x by two to get correct byte offset 
0000061C  D5C0                     415          add.l d0, a2            ; offset into the pixel array b chunk_x/2 bytes 
0000061E                           416          
0000061E  2239 00000708            417          move.l bitmap_width_bytes, d1   ; d1 = width of a row of pixels in bytes
00000624  2039 000006BC            418          move.l chunk_y, d0      ; d0 = chunk_y
0000062A  C0C1                     419          mulu.w d1, d0           ; d0 = number of bytes to offset into pixel array, contributed from chunk_y
0000062C  D5C0                     420          add.l d0, a2            ; a2 = address to start reading pixel data from in loop
0000062E                           421          
0000062E                           422  .loop_start 
0000062E  264A                     423          move.l a2, a3           ; a3 = this row's starting address (save it for later)
00000630  2039 000006B4            424          move.l chunk_x, d0      ; get chunk_x
00000636  0800 0000                425          btst.l #0, d0           ; test least significant bit 
0000063A  6600 002C                426          bne .loop_odd           ; if bit 0 is not equal to 0, start row at loop_odd
0000063E                           427                                  ; else fall through to .loop_even 
0000063E                           428          
0000063E                           429  .loop_even
0000063E  4280                     430          clr.l d0                  
00000640  1012                     431          move.b (a2), d0           ; d0 = byte with two pixels worth of information
00000642  0200 00F0                432          andi.b #$f0, d0           ; mask out bits to leave the first pixel's color index 
00000646  E408                     433          lsr.b #2, d0              ; shift twice to the right to get offset into color table in bytes
00000648                           434                                    ; instead of the andi + lsr, lsr #4 + lsl #2 could be used for same effect
00000648                           435                                    ; essential 4*index to get the offset in bytes into the color table
00000648  2079 000006F8            436          move.l color_table_addr, a0 
0000064E  D1C0                     437          add.l d0, a0              ; a0 = pointer to 4 byte color BGRX 
00000650                           438          
00000650  2210                     439          move.l (a0), d1           ; d1 = pixel color, BGRX
00000652  E089                     440          lsr.l #8, d1              ; d1 = pixel color, 0BGR
00000654  7050                     441          move.l #IO_TASK_PEN_COLOR, d0 
00000656  4E4F                     442          trap #15                  ; set system's pen color 
00000658                           443          
00000658  2204                     444          move.l d4, d1             ; d1 = render x
0000065A  5284                     445          addq.l #1, d4             ; increment render x 
0000065C  2405                     446          move.l d5, d2             ; d2 = render y 
0000065E  7052                     447          move.l #IO_TASK_DRAW_PIXEL, d0 
00000660  4E4F                     448          trap #15 
00000662                           449          
00000662  5386                     450          subq.l #1, d6             ; subtract horizontal counter 
00000664  6700 002A                451          beq .loop_end             ; branch if finished with row 
00000668                           452  
00000668                           453  .loop_odd 
00000668  4280                     454          clr.l d0                  
0000066A  101A                     455          move.b (a2)+, d0          ; d0 = byte with two pixels worth of information
0000066C  0200 000F                456          andi.b #$0f, d0           ; mask out bits to leave the second pixel's color index 
00000670  E508                     457          lsl.b #2, d0              ; shift twice to the left to mult by 4 to get color table offset
00000672                           458  
00000672  2079 000006F8            459          move.l color_table_addr, a0 
00000678  D1C0                     460          add.l d0, a0              ; a0 = pointer to 4 byte color BGRX 
0000067A                           461          
0000067A  2210                     462          move.l (a0), d1           ; d1 = pixel color, BGRX
0000067C  E089                     463          lsr.l #8, d1              ; d1 = pixel color, 0BGR
0000067E  7050                     464          move.l #IO_TASK_PEN_COLOR, d0 
00000680  4E4F                     465          trap #15                  ; set system's pen color 
00000682                           466          
00000682  2204                     467          move.l d4, d1             ; d1 = render x
00000684  5284                     468          addq.l #1, d4             ; increment render x 
00000686  2405                     469          move.l d5, d2             ; d2 = render y 
00000688  7052                     470          move.l #IO_TASK_DRAW_PIXEL, d0 
0000068A  4E4F                     471          trap #15                  ; draw pixel on screen
0000068C                           472          
0000068C  5386                     473          subq.l #1, d6             ; subtract horizontal counter 
0000068E  66AE                     474          bne .loop_even            ; branch back to even if not finished with row 
00000690                           475  
00000690                           476  .loop_end      
00000690  2839 000006D4            477          move.l render_x, d4       ; reset x rendering position 
00000696  2C39 000006C4            478          move.l chunk_width, d6    ; reset horizontal counter 
0000069C  244B                     479          movea.l a3, a2            ; get the address of first pixel for the just-rendered row 
0000069E  95F9 00000708            480          suba.l bitmap_width_bytes, a2  ; point to the first pixel of the next row 
000006A4  5285                     481          addq.l #1, d5             ; move the y rendering position one scanline down 
000006A6  5387                     482          subq.l #1, d7             ; decrement the vertical counter by 1 
000006A8  6684                     483          bne .loop_start
000006AA                           484          
000006AA                           485  .return 
000006AA  4E75                     486          rts 
000006AC                           487  
000006AC                           488          ORG (*+1)&-2
000006AC                           489  bitmap_addr            ds 4 
000006B4                           490  chunk_x                ds 4
000006BC                           491  chunk_y                ds 4         
000006C4                           492  chunk_width            ds 4 
000006CC                           493  chunk_height           ds 4
000006D4                           494  render_x               ds 4 
000006DC                           495  render_y               ds 4 
000006E4                           496  bitmap_width           ds 4 
000006EC                           497  bitmap_height          ds 4 
000006F4                           498  bitmap_bpp             ds 2 
000006F8                           499  color_table_addr       ds 4 
00000700                           500  pixel_array_addr       ds 4 
00000708                           501  bitmap_width_bytes     ds 4 
00000710                           502  
00000710                           503  
00000710                           504  ;------ SUBROUTINE -------
00000710                           505  ; EndianSwap_L
00000710                           506  ; Input:
00000710                           507  ;   d0.l: value to be swapped
00000710                           508  ; Output:
00000710                           509  ;   d0.l: the swapped value
00000710                           510  ;------------------------- 
00000710                           511  EndianSwap_L:
00000710  E158                     512          rol.w #8, d0 
00000712  4840                     513          swap.w d0 
00000714  E158                     514          rol.w #8, d0 
00000716  4E75                     515          rts
00000718                           516          
00000718                           517          
00000718                           518  ;------ SUBROUTINE -------
00000718                           519  ; EndianSwap_W
00000718                           520  ; Input:
00000718                           521  ;   d0.w: value to be swapped
00000718                           522  ; Output:
00000718                           523  ;   d0.w: the swapped value
00000718                           524  ;------------------------- 
00000718                           525  EndianSwap_W:
00000718  E158                     526          rol.w #8, d0 
0000071A  4E75                     527          rts
0000071A  4E75                     528  -------------------- end include --------------------
0000071C                           529      INCLUDE "source/start.asm"
0000071C                           530  ; ------ SUBROUTINE ------
0000071C                           531  ; LoadStart
0000071C                           532  ;
0000071C                           533  ; Loads graphics data necessary for displaying the 
0000071C                           534  ; start screen. 
0000071C                           535  ; ------------------------      
0000071C                           536  LoadStart:
0000071C                           537  
0000071C  7000                     538      move.l #0, d0             ; param d0: chunk x coordinate
0000071E  7200                     539      move.l #0, d1             ; param d1: chunk y coordinate 
00000720  243C 00000140            540      move.l #320, d2           ; param d2: chunk width 
00000726  263C 000000E0            541      move.l #224, d3           ; param d3: chunk height 
0000072C  7800                     542      move.l #0, d4             ; param d4: screen x coordinate
0000072E  7A00                     543      move.l #0, d5             ; param d5: screen y coordinate 
00000730  41F9 000016C8            544      lea TitleBitmap, a0       ; param a0: pointer to bitmap file data
00000736  4EB8 04B4                545      jsr RenderBitmap16 
0000073A                           546      
0000073A  4E75                     547      rts 
0000073C                           548      
0000073C                           549  ; ------ SUBROUTINE ------
0000073C                           550  ; UpdateStart
0000073C                           551  ;
0000073C                           552  ; Checks if the user has pressed start to begin 
0000073C                           553  ; the game.
0000073C                           554  ; ------------------------      
0000073C                           555  UpdateStart:
0000073C                           556      
0000073C                           557      ; Update the frame counter in preparation 
0000073C                           558      ; for seeding the random number generator 
0000073C  3038 042E                559      move.w FrameCounter, d0 
00000740  5240                     560      addq.w #1, d0 
00000742  31C0 042E                561      move.w d0, FrameCounter
00000746                           562      
00000746                           563      ; Check if the start button is down.
00000746                           564      ; If so, transition to game
00000746  3038 0406                565      move.w ButtonsDown, d0 
0000074A  3238 043E                566      move.w PrevDown, d1 
0000074E  4641                     567      not.w d1 
00000750  8041                     568      or.w d1, d0 
00000752  0800 000D                569      btst #BUTTON_START, d0
00000756  6600 0016                570      bne .return 
0000075A  4EB9 00000770            571      jsr SetRandSeed
00000760  4EB9 0000077A            572      jsr LoadGame
00000766  21FC 00000001 040A       573      move.l #STATE_AIM, GameState
0000076E                           574  .return 
0000076E  4E75                     575      rts 
00000770                           576      
00000770                           577  SetRandSeed:
00000770                           578  
00000770  3038 042E                579      move.w FrameCounter, d0 
00000774  4EB8 044A                580      jsr SeedRandom
00000778  4E75                     581      rts 
00000778  4E75                     582  -------------------- end include --------------------
0000077A                           583      INCLUDE "source/game.asm"
0000077A                           584  ; ------ SUBROUTINE ------
0000077A                           585  ; LoadGame
0000077A                           586  ;
0000077A                           587  ; Changes the scroll A map to the game map. 
0000077A                           588  ; Initializes important game variables.
0000077A                           589  ; Should be called before starting a new game
0000077A                           590  ; from level 0.
0000077A                           591  ; ------------------------  
0000077A                           592  LoadGame:
0000077A                           593      
0000077A                           594      ; Initialize ball 
0000077A  41F8 03C6                595      lea Ball, a0 
0000077E  4EB9 0000127E            596      jsr Ball_Init 
00000784                           597      
00000784                           598      ; Initialize saver 
00000784  41F8 03E6                599      lea Saver, a0 
00000788  4EB9 000015EE            600      jsr Saver_Init
0000078E                           601      
0000078E  21FC 00000000 0416       602      move.l #0, Level
00000796  4EB9 000007AC            603      jsr LoadLevel
0000079C                           604      
0000079C                           605      ; Reset score 
0000079C  21FC 00000000 043A       606      move.l #0, Score 
000007A4  4EB9 00000AD6            607      jsr DrawScore
000007AA                           608      
000007AA  4E75                     609      rts
000007AC                           610      
000007AC                           611  ; ------ SUBROUTINE ------
000007AC                           612  ; LoadLevel
000007AC                           613  ;
000007AC                           614  ; Loads the level based on the value in 
000007AC                           615  ; Level global variable.
000007AC                           616  ; ------------------------  
000007AC                           617  LoadLevel:
000007AC                           618      
000007AC                           619      ; First draw the background that all other 
000007AC                           620      ; objects will be drawn on top of
000007AC  4EB9 00000B18            621      jsr DrawBackground 
000007B2                           622      
000007B2                           623      ; Reset aim angle 
000007B2  21FC 00005A00 0412       624      move.l #AIM_START_ANGLE, AimAngle 
000007BA                           625      
000007BA                           626      ; Reset pegs to default values 
000007BA  4EB9 00000A86            627      jsr ClearPegs
000007C0                           628      
000007C0                           629      ; Get the level data needed for loading
000007C0  2038 0416                630      move.l Level, d0 
000007C4  0C80 00000008            631      cmpi.l #(NUM_LEVELS), d0
000007CA  6500 0004                632      blo .load_pegs 
000007CE                           633      
000007CE                           634      ; confine level number to range [0, NUM_LEVELS)
000007CE  7007                     635      move.l #(NUM_LEVELS-1), d0 
000007D0                           636      
000007D0                           637  .load_pegs
000007D0                           638      ; d0 contains level number. 
000007D0                           639      ; multiply it by 4 to get the long offset into level data table 
000007D0  E588                     640      lsl.l #2, d0 
000007D2  41F9 0001573C            641      lea LevelData, a0 
000007D8  D1C0                     642      add.l d0, a0            ; a0 now pointing at current level data address
000007DA  2250                     643      move.l (a0), a1         ; a1 is not pointing to current level data 
000007DC  2049                     644      move.l a1, a0           ; but put this back in a0 
000007DE                           645      
000007DE                           646      ; Get the level properties 
000007DE  21E8 0000 041E           647      move.l LEVEL_PEG_COUNT_OFFSET(a0), LevelPegCount
000007E4  21E8 0004 0422           648      move.l LEVEL_RED_PEG_COUNT_OFFSET(a0), LevelRedPegCount 
000007EA  21E8 0008 0426           649      move.l LEVEL_BALL_COUNT_OFFSET(a0), LevelBallCount 
000007F0  21F8 041E 0436           650      move.l LevelPegCount, PegCount
000007F6  21F8 0422 0432           651      move.l LevelRedPegCount, RedPegCount    ; set the number of red pegs to get 
000007FC  21F8 0426 041A           652      move.l LevelBallCount, BallCount        ; reset ball count 
00000802                           653      
00000802  D1FC 0000000C            654      adda.l #LEVEL_PEGS_OFFSET, a0       ; a0 = pointer to peg pos array in leveldata  
00000808  43F8 0006                655      lea Pegs, a1                        ; a1 = peg array 
0000080C  4280                     656      clr.l d0                            ; d0 = counter 
0000080E                           657      
0000080E                           658      ; Loop through the peg data and position pegs accordingly
0000080E                           659  .peg_loop 
0000080E                           660      ; set x position of peg 
0000080E  4281                     661      clr.l d1 
00000810  3218                     662      move.w (a0)+, d1            ; d1 = x pos 
00000812  E189                     663      lsl.l #8, d1                ; convert from integer to fixed 
00000814  2341 0000                664      move.l d1, M_PEG_X(a1)
00000818                           665      
00000818                           666      ; set y position of peg 
00000818  4281                     667      clr.l d1 
0000081A  3218                     668      move.w (a0)+, d1 
0000081C  E189                     669      lsl.l #8, d1 
0000081E  2341 0004                670      move.l d1, M_PEG_Y(a1)
00000822                           671      
00000822                           672      ; mark the peg as active 
00000822  137C 0001 0011           673      move.b #1, M_PEG_ACTIVE(a1)    ; 1 = active 
00000828                           674      
00000828                           675      ; Update peg sprite 
00000828  2F08                     676      move.l a0, -(sp)
0000082A  2F09                     677      move.l a1, -(sp)
0000082C  2F00                     678      move.l d0, -(sp)            ; save reg state
0000082E                           679      
0000082E  2049                     680      move.l a1, a0 
00000830  4EB9 000014BC            681      jsr Peg_Draw
00000836                           682      
00000836  201F                     683      move.l (sp)+, d0 
00000838  225F                     684      move.l (sp)+, a1 
0000083A  205F                     685      move.l (sp)+, a0            ; restore reg state
0000083C                           686      
0000083C                           687      ; point to next peg struct in preparation for next iteration 
0000083C  D3FC 00000020            688      adda.l #PEG_DATA_SIZE, a1 
00000842                           689      
00000842                           690      ; check if loop should be repeated 
00000842  5280                     691      addq.l #1, d0 
00000844  B0B8 041E                692      cmp.l LevelPegCount, d0 
00000848  66C4                     693      bne .peg_loop
0000084A                           694      
0000084A                           695  .set_red_pegs 
0000084A  2238 0422                696      move.l LevelRedPegCount, d1 
0000084E  2438 041E                697      move.l LevelPegCount, d2 
00000852                           698      
00000852                           699  .red_peg_loop
00000852                           700      ; First, get a random byte value 
00000852  48E7 6000                701      movem.l d1-d2, -(sp)    ; save regs before calling Peg_InitSprite 
00000856  4EB8 0450                702      jsr Random          ; d0.b = random value 
0000085A  4CDF 0006                703      movem.l (sp)+, d1-d2 
0000085E                           704      
0000085E  80C2                     705      divu d2, d0             ; random val / num pegs 
00000860  4840                     706      swap.w d0               ; get the remainder into d0.w 
00000862  0280 0000FFFF            707      andi.l #$0000ffff, d0   ; clear the quotient portion 
00000868                           708      
00000868                           709      ; get the peg at this index 
00000868  EB88                     710      lsl.l #PEG_SIZE_SHIFT, d0
0000086A  41F8 0006                711      lea Pegs, a0 
0000086E  D1C0                     712      add.l d0, a0 
00000870                           713      
00000870                           714      ; examine this random peg. if it's already red, then 
00000870                           715      ; keep looping until a blue one is found 
00000870                           716  .find_blue_loop
00000870  1628 0010                717      move.b M_PEG_TYPE(a0), d3 
00000874  0C03 0000                718      cmpi.b #PEG_TYPE_BLUE, d3 
00000878  6700 0018                719      beq .found_blue                 ; is this a blue peg? Then branch past this infinite loop 
0000087C                           720      
0000087C  D1FC 00000020            721      adda.l #PEG_DATA_SIZE, a0       ; increment to next peg 
00000882  B1FC 000003C6            722      cmp.l #(Pegs+PEG_DATA_SIZE*MAX_PEGS), a0 ; but check if we just overran the peg array 
00000888  65E6                     723      blo .find_blue_loop
0000088A                           724      
0000088A  41F8 0006                725      lea Pegs, a0                   ; we are past the last peg in the array. reset to first peg.
0000088E  4EF8 0870                726      jmp .find_blue_loop
00000892                           727      
00000892                           728  .found_blue 
00000892                           729      ; A blue peg as found. Set it to red and then update the sprite 
00000892  117C 0001 0010           730      move.b #PEG_TYPE_RED, M_PEG_TYPE(a0)
00000898                           731      
00000898  48E7 6000                732      movem.l d1-d2, -(sp)    ; save regs before calling Peg_InitSprite 
0000089C  4EB9 000014BC            733      jsr Peg_Draw
000008A2  4CDF 0006                734      movem.l (sp)+, d1-d2 
000008A6                           735      
000008A6                           736      ; decrement counter 
000008A6  5381                     737      subq.l #1, d1 
000008A8  66A8                     738      bne .red_peg_loop
000008AA                           739      
000008AA                           740      ; draw the new ball count 
000008AA  4EB9 00000B16            741      jsr DrawBallCount
000008B0                           742      
000008B0  4E75                     743      rts 
000008B2                           744      
000008B2                           745  ; ------ SUBROUTINE ------
000008B2                           746  ; UpdateAim
000008B2                           747  ;
000008B2                           748  ; Updates the aim angle based on user input.
000008B2                           749  ; Sets the ball based on the aim angle. 
000008B2                           750  ; Will launch ball and enter the resolve state 
000008B2                           751  ; if the user pressed A. 
000008B2                           752  ; Should only be called in STATE_AIM
000008B2                           753  ; ------------------------  
000008B2                           754  UpdateAim:
000008B2                           755  
000008B2  3038 0406                756      move.w ButtonsDown, d0 
000008B6  2238 0412                757      move.l AimAngle, d1
000008BA                           758      
000008BA  0800 0002                759      btst #BUTTON_LEFT, d0 
000008BE  6600 000E                760      bne .check_right
000008C2  0681 00000200            761      addi.l #AIM_ANGLE_DELTA, d1 
000008C8  4EF9 000008DC            762      jmp .clamp_aim_angle
000008CE                           763  .check_right
000008CE  0800 0003                764      btst #BUTTON_RIGHT, d0 
000008D2  6600 0008                765      bne .clamp_aim_angle
000008D6  0481 00000200            766      subi.l #AIM_ANGLE_DELTA, d1 
000008DC                           767      
000008DC                           768  .clamp_aim_angle
000008DC  0C81 00000500            769      cmpi.l #AIM_ANGLE_MIN, d1 
000008E2  6E00 000E                770      bgt .check_clamp_max
000008E6  223C 00000500            771      move.l #AIM_ANGLE_MIN, d1 
000008EC  4EF9 00000902            772      jmp .save_aim_angle
000008F2                           773  .check_clamp_max
000008F2  0C81 0000AF00            774      cmpi.l #AIM_ANGLE_MAX, d1 
000008F8  6D00 0008                775      blt .save_aim_angle 
000008FC  223C 0000AF00            776      move.l #AIM_ANGLE_MAX, d1 
00000902                           777      
00000902                           778  .save_aim_angle
00000902  21C1 0412                779      move.l d1, AimAngle 
00000906                           780      
00000906  4EB9 00000924            781      jsr _PositionBall
0000090C  4EB9 0000097C            782      jsr _CheckLaunch
00000912                           783      
00000912  41F8 03E6                784      lea Saver, a0  
00000916  4EB9 00001660            785      jsr Saver_Update 
0000091C                           786  
0000091C                           787  .return 
0000091C                           788  
0000091C  4EB9 00000B3A            789      jsr ClipView
00000922  4E75                     790      rts 
00000924                           791      
00000924                           792  ; ------ SUBROUTINE ------
00000924                           793  ; _PositionBall
00000924                           794  ;
00000924                           795  ; Private subroutine that positions the ball 
00000924                           796  ; based on the current AimAngle.
00000924                           797  ; ------------------------  
00000924                           798  _PositionBall:
00000924                           799      
00000924  41F8 03C6                800      lea Ball, a0 
00000928  4EB9 0000136C            801      jsr Ball_Hide
0000092E                           802      
0000092E                           803      ; Get delta x from center 
0000092E  701E                     804      move.l #(AIM_RADIUS>>8), d0         
00000930  2238 0412                805      move.l AimAngle, d1             ; load global var AimAngle into d1 
00000934  E089                     806      lsr.l #8, d1                    ; convert from fixed to int 
00000936                           807      
00000936  41F9 00000EAA            808      lea CosTable, a0 
0000093C  E389                     809      lsl.l #1, d1                    ; multiply angle by 2 to get word-offset into table 
0000093E  D1C1                     810      add.l d1, a0                    ; a0 pointing at cos((int)AimAngle)
00000940  3210                     811      move.w (a0), d1                 ; d1 = 8.8 cos value 
00000942                           812      
00000942  C3C0                     813      muls d0, d1                     ; d1 = AIM_RADIUS * cos(AimAngle) = DeltaX * 256 
00000944                           814      
00000944  243C 00009A00            815      move.l #AIM_CENTER_X, d2 
0000094A  D282                     816      add.l d2, d1                    ; d1 = ball x pos. (x = AIM_CENTER_X + DeltaX)
0000094C                           817      
0000094C                           818  
0000094C                           819      ; Get delta y from center 
0000094C  2438 0412                820      move.l AimAngle, d2             ; load global var AimAngle into d2 
00000950  E08A                     821      lsr.l #8, d2                    ; convert from fixed to int 
00000952                           822      
00000952  41F9 00000BDA            823      lea SinTable, a0 
00000958  E38A                     824      lsl.l #1, d2                    ; multiply angle by 2 to get word-offset into table 
0000095A  D1C2                     825      add.l d2, a0                    ; a0 pointing at sin((int)AimAngle)
0000095C  3410                     826      move.w (a0), d2                 ; d2 = 8.8 sin value 
0000095E                           827      
0000095E  C5C0                     828      muls d0, d2                     ; d2 = AIM_RADIUS * sin(AimAngle) = DeltaX * 256 
00000960                           829      
00000960  263C 00000500            830      move.l #AIM_CENTER_Y, d3 
00000966  D483                     831      add.l d3, d2                    ; d3 = ball y pos. (y = AIM_CENTER_Y + DeltaX)
00000968                           832      
00000968                           833      ; Update the ball position
00000968  41F8 03C6                834      lea Ball, a0 
0000096C  2141 0000                835      move.l d1, M_BALL_X(a0)
00000970  2142 0004                836      move.l d2, M_BALL_Y(a0)
00000974  4EB9 0000134C            837      jsr Ball_Draw
0000097A                           838  
0000097A                           839  .return 
0000097A                           840  
0000097A  4E75                     841      rts 
0000097C                           842  
0000097C                           843  ; ------ SUBROUTINE ------
0000097C                           844  ; _CheckLaunch
0000097C                           845  ;
0000097C                           846  ; Private subroutine that checks if the user 
0000097C                           847  ; has pressed the A button to launch the ball.
0000097C                           848  ; If A is pressed, the ball's x/y velocity is 
0000097C                           849  ; is set and the game state is changed to 
0000097C                           850  ; STATE_RESOLVE. 
0000097C                           851  ; This subroutine should only be called from 
0000097C                           852  ; UpdateAim
0000097C                           853  ; ------------------------  
0000097C                           854  _CheckLaunch:
0000097C                           855  
0000097C  3038 0406                856      move.w ButtonsDown, d0 
00000980  3238 043E                857      move.w PrevDown, d1 
00000984  4641                     858      not.w d1 
00000986  8041                     859      or.w d1, d0 
00000988  0800 000C                860      btst #BUTTON_A, d0 
0000098C  6600 004C                861      bne .return 
00000990                           862      
00000990                           863      ; Set the ball's x/y velocity
00000990                           864      ; First find the x-component of velocity 
00000990  203C 00000400            865      move.l #(LAUNCH_SPEED), d0      ; d0 = LAUNCH_SPEED in fixed 24.8
00000996  2238 0412                866      move.l AimAngle, d1             ; load global var AimAngle into d1 
0000099A  E081                     867      asr.l #8, d1                    ; convert from fixed to int 
0000099C  41F9 00000EAA            868      lea CosTable, a0 
000009A2  E381                     869      asl.l #1, d1                    ; mult by 2 to get word-offset into table 
000009A4  D1C1                     870      add.l d1, a0                    ; find the cos value. The angle should already be in range 5-175.
000009A6                           871      
000009A6  3210                     872      move.w (a0), d1                 ; d1 = 8.8 value 
000009A8  C3C0                     873      muls d0, d1                     ; mult to get the xvel component of LAUNCH_SPEED
000009AA                           874      
000009AA  E081                     875      asr.l #8, d1                    ; result is in 16.16 format. shift right to get into 24.8
000009AC  2401                     876      move.l d1, d2                   ; d2 = xvel component 
000009AE                           877      
000009AE                           878      ; Next find the y component of velocity 
000009AE  2238 0412                879      move.l AimAngle, d1 
000009B2  E081                     880      asr.l #8, d1 
000009B4  41F9 00000BDA            881      lea SinTable, a0 
000009BA  E381                     882      asl.l #1, d1 
000009BC  D1C1                     883      add.l d1, a0 
000009BE                           884      
000009BE  3210                     885      move.w (a0), d1 
000009C0  C3C0                     886      muls d0, d1 
000009C2                           887      
000009C2  E081                     888      asr.l #8, d1                    ; convert from 16.16 to 24.8 
000009C4  2601                     889      move.l d1, d3                   ; d3 = yvel component
000009C6                           890      
000009C6                           891      ; Update the ball struct's new xvel and yvel 
000009C6  41F8 03C6                892      lea Ball, a0 
000009CA  2142 0010                893      move.l d2, M_BALL_XVEL(a0)
000009CE  2143 0014                894      move.l d3, M_BALL_YVEL(a0)
000009D2                           895      
000009D2                           896      ; Change the game state 
000009D2  21FC 00000002 040A       897      move.l #STATE_RESOLVE, GameState
000009DA                           898      
000009DA                           899  .return 
000009DA  4E75                     900      rts 
000009DC                           901  
000009DC                           902  ; ------ SUBROUTINE ------
000009DC                           903  ; UpdateResolve
000009DC                           904  ;
000009DC                           905  ; Will update the game physics, resolve collisions
000009DC                           906  ; that occur between the ball and pegs. Will change 
000009DC                           907  ; state to STATE_AIM if the ball falls below 
000009DC                           908  ; FALLOUT_Y or if the ball collides with the saver. 
000009DC                           909  ; Will change state to STATE_LOSE if the player
000009DC                           910  ; has no more lives. Will change state to 
000009DC                           911  ; STATE_WIN if all orange pegs are cleared on level
000009DC                           912  ; NUM_LEVELS-1.
000009DC                           913  ; ------------------------  
000009DC                           914  UpdateResolve:
000009DC                           915  
000009DC  41F8 03C6                916      lea Ball, a0 
000009E0  4EB9 000012B0            917      jsr Ball_Update 
000009E6                           918      
000009E6  41F8 03E6                919      lea Saver, a0  
000009EA  4EB9 00001660            920      jsr Saver_Update 
000009F0                           921      
000009F0                           922      ; Check if the stage has been cleared. (no red pegs remaining)
000009F0  2038 0432                923      move.l RedPegCount, d0 
000009F4  0C80 00000000            924      cmpi.l #0, d0 
000009FA  6600 0038                925      bne .check_fallout
000009FE                           926  
000009FE                           927      ; increment level and check if that was the last level 
000009FE  52B8 0416                928      addq.l #1, Level 
00000A02  0CB8 00000008 0416       929      cmpi.l #NUM_LEVELS, Level 
00000A0A  6600 0016                930      bne .load_next_level
00000A0E                           931      
00000A0E                           932      ; That was the last level, so switch to the win state 
00000A0E  21FC 00000004 040A       933      move.l #STATE_WIN, GameState
00000A16  4EB9 00000B9C            934      jsr LoadWin 
00000A1C  4EF9 00000A7E            935      jmp .return 
00000A22                           936      
00000A22                           937  .load_next_level
00000A22  4EB8 07AC                938      jsr LoadLevel 
00000A26  21FC 00000001 040A       939      move.l #STATE_AIM, GameState
00000A2E  4EF9 00000A7E            940      jmp .return 
00000A34                           941      
00000A34                           942  .check_fallout
00000A34                           943      ; Check if the ball has passed the fallout threshold 
00000A34  41F8 03C6                944      lea Ball, a0 
00000A38  2028 0004                945      move.l M_BALL_Y(a0), d0 
00000A3C  0C80 0000E000            946      cmpi.l #FALLOUT_Y, d0 
00000A42  6D00 003A                947      blt .return 
00000A46                           948      
00000A46                           949      ; Ball has passed fallout_y, so decrement BallCount 
00000A46                           950      ; and if ball count is 0, then go to lose state 
00000A46  2038 041A                951      move.l BallCount, d0 
00000A4A  5380                     952      subq.l #1, d0 
00000A4C  21C0 041A                953      move.l d0, BallCount
00000A50  4EB9 00000B16            954      jsr DrawBallCount
00000A56  0CB8 00000000 041A       955      cmpi.l #0, BallCount 
00000A5E  6600 0016                956      bne .set_state_aim
00000A62  21FC 00000003 040A       957      move.l #STATE_LOSE, GameState
00000A6A  4EB9 00000B78            958      jsr LoadLose
00000A70  4EF9 00000A7E            959      jmp .return 
00000A76                           960  .set_state_aim 
00000A76  21FC 00000001 040A       961      move.l #STATE_AIM, GameState
00000A7E                           962      
00000A7E                           963  .return 
00000A7E  4EB9 00000B3A            964      jsr ClipView
00000A84  4E75                     965      rts
00000A86                           966      
00000A86                           967  ; ------ SUBROUTINE ------
00000A86                           968  ; ClearPegs
00000A86                           969  ;
00000A86                           970  ; This will deactive all pegs and set their 
00000A86                           971  ; sprites offscreen. Will also set their 
00000A86                           972  ; sprite index appropriately.
00000A86                           973  ; ------------------------  
00000A86                           974  ClearPegs:
00000A86                           975  
00000A86  =00000000                976  L_CUR_PEG   SET 0 
00000A86  =00000004                977  L_COUNTER   SET 4 
00000A86  =00000008                978  LVARS_SIZE  SET 8 
00000A86                           979  
00000A86                           980      ; add local vars to stack 
00000A86  518F                     981      sub.l #LVARS_SIZE, sp 
00000A88  41F8 0006                982      lea Pegs, a0        ; a0 = pointer to cur peg 
00000A8C  4280                     983      clr.l d0            ; d0 = counter 
00000A8E  2F48 0000                984      move.l a0, L_CUR_PEG(sp)
00000A92  2F40 0004                985      move.l d0, L_COUNTER(sp)
00000A96                           986      
00000A96                           987  .loop 
00000A96                           988      
00000A96                           989      ; Initialize the peg 
00000A96  4EB9 00001476            990      jsr Peg_Init
00000A9C                           991      
00000A9C                           992      ; Set the approriate sprite index 
00000A9C  206F 0000                993      move.l L_CUR_PEG(sp), a0        ; restore local vars to registers
00000AA0  202F 0004                994      move.l L_COUNTER(sp), d0 
00000AA4  2200                     995      move.l d0, d1 
00000AA6  5481                     996      addq.l #PEGS_SPRITE_INDEX, d1   ; d1 = sprite index 
00000AA8  1141 0013                997      move.b d1, M_PEG_SPRITE_INDEX(a0)
00000AAC                           998  
00000AAC  202F 0004                999      move.l L_COUNTER(sp), d0 
00000AB0  5280                    1000      addq.l #1, d0 
00000AB2  2F40 0004               1001      move.l d0, L_COUNTER(sp)
00000AB6  0C80 0000001E           1002      cmpi.l #MAX_PEGS, d0 
00000ABC  6700 0014               1003      beq .return 
00000AC0                          1004      
00000AC0                          1005      ; move pointer to next peg 
00000AC0  206F 0000               1006      move.l L_CUR_PEG(sp), a0 
00000AC4  D1FC 00000020           1007      add.l #PEG_DATA_SIZE, a0 
00000ACA  2F48 0000               1008      move.l a0, L_CUR_PEG(sp)
00000ACE  4EF8 0A96               1009      jmp .loop 
00000AD2                          1010      
00000AD2                          1011  .return 
00000AD2                          1012  
00000AD2                          1013      ; remove local vars from stack 
00000AD2  508F                    1014      add.l #LVARS_SIZE, sp 
00000AD4  4E75                    1015      rts
00000AD6                          1016      
00000AD6                          1017  ; ------ SUBROUTINE ------
00000AD6                          1018  ; DrawScore
00000AD6                          1019  ;
00000AD6                          1020  ; Uses the current score in the Score 
00000AD6                          1021  ; global bss variable to draw digits 
00000AD6                          1022  ; on Plane A in decimal.
00000AD6                          1023  ; ------------------------  
00000AD6                          1024  DrawScore:
00000AD6  =00000000               1025  L_DIGIT3 SET 0
00000AD6  =00000002               1026  L_DIGIT2 SET 2
00000AD6  =00000004               1027  L_DIGIT1 SET 4
00000AD6  =00000006               1028  LVARS_SIZE SET 6 
00000AD6                          1029  
00000AD6                          1030      ; allocate local vars
00000AD6  5D8F                    1031      sub.l #LVARS_SIZE, sp 
00000AD8                          1032      
00000AD8                          1033      ; Get first digit of score 
00000AD8  2038 043A               1034      move.l Score, d0 
00000ADC  80FC 000A               1035      divu #10, d0 
00000AE0  2200                    1036      move.l d0, d1 
00000AE2  4841                    1037      swap.w d1
00000AE4  3F41 0004               1038      move.w d1, L_DIGIT1(sp)
00000AE8  0280 0000FFFF           1039      andi.l #$0000ffff, d0 
00000AEE                          1040  
00000AEE                          1041      ; second digit 
00000AEE  80FC 000A               1042      divu #10, d0 
00000AF2  2200                    1043      move.l d0, d1 
00000AF4  4841                    1044      swap.w d1
00000AF6  3F41 0002               1045      move.w d1, L_DIGIT2(sp)    
00000AFA  0280 0000FFFF           1046      andi.l #$0000ffff, d0 
00000B00                          1047      
00000B00                          1048      ; third digit 
00000B00  80FC 000A               1049      divu #10, d0 
00000B04  2200                    1050      move.l d0, d1 
00000B06  4841                    1051      swap.w d1
00000B08  3F41 0000               1052      move.w d1, L_DIGIT3(sp)
00000B0C  0280 0000FFFF           1053      andi.l #$0000ffff, d0 
00000B12                          1054      
00000B12                          1055      ; E68 TODO
00000B12                          1056      ;PRINT_THE_SCORE_HERE 
00000B12                          1057      
00000B12                          1058      ; destroy local vars
00000B12  5C8F                    1059      add.l #LVARS_SIZE, sp 
00000B14                          1060  
00000B14  4E75                    1061      rts 
00000B16                          1062      
00000B16                          1063  ; ------ SUBROUTINE ------
00000B16                          1064  ; DrawBallCount
00000B16                          1065  ;
00000B16                          1066  ; Draws the ball count number on the 
00000B16                          1067  ; screen (MAX BALLS = 9) by placing the 
00000B16                          1068  ; proper glyphs into plane a's name table.
00000B16                          1069  ; ------------------------  
00000B16                          1070  DrawBallCount:
00000B16                          1071      
00000B16                          1072      ; Assume that MAX_BALL_COUNT is being 
00000B16                          1073      ; used elsewhere to properly clamp the maximum balls
00000B16                          1074      ; the player can have 
00000B16                          1075      
00000B16                          1076      ; E68 TODO
00000B16                          1077      ;PRINT_THE_TEXT_HERE
00000B16                          1078      
00000B16  4E75                    1079      rts
00000B18                          1080      
00000B18                          1081      
00000B18                          1082  DrawBackground:
00000B18                          1083  
00000B18  7000                    1084      move.l #0, d0             ; param d0: chunk x coordinate
00000B1A  7200                    1085      move.l #0, d1             ; param d1: chunk y coordinate 
00000B1C  243C 00000140           1086      move.l #320, d2            ; param d2: chunk width 
00000B22  263C 000000E0           1087      move.l #224, d3            ; param d3: chunk height 
00000B28  7800                    1088      move.l #0, d4             ; param d4: screen x coordinate
00000B2A  7A00                    1089      move.l #0, d5             ; param d5: screen y coordinate 
00000B2C  41F9 0000A616           1090      lea BGBitmap, a0       ; param a0: pointer to bitmap file data
00000B32  4EB8 04B4               1091      jsr RenderBitmap16 
00000B36  4E75                    1092      rts 
00000B38                          1093      
00000B38  4E75                    1094      rts 
00000B3A                          1095      
00000B3A                          1096  ; ------ SUBROUTINE ------
00000B3A                          1097  ; ClipView
00000B3A                          1098  ;
00000B3A                          1099  ; Draws two black rectangles outside of the 
00000B3A                          1100  ; game space to hide any pixels that render 
00000B3A                          1101  ; outside the gamespace.
00000B3A                          1102  ; ------------------------  
00000B3A                          1103  ClipView:
00000B3A                          1104  
00000B3A  7050                    1105      move.l #PEN_COLOR_TRAP_CODE, d0 
00000B3C  7200                    1106      move.l #$000000, d1              ; set pen color to black 
00000B3E  4E4F                    1107      trap #15 
00000B40                          1108      
00000B40  7051                    1109      move.l #FILL_COLOR_TRAP_CODE, d0 
00000B42  7200                    1110      move.l #$000000, d1             ; set fill color to black 
00000B44  4E4F                    1111      trap #15 
00000B46                          1112      
00000B46  7200                    1113      move.l #0, d1 
00000B48  243C 000000E0           1114      move.l #224, d2 
00000B4E  263C 00000280           1115      move.l #640, d3 
00000B54  283C 000001E0           1116      move.l #480, d4 
00000B5A  7057                    1117      move.l #DRAW_RECT_TRAP_CODE, d0 
00000B5C  4E4F                    1118      trap #15 
00000B5E                          1119      
00000B5E  223C 00000140           1120      move.l #320, d1 
00000B64  7400                    1121      move.l #0, d2 
00000B66  263C 00000280           1122      move.l #640, d3 
00000B6C  283C 000001E0           1123      move.l #480, d4 
00000B72  7057                    1124      move.l #DRAW_RECT_TRAP_CODE, d0 
00000B74  4E4F                    1125      trap #15 
00000B76                          1126  
00000B76  4E75                    1127      rts 
00000B78                          1128      
00000B78                          1129      
00000B78                          1130  ; ------ SUBROUTINE ------
00000B78                          1131  ; LoadLose 
00000B78                          1132  ; 
00000B78                          1133  ; Loads the lose state. Draws the 
00000B78                          1134  ; "LOSE" text on screen.
00000B78                          1135  ; ------------------------  
00000B78                          1136  LoadLose:
00000B78                          1137  
00000B78  =00000091               1138  LOSE_X EQU 145
00000B78  =00000064               1139  LOSE_Y EQU 100
00000B78  =0000012C               1140  LOSE_WIDTH EQU 300 
00000B78  =0000012C               1141  LOSE_HEIGHT EQU 300
00000B78                          1142      
00000B78  7000                    1143      move.l #0, d0             ; param d0: chunk x coordinate
00000B7A  7200                    1144      move.l #0, d1             ; param d1: chunk y coordinate 
00000B7C  243C 0000012C           1145      move.l #LOSE_WIDTH, d2            ; param d2: chunk width 
00000B82  263C 0000012C           1146      move.l #LOSE_HEIGHT, d3            ; param d3: chunk height 
00000B88  7864                    1147      move.l #LOSE_Y, d4             ; param d4: screen x coordinate
00000B8A  2A3C 00000091           1148      move.l #LOSE_X, d5             ; param d5: screen y coordinate 
00000B90  41F9 0001328C           1149      lea LoseBitmap, a0       ; param a0: pointer to bitmap file data
00000B96  4EB8 04B4               1150      jsr RenderBitmap16 
00000B9A  4E75                    1151      rts 
00000B9C                          1152      
00000B9C                          1153  ; ------ SUBROUTINE ------
00000B9C                          1154  ; LoadWin 
00000B9C                          1155  ; 
00000B9C                          1156  ; Loads the win state. Draws the 
00000B9C                          1157  ; "WIN" text on screen.
00000B9C                          1158  ; ------------------------  
00000B9C                          1159  LoadWin:
00000B9C                          1160  
00000B9C  =00000091               1161  WIN_X EQU 145
00000B9C  =00000064               1162  WIN_Y EQU 100
00000B9C  =0000012C               1163  WIN_WIDTH EQU 300 
00000B9C  =0000012C               1164  WIN_HEIGHT EQU 300
00000B9C                          1165      
00000B9C  7000                    1166      move.l #0, d0             ; param d0: chunk x coordinate
00000B9E  7200                    1167      move.l #0, d1             ; param d1: chunk y coordinate 
00000BA0  243C 0000012C           1168      move.l #WIN_WIDTH, d2            ; param d2: chunk width 
00000BA6  263C 0000012C           1169      move.l #WIN_HEIGHT, d3            ; param d3: chunk height 
00000BAC  283C 00000091           1170      move.l #WIN_X, d4             ; param d4: screen x coordinate
00000BB2  7A64                    1171      move.l #WIN_Y, d5             ; param d5: screen y coordinate 
00000BB4  41F9 00014602           1172      lea WinBitmap, a0       ; param a0: pointer to bitmap file data
00000BBA  4EB8 04B4               1173      jsr RenderBitmap16 
00000BBE                          1174      
00000BBE  4E75                    1175      rts 
00000BC0                          1176      
00000BC0                          1177  
00000BC0                          1178  ; ------ SUBROUTINE ------
00000BC0                          1179  ; UpdateLoseWin 
00000BC0                          1180  ; 
00000BC0                          1181  ; Will check if user is hitting START. If so, then  
00000BC0                          1182  ; will reset to the start state.
00000BC0                          1183  ; ------------------------      
00000BC0                          1184  UpdateLoseWin:
00000BC0                          1185  
00000BC0  3038 0406               1186      move.w ButtonsDown, d0 
00000BC4  0800 000D               1187      btst #BUTTON_START, d0 
00000BC8  6600 000E               1188      bne .return 
00000BCC                          1189      
00000BCC  21FC 00000000 040A      1190      move.l #STATE_START, GameState
00000BD4  4EB8 071C               1191      jsr LoadStart 
00000BD8                          1192      
00000BD8                          1193  .return 
00000BD8  4E75                    1194      rts 
00000BD8  4E75                    1195  -------------------- end include --------------------
00000BDA                          1196      INCLUDE "source/tables.asm"
00000BDA                          1197  SinTable:
00000BDA= 0000                    1198      dc.w 0
00000BDC= 0004                    1199      dc.w 4
00000BDE= 0008                    1200      dc.w 8
00000BE0= 000D                    1201      dc.w 13
00000BE2= 0011                    1202      dc.w 17
00000BE4= 0016                    1203      dc.w 22
00000BE6= 001A                    1204      dc.w 26
00000BE8= 001F                    1205      dc.w 31
00000BEA= 0023                    1206      dc.w 35
00000BEC= 0028                    1207      dc.w 40
00000BEE= 002C                    1208      dc.w 44
00000BF0= 0030                    1209      dc.w 48
00000BF2= 0035                    1210      dc.w 53
00000BF4= 0039                    1211      dc.w 57
00000BF6= 003D                    1212      dc.w 61
00000BF8= 0042                    1213      dc.w 66
00000BFA= 0046                    1214      dc.w 70
00000BFC= 004A                    1215      dc.w 74
00000BFE= 004F                    1216      dc.w 79
00000C00= 0053                    1217      dc.w 83
00000C02= 0057                    1218      dc.w 87
00000C04= 005B                    1219      dc.w 91
00000C06= 005F                    1220      dc.w 95
00000C08= 0064                    1221      dc.w 100
00000C0A= 0068                    1222      dc.w 104
00000C0C= 006C                    1223      dc.w 108
00000C0E= 0070                    1224      dc.w 112
00000C10= 0074                    1225      dc.w 116
00000C12= 0078                    1226      dc.w 120
00000C14= 007C                    1227      dc.w 124
00000C16= 0080                    1228      dc.w 128
00000C18= 0083                    1229      dc.w 131
00000C1A= 0087                    1230      dc.w 135
00000C1C= 008B                    1231      dc.w 139
00000C1E= 008F                    1232      dc.w 143
00000C20= 0092                    1233      dc.w 146
00000C22= 0096                    1234      dc.w 150
00000C24= 009A                    1235      dc.w 154
00000C26= 009D                    1236      dc.w 157
00000C28= 00A1                    1237      dc.w 161
00000C2A= 00A4                    1238      dc.w 164
00000C2C= 00A7                    1239      dc.w 167
00000C2E= 00AB                    1240      dc.w 171
00000C30= 00AE                    1241      dc.w 174
00000C32= 00B1                    1242      dc.w 177
00000C34= 00B5                    1243      dc.w 181
00000C36= 00B8                    1244      dc.w 184
00000C38= 00BB                    1245      dc.w 187
00000C3A= 00BE                    1246      dc.w 190
00000C3C= 00C1                    1247      dc.w 193
00000C3E= 00C4                    1248      dc.w 196
00000C40= 00C6                    1249      dc.w 198
00000C42= 00C9                    1250      dc.w 201
00000C44= 00CC                    1251      dc.w 204
00000C46= 00CF                    1252      dc.w 207
00000C48= 00D1                    1253      dc.w 209
00000C4A= 00D4                    1254      dc.w 212
00000C4C= 00D6                    1255      dc.w 214
00000C4E= 00D9                    1256      dc.w 217
00000C50= 00DB                    1257      dc.w 219
00000C52= 00DD                    1258      dc.w 221
00000C54= 00DF                    1259      dc.w 223
00000C56= 00E2                    1260      dc.w 226
00000C58= 00E4                    1261      dc.w 228
00000C5A= 00E6                    1262      dc.w 230
00000C5C= 00E8                    1263      dc.w 232
00000C5E= 00E9                    1264      dc.w 233
00000C60= 00EB                    1265      dc.w 235
00000C62= 00ED                    1266      dc.w 237
00000C64= 00EE                    1267      dc.w 238
00000C66= 00F0                    1268      dc.w 240
00000C68= 00F2                    1269      dc.w 242
00000C6A= 00F3                    1270      dc.w 243
00000C6C= 00F4                    1271      dc.w 244
00000C6E= 00F6                    1272      dc.w 246
00000C70= 00F7                    1273      dc.w 247
00000C72= 00F8                    1274      dc.w 248
00000C74= 00F9                    1275      dc.w 249
00000C76= 00FA                    1276      dc.w 250
00000C78= 00FB                    1277      dc.w 251
00000C7A= 00FC                    1278      dc.w 252
00000C7C= 00FC                    1279      dc.w 252
00000C7E= 00FD                    1280      dc.w 253
00000C80= 00FE                    1281      dc.w 254
00000C82= 00FE                    1282      dc.w 254
00000C84= 00FF                    1283      dc.w 255
00000C86= 00FF                    1284      dc.w 255
00000C88= 00FF                    1285      dc.w 255
00000C8A= 00FF                    1286      dc.w 255
00000C8C= 00FF                    1287      dc.w 255
00000C8E= 00FF                    1288      dc.w 255
00000C90= 00FF                    1289      dc.w 255
00000C92= 00FF                    1290      dc.w 255
00000C94= 00FF                    1291      dc.w 255
00000C96= 00FF                    1292      dc.w 255
00000C98= 00FF                    1293      dc.w 255
00000C9A= 00FE                    1294      dc.w 254
00000C9C= 00FE                    1295      dc.w 254
00000C9E= 00FD                    1296      dc.w 253
00000CA0= 00FC                    1297      dc.w 252
00000CA2= 00FC                    1298      dc.w 252
00000CA4= 00FB                    1299      dc.w 251
00000CA6= 00FA                    1300      dc.w 250
00000CA8= 00F9                    1301      dc.w 249
00000CAA= 00F8                    1302      dc.w 248
00000CAC= 00F7                    1303      dc.w 247
00000CAE= 00F6                    1304      dc.w 246
00000CB0= 00F4                    1305      dc.w 244
00000CB2= 00F3                    1306      dc.w 243
00000CB4= 00F2                    1307      dc.w 242
00000CB6= 00F0                    1308      dc.w 240
00000CB8= 00EE                    1309      dc.w 238
00000CBA= 00ED                    1310      dc.w 237
00000CBC= 00EB                    1311      dc.w 235
00000CBE= 00E9                    1312      dc.w 233
00000CC0= 00E8                    1313      dc.w 232
00000CC2= 00E6                    1314      dc.w 230
00000CC4= 00E4                    1315      dc.w 228
00000CC6= 00E2                    1316      dc.w 226
00000CC8= 00DF                    1317      dc.w 223
00000CCA= 00DD                    1318      dc.w 221
00000CCC= 00DB                    1319      dc.w 219
00000CCE= 00D9                    1320      dc.w 217
00000CD0= 00D6                    1321      dc.w 214
00000CD2= 00D4                    1322      dc.w 212
00000CD4= 00D1                    1323      dc.w 209
00000CD6= 00CF                    1324      dc.w 207
00000CD8= 00CC                    1325      dc.w 204
00000CDA= 00C9                    1326      dc.w 201
00000CDC= 00C6                    1327      dc.w 198
00000CDE= 00C4                    1328      dc.w 196
00000CE0= 00C1                    1329      dc.w 193
00000CE2= 00BE                    1330      dc.w 190
00000CE4= 00BB                    1331      dc.w 187
00000CE6= 00B8                    1332      dc.w 184
00000CE8= 00B5                    1333      dc.w 181
00000CEA= 00B1                    1334      dc.w 177
00000CEC= 00AE                    1335      dc.w 174
00000CEE= 00AB                    1336      dc.w 171
00000CF0= 00A7                    1337      dc.w 167
00000CF2= 00A4                    1338      dc.w 164
00000CF4= 00A1                    1339      dc.w 161
00000CF6= 009D                    1340      dc.w 157
00000CF8= 009A                    1341      dc.w 154
00000CFA= 0096                    1342      dc.w 150
00000CFC= 0092                    1343      dc.w 146
00000CFE= 008F                    1344      dc.w 143
00000D00= 008B                    1345      dc.w 139
00000D02= 0087                    1346      dc.w 135
00000D04= 0083                    1347      dc.w 131
00000D06= 007F                    1348      dc.w 127
00000D08= 007C                    1349      dc.w 124
00000D0A= 0078                    1350      dc.w 120
00000D0C= 0074                    1351      dc.w 116
00000D0E= 0070                    1352      dc.w 112
00000D10= 006C                    1353      dc.w 108
00000D12= 0068                    1354      dc.w 104
00000D14= 0064                    1355      dc.w 100
00000D16= 005F                    1356      dc.w 95
00000D18= 005B                    1357      dc.w 91
00000D1A= 0057                    1358      dc.w 87
00000D1C= 0053                    1359      dc.w 83
00000D1E= 004F                    1360      dc.w 79
00000D20= 004A                    1361      dc.w 74
00000D22= 0046                    1362      dc.w 70
00000D24= 0042                    1363      dc.w 66
00000D26= 003D                    1364      dc.w 61
00000D28= 0039                    1365      dc.w 57
00000D2A= 0035                    1366      dc.w 53
00000D2C= 0030                    1367      dc.w 48
00000D2E= 002C                    1368      dc.w 44
00000D30= 0028                    1369      dc.w 40
00000D32= 0023                    1370      dc.w 35
00000D34= 001F                    1371      dc.w 31
00000D36= 001A                    1372      dc.w 26
00000D38= 0016                    1373      dc.w 22
00000D3A= 0011                    1374      dc.w 17
00000D3C= 000D                    1375      dc.w 13
00000D3E= 0008                    1376      dc.w 8
00000D40= 0004                    1377      dc.w 4
00000D42= 0000                    1378      dc.w 0
00000D44= FFFC                    1379      dc.w -4
00000D46= FFF8                    1380      dc.w -8
00000D48= FFF3                    1381      dc.w -13
00000D4A= FFEF                    1382      dc.w -17
00000D4C= FFEA                    1383      dc.w -22
00000D4E= FFE6                    1384      dc.w -26
00000D50= FFE1                    1385      dc.w -31
00000D52= FFDD                    1386      dc.w -35
00000D54= FFD8                    1387      dc.w -40
00000D56= FFD4                    1388      dc.w -44
00000D58= FFD0                    1389      dc.w -48
00000D5A= FFCB                    1390      dc.w -53
00000D5C= FFC7                    1391      dc.w -57
00000D5E= FFC3                    1392      dc.w -61
00000D60= FFBE                    1393      dc.w -66
00000D62= FFBA                    1394      dc.w -70
00000D64= FFB6                    1395      dc.w -74
00000D66= FFB1                    1396      dc.w -79
00000D68= FFAD                    1397      dc.w -83
00000D6A= FFA9                    1398      dc.w -87
00000D6C= FFA5                    1399      dc.w -91
00000D6E= FFA1                    1400      dc.w -95
00000D70= FF9C                    1401      dc.w -100
00000D72= FF98                    1402      dc.w -104
00000D74= FF94                    1403      dc.w -108
00000D76= FF90                    1404      dc.w -112
00000D78= FF8C                    1405      dc.w -116
00000D7A= FF88                    1406      dc.w -120
00000D7C= FF84                    1407      dc.w -124
00000D7E= FF80                    1408      dc.w -128
00000D80= FF7D                    1409      dc.w -131
00000D82= FF79                    1410      dc.w -135
00000D84= FF75                    1411      dc.w -139
00000D86= FF71                    1412      dc.w -143
00000D88= FF6E                    1413      dc.w -146
00000D8A= FF6A                    1414      dc.w -150
00000D8C= FF66                    1415      dc.w -154
00000D8E= FF63                    1416      dc.w -157
00000D90= FF5F                    1417      dc.w -161
00000D92= FF5C                    1418      dc.w -164
00000D94= FF59                    1419      dc.w -167
00000D96= FF55                    1420      dc.w -171
00000D98= FF52                    1421      dc.w -174
00000D9A= FF4F                    1422      dc.w -177
00000D9C= FF4B                    1423      dc.w -181
00000D9E= FF48                    1424      dc.w -184
00000DA0= FF45                    1425      dc.w -187
00000DA2= FF42                    1426      dc.w -190
00000DA4= FF3F                    1427      dc.w -193
00000DA6= FF3C                    1428      dc.w -196
00000DA8= FF3A                    1429      dc.w -198
00000DAA= FF37                    1430      dc.w -201
00000DAC= FF34                    1431      dc.w -204
00000DAE= FF31                    1432      dc.w -207
00000DB0= FF2F                    1433      dc.w -209
00000DB2= FF2C                    1434      dc.w -212
00000DB4= FF2A                    1435      dc.w -214
00000DB6= FF27                    1436      dc.w -217
00000DB8= FF25                    1437      dc.w -219
00000DBA= FF23                    1438      dc.w -221
00000DBC= FF21                    1439      dc.w -223
00000DBE= FF1E                    1440      dc.w -226
00000DC0= FF1C                    1441      dc.w -228
00000DC2= FF1A                    1442      dc.w -230
00000DC4= FF18                    1443      dc.w -232
00000DC6= FF17                    1444      dc.w -233
00000DC8= FF15                    1445      dc.w -235
00000DCA= FF13                    1446      dc.w -237
00000DCC= FF12                    1447      dc.w -238
00000DCE= FF10                    1448      dc.w -240
00000DD0= FF0E                    1449      dc.w -242
00000DD2= FF0D                    1450      dc.w -243
00000DD4= FF0C                    1451      dc.w -244
00000DD6= FF0A                    1452      dc.w -246
00000DD8= FF09                    1453      dc.w -247
00000DDA= FF08                    1454      dc.w -248
00000DDC= FF07                    1455      dc.w -249
00000DDE= FF06                    1456      dc.w -250
00000DE0= FF05                    1457      dc.w -251
00000DE2= FF04                    1458      dc.w -252
00000DE4= FF04                    1459      dc.w -252
00000DE6= FF03                    1460      dc.w -253
00000DE8= FF02                    1461      dc.w -254
00000DEA= FF02                    1462      dc.w -254
00000DEC= FF01                    1463      dc.w -255
00000DEE= FF01                    1464      dc.w -255
00000DF0= FF01                    1465      dc.w -255
00000DF2= FF01                    1466      dc.w -255
00000DF4= FF01                    1467      dc.w -255
00000DF6= FF01                    1468      dc.w -255
00000DF8= FF01                    1469      dc.w -255
00000DFA= FF01                    1470      dc.w -255
00000DFC= FF01                    1471      dc.w -255
00000DFE= FF01                    1472      dc.w -255
00000E00= FF01                    1473      dc.w -255
00000E02= FF02                    1474      dc.w -254
00000E04= FF02                    1475      dc.w -254
00000E06= FF03                    1476      dc.w -253
00000E08= FF04                    1477      dc.w -252
00000E0A= FF04                    1478      dc.w -252
00000E0C= FF05                    1479      dc.w -251
00000E0E= FF06                    1480      dc.w -250
00000E10= FF07                    1481      dc.w -249
00000E12= FF08                    1482      dc.w -248
00000E14= FF09                    1483      dc.w -247
00000E16= FF0A                    1484      dc.w -246
00000E18= FF0C                    1485      dc.w -244
00000E1A= FF0D                    1486      dc.w -243
00000E1C= FF0E                    1487      dc.w -242
00000E1E= FF10                    1488      dc.w -240
00000E20= FF12                    1489      dc.w -238
00000E22= FF13                    1490      dc.w -237
00000E24= FF15                    1491      dc.w -235
00000E26= FF17                    1492      dc.w -233
00000E28= FF18                    1493      dc.w -232
00000E2A= FF1A                    1494      dc.w -230
00000E2C= FF1C                    1495      dc.w -228
00000E2E= FF1E                    1496      dc.w -226
00000E30= FF21                    1497      dc.w -223
00000E32= FF23                    1498      dc.w -221
00000E34= FF25                    1499      dc.w -219
00000E36= FF27                    1500      dc.w -217
00000E38= FF2A                    1501      dc.w -214
00000E3A= FF2C                    1502      dc.w -212
00000E3C= FF2F                    1503      dc.w -209
00000E3E= FF31                    1504      dc.w -207
00000E40= FF34                    1505      dc.w -204
00000E42= FF37                    1506      dc.w -201
00000E44= FF3A                    1507      dc.w -198
00000E46= FF3C                    1508      dc.w -196
00000E48= FF3F                    1509      dc.w -193
00000E4A= FF42                    1510      dc.w -190
00000E4C= FF45                    1511      dc.w -187
00000E4E= FF48                    1512      dc.w -184
00000E50= FF4B                    1513      dc.w -181
00000E52= FF4F                    1514      dc.w -177
00000E54= FF52                    1515      dc.w -174
00000E56= FF55                    1516      dc.w -171
00000E58= FF59                    1517      dc.w -167
00000E5A= FF5C                    1518      dc.w -164
00000E5C= FF5F                    1519      dc.w -161
00000E5E= FF63                    1520      dc.w -157
00000E60= FF66                    1521      dc.w -154
00000E62= FF6A                    1522      dc.w -150
00000E64= FF6E                    1523      dc.w -146
00000E66= FF71                    1524      dc.w -143
00000E68= FF75                    1525      dc.w -139
00000E6A= FF79                    1526      dc.w -135
00000E6C= FF7D                    1527      dc.w -131
00000E6E= FF81                    1528      dc.w -127
00000E70= FF84                    1529      dc.w -124
00000E72= FF88                    1530      dc.w -120
00000E74= FF8C                    1531      dc.w -116
00000E76= FF90                    1532      dc.w -112
00000E78= FF94                    1533      dc.w -108
00000E7A= FF98                    1534      dc.w -104
00000E7C= FF9C                    1535      dc.w -100
00000E7E= FFA1                    1536      dc.w -95
00000E80= FFA5                    1537      dc.w -91
00000E82= FFA9                    1538      dc.w -87
00000E84= FFAD                    1539      dc.w -83
00000E86= FFB1                    1540      dc.w -79
00000E88= FFB6                    1541      dc.w -74
00000E8A= FFBA                    1542      dc.w -70
00000E8C= FFBE                    1543      dc.w -66
00000E8E= FFC3                    1544      dc.w -61
00000E90= FFC7                    1545      dc.w -57
00000E92= FFCB                    1546      dc.w -53
00000E94= FFD0                    1547      dc.w -48
00000E96= FFD4                    1548      dc.w -44
00000E98= FFD8                    1549      dc.w -40
00000E9A= FFDD                    1550      dc.w -35
00000E9C= FFE1                    1551      dc.w -31
00000E9E= FFE6                    1552      dc.w -26
00000EA0= FFEA                    1553      dc.w -22
00000EA2= FFEF                    1554      dc.w -17
00000EA4= FFF3                    1555      dc.w -13
00000EA6= FFF8                    1556      dc.w -8
00000EA8= FFFC                    1557      dc.w -4
00000EAA                          1558  
00000EAA                          1559  
00000EAA                          1560  CosTable:
00000EAA= 0100                    1561      dc.w 256
00000EAC= 00FF                    1562      dc.w 255
00000EAE= 00FF                    1563      dc.w 255
00000EB0= 00FF                    1564      dc.w 255
00000EB2= 00FF                    1565      dc.w 255
00000EB4= 00FF                    1566      dc.w 255
00000EB6= 00FE                    1567      dc.w 254
00000EB8= 00FE                    1568      dc.w 254
00000EBA= 00FD                    1569      dc.w 253
00000EBC= 00FC                    1570      dc.w 252
00000EBE= 00FC                    1571      dc.w 252
00000EC0= 00FB                    1572      dc.w 251
00000EC2= 00FA                    1573      dc.w 250
00000EC4= 00F9                    1574      dc.w 249
00000EC6= 00F8                    1575      dc.w 248
00000EC8= 00F7                    1576      dc.w 247
00000ECA= 00F6                    1577      dc.w 246
00000ECC= 00F4                    1578      dc.w 244
00000ECE= 00F3                    1579      dc.w 243
00000ED0= 00F2                    1580      dc.w 242
00000ED2= 00F0                    1581      dc.w 240
00000ED4= 00EE                    1582      dc.w 238
00000ED6= 00ED                    1583      dc.w 237
00000ED8= 00EB                    1584      dc.w 235
00000EDA= 00E9                    1585      dc.w 233
00000EDC= 00E8                    1586      dc.w 232
00000EDE= 00E6                    1587      dc.w 230
00000EE0= 00E4                    1588      dc.w 228
00000EE2= 00E2                    1589      dc.w 226
00000EE4= 00DF                    1590      dc.w 223
00000EE6= 00DD                    1591      dc.w 221
00000EE8= 00DB                    1592      dc.w 219
00000EEA= 00D9                    1593      dc.w 217
00000EEC= 00D6                    1594      dc.w 214
00000EEE= 00D4                    1595      dc.w 212
00000EF0= 00D1                    1596      dc.w 209
00000EF2= 00CF                    1597      dc.w 207
00000EF4= 00CC                    1598      dc.w 204
00000EF6= 00C9                    1599      dc.w 201
00000EF8= 00C6                    1600      dc.w 198
00000EFA= 00C4                    1601      dc.w 196
00000EFC= 00C1                    1602      dc.w 193
00000EFE= 00BE                    1603      dc.w 190
00000F00= 00BB                    1604      dc.w 187
00000F02= 00B8                    1605      dc.w 184
00000F04= 00B5                    1606      dc.w 181
00000F06= 00B1                    1607      dc.w 177
00000F08= 00AE                    1608      dc.w 174
00000F0A= 00AB                    1609      dc.w 171
00000F0C= 00A7                    1610      dc.w 167
00000F0E= 00A4                    1611      dc.w 164
00000F10= 00A1                    1612      dc.w 161
00000F12= 009D                    1613      dc.w 157
00000F14= 009A                    1614      dc.w 154
00000F16= 0096                    1615      dc.w 150
00000F18= 0092                    1616      dc.w 146
00000F1A= 008F                    1617      dc.w 143
00000F1C= 008B                    1618      dc.w 139
00000F1E= 0087                    1619      dc.w 135
00000F20= 0083                    1620      dc.w 131
00000F22= 007F                    1621      dc.w 127
00000F24= 007C                    1622      dc.w 124
00000F26= 0078                    1623      dc.w 120
00000F28= 0074                    1624      dc.w 116
00000F2A= 0070                    1625      dc.w 112
00000F2C= 006C                    1626      dc.w 108
00000F2E= 0068                    1627      dc.w 104
00000F30= 0064                    1628      dc.w 100
00000F32= 005F                    1629      dc.w 95
00000F34= 005B                    1630      dc.w 91
00000F36= 0057                    1631      dc.w 87
00000F38= 0053                    1632      dc.w 83
00000F3A= 004F                    1633      dc.w 79
00000F3C= 004A                    1634      dc.w 74
00000F3E= 0046                    1635      dc.w 70
00000F40= 0042                    1636      dc.w 66
00000F42= 003D                    1637      dc.w 61
00000F44= 0039                    1638      dc.w 57
00000F46= 0035                    1639      dc.w 53
00000F48= 0030                    1640      dc.w 48
00000F4A= 002C                    1641      dc.w 44
00000F4C= 0028                    1642      dc.w 40
00000F4E= 0023                    1643      dc.w 35
00000F50= 001F                    1644      dc.w 31
00000F52= 001A                    1645      dc.w 26
00000F54= 0016                    1646      dc.w 22
00000F56= 0011                    1647      dc.w 17
00000F58= 000D                    1648      dc.w 13
00000F5A= 0008                    1649      dc.w 8
00000F5C= 0004                    1650      dc.w 4
00000F5E= 0000                    1651      dc.w 0
00000F60= FFFC                    1652      dc.w -4
00000F62= FFF8                    1653      dc.w -8
00000F64= FFF3                    1654      dc.w -13
00000F66= FFEF                    1655      dc.w -17
00000F68= FFEA                    1656      dc.w -22
00000F6A= FFE6                    1657      dc.w -26
00000F6C= FFE1                    1658      dc.w -31
00000F6E= FFDD                    1659      dc.w -35
00000F70= FFD8                    1660      dc.w -40
00000F72= FFD4                    1661      dc.w -44
00000F74= FFD0                    1662      dc.w -48
00000F76= FFCB                    1663      dc.w -53
00000F78= FFC7                    1664      dc.w -57
00000F7A= FFC3                    1665      dc.w -61
00000F7C= FFBE                    1666      dc.w -66
00000F7E= FFBA                    1667      dc.w -70
00000F80= FFB6                    1668      dc.w -74
00000F82= FFB1                    1669      dc.w -79
00000F84= FFAD                    1670      dc.w -83
00000F86= FFA9                    1671      dc.w -87
00000F88= FFA5                    1672      dc.w -91
00000F8A= FFA1                    1673      dc.w -95
00000F8C= FF9C                    1674      dc.w -100
00000F8E= FF98                    1675      dc.w -104
00000F90= FF94                    1676      dc.w -108
00000F92= FF90                    1677      dc.w -112
00000F94= FF8C                    1678      dc.w -116
00000F96= FF88                    1679      dc.w -120
00000F98= FF84                    1680      dc.w -124
00000F9A= FF80                    1681      dc.w -128
00000F9C= FF7D                    1682      dc.w -131
00000F9E= FF79                    1683      dc.w -135
00000FA0= FF75                    1684      dc.w -139
00000FA2= FF71                    1685      dc.w -143
00000FA4= FF6E                    1686      dc.w -146
00000FA6= FF6A                    1687      dc.w -150
00000FA8= FF66                    1688      dc.w -154
00000FAA= FF63                    1689      dc.w -157
00000FAC= FF5F                    1690      dc.w -161
00000FAE= FF5C                    1691      dc.w -164
00000FB0= FF59                    1692      dc.w -167
00000FB2= FF55                    1693      dc.w -171
00000FB4= FF52                    1694      dc.w -174
00000FB6= FF4F                    1695      dc.w -177
00000FB8= FF4B                    1696      dc.w -181
00000FBA= FF48                    1697      dc.w -184
00000FBC= FF45                    1698      dc.w -187
00000FBE= FF42                    1699      dc.w -190
00000FC0= FF3F                    1700      dc.w -193
00000FC2= FF3C                    1701      dc.w -196
00000FC4= FF3A                    1702      dc.w -198
00000FC6= FF37                    1703      dc.w -201
00000FC8= FF34                    1704      dc.w -204
00000FCA= FF31                    1705      dc.w -207
00000FCC= FF2F                    1706      dc.w -209
00000FCE= FF2C                    1707      dc.w -212
00000FD0= FF2A                    1708      dc.w -214
00000FD2= FF27                    1709      dc.w -217
00000FD4= FF25                    1710      dc.w -219
00000FD6= FF23                    1711      dc.w -221
00000FD8= FF21                    1712      dc.w -223
00000FDA= FF1E                    1713      dc.w -226
00000FDC= FF1C                    1714      dc.w -228
00000FDE= FF1A                    1715      dc.w -230
00000FE0= FF18                    1716      dc.w -232
00000FE2= FF17                    1717      dc.w -233
00000FE4= FF15                    1718      dc.w -235
00000FE6= FF13                    1719      dc.w -237
00000FE8= FF12                    1720      dc.w -238
00000FEA= FF10                    1721      dc.w -240
00000FEC= FF0E                    1722      dc.w -242
00000FEE= FF0D                    1723      dc.w -243
00000FF0= FF0C                    1724      dc.w -244
00000FF2= FF0A                    1725      dc.w -246
00000FF4= FF09                    1726      dc.w -247
00000FF6= FF08                    1727      dc.w -248
00000FF8= FF07                    1728      dc.w -249
00000FFA= FF06                    1729      dc.w -250
00000FFC= FF05                    1730      dc.w -251
00000FFE= FF04                    1731      dc.w -252
00001000= FF04                    1732      dc.w -252
00001002= FF03                    1733      dc.w -253
00001004= FF02                    1734      dc.w -254
00001006= FF02                    1735      dc.w -254
00001008= FF01                    1736      dc.w -255
0000100A= FF01                    1737      dc.w -255
0000100C= FF01                    1738      dc.w -255
0000100E= FF01                    1739      dc.w -255
00001010= FF01                    1740      dc.w -255
00001012= FF01                    1741      dc.w -255
00001014= FF01                    1742      dc.w -255
00001016= FF01                    1743      dc.w -255
00001018= FF01                    1744      dc.w -255
0000101A= FF01                    1745      dc.w -255
0000101C= FF01                    1746      dc.w -255
0000101E= FF02                    1747      dc.w -254
00001020= FF02                    1748      dc.w -254
00001022= FF03                    1749      dc.w -253
00001024= FF04                    1750      dc.w -252
00001026= FF04                    1751      dc.w -252
00001028= FF05                    1752      dc.w -251
0000102A= FF06                    1753      dc.w -250
0000102C= FF07                    1754      dc.w -249
0000102E= FF08                    1755      dc.w -248
00001030= FF09                    1756      dc.w -247
00001032= FF0A                    1757      dc.w -246
00001034= FF0C                    1758      dc.w -244
00001036= FF0D                    1759      dc.w -243
00001038= FF0E                    1760      dc.w -242
0000103A= FF10                    1761      dc.w -240
0000103C= FF12                    1762      dc.w -238
0000103E= FF13                    1763      dc.w -237
00001040= FF15                    1764      dc.w -235
00001042= FF17                    1765      dc.w -233
00001044= FF18                    1766      dc.w -232
00001046= FF1A                    1767      dc.w -230
00001048= FF1C                    1768      dc.w -228
0000104A= FF1E                    1769      dc.w -226
0000104C= FF21                    1770      dc.w -223
0000104E= FF23                    1771      dc.w -221
00001050= FF25                    1772      dc.w -219
00001052= FF27                    1773      dc.w -217
00001054= FF2A                    1774      dc.w -214
00001056= FF2C                    1775      dc.w -212
00001058= FF2F                    1776      dc.w -209
0000105A= FF31                    1777      dc.w -207
0000105C= FF34                    1778      dc.w -204
0000105E= FF37                    1779      dc.w -201
00001060= FF3A                    1780      dc.w -198
00001062= FF3C                    1781      dc.w -196
00001064= FF3F                    1782      dc.w -193
00001066= FF42                    1783      dc.w -190
00001068= FF45                    1784      dc.w -187
0000106A= FF48                    1785      dc.w -184
0000106C= FF4B                    1786      dc.w -181
0000106E= FF4F                    1787      dc.w -177
00001070= FF52                    1788      dc.w -174
00001072= FF55                    1789      dc.w -171
00001074= FF59                    1790      dc.w -167
00001076= FF5C                    1791      dc.w -164
00001078= FF5F                    1792      dc.w -161
0000107A= FF63                    1793      dc.w -157
0000107C= FF66                    1794      dc.w -154
0000107E= FF6A                    1795      dc.w -150
00001080= FF6E                    1796      dc.w -146
00001082= FF71                    1797      dc.w -143
00001084= FF75                    1798      dc.w -139
00001086= FF79                    1799      dc.w -135
00001088= FF7D                    1800      dc.w -131
0000108A= FF81                    1801      dc.w -127
0000108C= FF84                    1802      dc.w -124
0000108E= FF88                    1803      dc.w -120
00001090= FF8C                    1804      dc.w -116
00001092= FF90                    1805      dc.w -112
00001094= FF94                    1806      dc.w -108
00001096= FF98                    1807      dc.w -104
00001098= FF9C                    1808      dc.w -100
0000109A= FFA1                    1809      dc.w -95
0000109C= FFA5                    1810      dc.w -91
0000109E= FFA9                    1811      dc.w -87
000010A0= FFAD                    1812      dc.w -83
000010A2= FFB1                    1813      dc.w -79
000010A4= FFB6                    1814      dc.w -74
000010A6= FFBA                    1815      dc.w -70
000010A8= FFBE                    1816      dc.w -66
000010AA= FFC3                    1817      dc.w -61
000010AC= FFC7                    1818      dc.w -57
000010AE= FFCB                    1819      dc.w -53
000010B0= FFD0                    1820      dc.w -48
000010B2= FFD4                    1821      dc.w -44
000010B4= FFD8                    1822      dc.w -40
000010B6= FFDD                    1823      dc.w -35
000010B8= FFE1                    1824      dc.w -31
000010BA= FFE6                    1825      dc.w -26
000010BC= FFEA                    1826      dc.w -22
000010BE= FFEF                    1827      dc.w -17
000010C0= FFF3                    1828      dc.w -13
000010C2= FFF8                    1829      dc.w -8
000010C4= FFFC                    1830      dc.w -4
000010C6= 0000                    1831      dc.w 0
000010C8= 0004                    1832      dc.w 4
000010CA= 0008                    1833      dc.w 8
000010CC= 000D                    1834      dc.w 13
000010CE= 0011                    1835      dc.w 17
000010D0= 0016                    1836      dc.w 22
000010D2= 001A                    1837      dc.w 26
000010D4= 001F                    1838      dc.w 31
000010D6= 0023                    1839      dc.w 35
000010D8= 0028                    1840      dc.w 40
000010DA= 002C                    1841      dc.w 44
000010DC= 0030                    1842      dc.w 48
000010DE= 0035                    1843      dc.w 53
000010E0= 0039                    1844      dc.w 57
000010E2= 003D                    1845      dc.w 61
000010E4= 0042                    1846      dc.w 66
000010E6= 0046                    1847      dc.w 70
000010E8= 004A                    1848      dc.w 74
000010EA= 004F                    1849      dc.w 79
000010EC= 0053                    1850      dc.w 83
000010EE= 0057                    1851      dc.w 87
000010F0= 005B                    1852      dc.w 91
000010F2= 005F                    1853      dc.w 95
000010F4= 0064                    1854      dc.w 100
000010F6= 0068                    1855      dc.w 104
000010F8= 006C                    1856      dc.w 108
000010FA= 0070                    1857      dc.w 112
000010FC= 0074                    1858      dc.w 116
000010FE= 0078                    1859      dc.w 120
00001100= 007C                    1860      dc.w 124
00001102= 0080                    1861      dc.w 128
00001104= 0083                    1862      dc.w 131
00001106= 0087                    1863      dc.w 135
00001108= 008B                    1864      dc.w 139
0000110A= 008F                    1865      dc.w 143
0000110C= 0092                    1866      dc.w 146
0000110E= 0096                    1867      dc.w 150
00001110= 009A                    1868      dc.w 154
00001112= 009D                    1869      dc.w 157
00001114= 00A1                    1870      dc.w 161
00001116= 00A4                    1871      dc.w 164
00001118= 00A7                    1872      dc.w 167
0000111A= 00AB                    1873      dc.w 171
0000111C= 00AE                    1874      dc.w 174
0000111E= 00B1                    1875      dc.w 177
00001120= 00B5                    1876      dc.w 181
00001122= 00B8                    1877      dc.w 184
00001124= 00BB                    1878      dc.w 187
00001126= 00BE                    1879      dc.w 190
00001128= 00C1                    1880      dc.w 193
0000112A= 00C4                    1881      dc.w 196
0000112C= 00C6                    1882      dc.w 198
0000112E= 00C9                    1883      dc.w 201
00001130= 00CC                    1884      dc.w 204
00001132= 00CF                    1885      dc.w 207
00001134= 00D1                    1886      dc.w 209
00001136= 00D4                    1887      dc.w 212
00001138= 00D6                    1888      dc.w 214
0000113A= 00D9                    1889      dc.w 217
0000113C= 00DB                    1890      dc.w 219
0000113E= 00DD                    1891      dc.w 221
00001140= 00DF                    1892      dc.w 223
00001142= 00E2                    1893      dc.w 226
00001144= 00E4                    1894      dc.w 228
00001146= 00E6                    1895      dc.w 230
00001148= 00E8                    1896      dc.w 232
0000114A= 00E9                    1897      dc.w 233
0000114C= 00EB                    1898      dc.w 235
0000114E= 00ED                    1899      dc.w 237
00001150= 00EE                    1900      dc.w 238
00001152= 00F0                    1901      dc.w 240
00001154= 00F2                    1902      dc.w 242
00001156= 00F3                    1903      dc.w 243
00001158= 00F4                    1904      dc.w 244
0000115A= 00F6                    1905      dc.w 246
0000115C= 00F7                    1906      dc.w 247
0000115E= 00F8                    1907      dc.w 248
00001160= 00F9                    1908      dc.w 249
00001162= 00FA                    1909      dc.w 250
00001164= 00FB                    1910      dc.w 251
00001166= 00FC                    1911      dc.w 252
00001168= 00FC                    1912      dc.w 252
0000116A= 00FD                    1913      dc.w 253
0000116C= 00FE                    1914      dc.w 254
0000116E= 00FE                    1915      dc.w 254
00001170= 00FF                    1916      dc.w 255
00001172= 00FF                    1917      dc.w 255
00001174= 00FF                    1918      dc.w 255
00001176= 00FF                    1919      dc.w 255
00001178= 00FF                    1920      dc.w 255
0000117A                          1921  
0000117A                          1922  SqrtTable:
0000117A= 0000                    1923      dc.w 0 ;0
0000117C= 0100                    1924      dc.w 256 ;1
0000117E= 016A                    1925      dc.w 362 ;2
00001180= 01BB                    1926      dc.w 443 ;3
00001182= 0200                    1927      dc.w 512 ;4
00001184= 023C                    1928      dc.w 572 ;5
00001186= 0273                    1929      dc.w 627 ;6
00001188= 02A5                    1930      dc.w 677 ;7
0000118A= 02D4                    1931      dc.w 724 ;8
0000118C= 0300                    1932      dc.w 768 ;9
0000118E= 0329                    1933      dc.w 809 ;10
00001190= 0351                    1934      dc.w 849 ;11
00001192= 0376                    1935      dc.w 886 ;12
00001194= 039B                    1936      dc.w 923 ;13
00001196= 03BD                    1937      dc.w 957 ;14
00001198= 03DF                    1938      dc.w 991 ;15
0000119A= 0400                    1939      dc.w 1024 ;16
0000119C= 041F                    1940      dc.w 1055 ;17
0000119E= 043E                    1941      dc.w 1086 ;18
000011A0= 045B                    1942      dc.w 1115 ;19
000011A2= 0478                    1943      dc.w 1144 ;20
000011A4= 0495                    1944      dc.w 1173 ;21
000011A6= 04B0                    1945      dc.w 1200 ;22
000011A8= 04CB                    1946      dc.w 1227 ;23
000011AA= 04E6                    1947      dc.w 1254 ;24
000011AC= 0500                    1948      dc.w 1280 ;25
000011AE= 0519                    1949      dc.w 1305 ;26
000011B0= 0532                    1950      dc.w 1330 ;27
000011B2= 054A                    1951      dc.w 1354 ;28
000011B4= 0562                    1952      dc.w 1378 ;29
000011B6= 057A                    1953      dc.w 1402 ;30
000011B8= 0591                    1954      dc.w 1425 ;31
000011BA= 05A8                    1955      dc.w 1448 ;32
000011BC= 05BE                    1956      dc.w 1470 ;33
000011BE= 05D4                    1957      dc.w 1492 ;34
000011C0= 05EA                    1958      dc.w 1514 ;35
000011C2= 0600                    1959      dc.w 1536 ;36
000011C4= 0615                    1960      dc.w 1557 ;37
000011C6= 062A                    1961      dc.w 1578 ;38
000011C8= 063E                    1962      dc.w 1598 ;39
000011CA= 0653                    1963      dc.w 1619 ;40
000011CC= 0667                    1964      dc.w 1639 ;41
000011CE= 067B                    1965      dc.w 1659 ;42
000011D0= 068E                    1966      dc.w 1678 ;43
000011D2= 06A2                    1967      dc.w 1698 ;44
000011D4= 06B5                    1968      dc.w 1717 ;45
000011D6= 06C8                    1969      dc.w 1736 ;46
000011D8= 06DB                    1970      dc.w 1755 ;47
000011DA= 06ED                    1971      dc.w 1773 ;48
000011DC= 0700                    1972      dc.w 1792 ;49
000011DE= 0712                    1973      dc.w 1810 ;50
000011E0= 0724                    1974      dc.w 1828 ;51
000011E2= 0736                    1975      dc.w 1846 ;52
000011E4= 0747                    1976      dc.w 1863 ;53
000011E6= 0759                    1977      dc.w 1881 ;54
000011E8= 076A                    1978      dc.w 1898 ;55
000011EA= 077B                    1979      dc.w 1915 ;56
000011EC= 078C                    1980      dc.w 1932 ;57
000011EE= 079D                    1981      dc.w 1949 ;58
000011F0= 07AE                    1982      dc.w 1966 ;59
000011F2= 07BE                    1983      dc.w 1982 ;60
000011F4= 07CF                    1984      dc.w 1999 ;61
000011F6= 07DF                    1985      dc.w 2015 ;62
000011F8= 07EF                    1986      dc.w 2031 ;63
000011FA= 0800                    1987      dc.w 2048 ;64
000011FC= 080F                    1988      dc.w 2063 ;65
000011FE= 081F                    1989      dc.w 2079 ;66
00001200= 082F                    1990      dc.w 2095 ;67
00001202= 083F                    1991      dc.w 2111 ;68
00001204= 084E                    1992      dc.w 2126 ;69
00001206= 085D                    1993      dc.w 2141 ;70
00001208= 086D                    1994      dc.w 2157 ;71
0000120A= 087C                    1995      dc.w 2172 ;72
0000120C= 088B                    1996      dc.w 2187 ;73
0000120E= 089A                    1997      dc.w 2202 ;74
00001210= 08A9                    1998      dc.w 2217 ;75
00001212= 08B7                    1999      dc.w 2231 ;76
00001214= 08C6                    2000      dc.w 2246 ;77
00001216= 08D4                    2001      dc.w 2260 ;78
00001218= 08E3                    2002      dc.w 2275 ;79
0000121A= 08F1                    2003      dc.w 2289 ;80
0000121C= 0900                    2004      dc.w 2304 ;81
0000121E= 090E                    2005      dc.w 2318 ;82
00001220= 091C                    2006      dc.w 2332 ;83
00001222= 092A                    2007      dc.w 2346 ;84
00001224= 0938                    2008      dc.w 2360 ;85
00001226= 0946                    2009      dc.w 2374 ;86
00001228= 0953                    2010      dc.w 2387 ;87
0000122A= 0961                    2011      dc.w 2401 ;88
0000122C= 096F                    2012      dc.w 2415 ;89
0000122E= 097C                    2013      dc.w 2428 ;90
00001230= 098A                    2014      dc.w 2442 ;91
00001232= 0997                    2015      dc.w 2455 ;92
00001234= 09A4                    2016      dc.w 2468 ;93
00001236= 09B2                    2017      dc.w 2482 ;94
00001238= 09BF                    2018      dc.w 2495 ;95
0000123A= 09CC                    2019      dc.w 2508 ;96
0000123C= 09D9                    2020      dc.w 2521 ;97
0000123E= 09E6                    2021      dc.w 2534 ;98
00001240= 09F3                    2022      dc.w 2547 ;99
00001242= 0A00                    2023      dc.w 2560 ;100
00001244= 0A0C                    2024      dc.w 2572 ;101
00001246= 0A19                    2025      dc.w 2585 ;102
00001248= 0A26                    2026      dc.w 2598 ;103
0000124A= 0A32                    2027      dc.w 2610 ;104
0000124C= 0A3F                    2028      dc.w 2623 ;105
0000124E= 0A4B                    2029      dc.w 2635 ;106
00001250= 0A58                    2030      dc.w 2648 ;107
00001252= 0A64                    2031      dc.w 2660 ;108
00001254= 0A70                    2032      dc.w 2672 ;109
00001256= 0A7C                    2033      dc.w 2684 ;110
00001258= 0A89                    2034      dc.w 2697 ;111
0000125A= 0A95                    2035      dc.w 2709 ;112
0000125C= 0AA1                    2036      dc.w 2721 ;113
0000125E= 0AAD                    2037      dc.w 2733 ;114
00001260= 0AB9                    2038      dc.w 2745 ;115
00001262= 0AC5                    2039      dc.w 2757 ;116
00001264= 0AD1                    2040      dc.w 2769 ;117
00001266= 0ADC                    2041      dc.w 2780 ;118
00001268= 0AE8                    2042      dc.w 2792 ;119
0000126A= 0AF4                    2043      dc.w 2804 ;120
0000126C= 0B00                    2044      dc.w 2816 ;121
0000126E= 0B0B                    2045      dc.w 2827 ;122
00001270= 0B17                    2046      dc.w 2839 ;123
00001272= 0B22                    2047      dc.w 2850 ;124
00001274= 0B2E                    2048      dc.w 2862 ;125
00001276= 0B39                    2049      dc.w 2873 ;126
00001278= 0B44                    2050      dc.w 2884 ;127
0000127A= 0B50                    2051      dc.w 2896 ;128
0000127C= 0B5B                    2052      dc.w 2907 ;129
0000127C= 0B5B                    2053  -------------------- end include --------------------
0000127E                          2054      INCLUDE "source/ball.asm"
0000127E                          2055  ; ++++++ STRUCT ++++++
0000127E                          2056  ; Ball 
0000127E                          2057  ;
0000127E                          2058  ; size  = 32 bytes 
0000127E                          2059  ; 
0000127E                          2060  ; 0(Ball)  = x position (24.8)
0000127E                          2061  ; 4(Ball)  = y position (24.8)
0000127E                          2062  ; 8(Ball)  = width (24.8)
0000127E                          2063  ; 12(Ball) = height (24.8)
0000127E                          2064  ; 16(Ball) = x velocity (24.8)
0000127E                          2065  ; 20(Ball) = y velocity (24.8)
0000127E                          2066  ; ++++++++++++++++++++
0000127E  =00000000               2067  M_BALL_RECT   EQU 0 
0000127E  =00000000               2068  M_BALL_X      EQU 0 
0000127E  =00000004               2069  M_BALL_Y      EQU 4 
0000127E  =00000008               2070  M_BALL_WIDTH  EQU 8 
0000127E  =0000000C               2071  M_BALL_HEIGHT EQU 12 
0000127E  =00000010               2072  M_BALL_XVEL   EQU 16 
0000127E  =00000014               2073  M_BALL_YVEL   EQU 20 
0000127E                          2074  
0000127E                          2075  ; ------ SUBROUTINE ------
0000127E                          2076  ; Ball_Init
0000127E                          2077  ;
0000127E                          2078  ; Initializes a ball struct with standard 
0000127E                          2079  ; starting values
0000127E                          2080  ; 
0000127E                          2081  ; Input:
0000127E                          2082  ;   a0.l = pointer to ball struct 
0000127E                          2083  ; ------------------------  
0000127E                          2084  Ball_Init:
0000127E  217C 00000000 0000      2085      move.l #0, M_BALL_X(a0)
00001286  217C 00000000 0004      2086      move.l #0, M_BALL_Y(a0)
0000128E  217C 00000800 0008      2087      move.l #BALL_WIDTH, M_BALL_WIDTH(a0)
00001296  217C 00000800 000C      2088      move.l #BALL_HEIGHT, M_BALL_HEIGHT(a0)
0000129E  217C 00000000 0010      2089      move.l #0, M_BALL_XVEL(a0)
000012A6  217C 00000000 0014      2090      move.l #0, M_BALL_YVEL(a0)
000012AE  4E75                    2091      rts 
000012B0                          2092  
000012B0                          2093  ; ------ SUBROUTINE ------
000012B0                          2094  ; Ball_Update
000012B0                          2095  ;
000012B0                          2096  ; Applies gravity to the ball. Updates the position
000012B0                          2097  ; of the ball. And handles conflicts with any pegs.
000012B0                          2098  ; 
000012B0                          2099  ; Input:
000012B0                          2100  ;   a0.l = pointer to ball struct 
000012B0                          2101  ; ------------------------  
000012B0                          2102  Ball_Update:
000012B0                          2103  
000012B0  2F08                    2104      move.l a0, -(sp)
000012B2  4EB9 0000136C           2105      jsr Ball_Hide
000012B8  205F                    2106      move.l (sp)+, a0
000012BA                          2107  
000012BA                          2108      ; Apply gravity 
000012BA  2028 0014               2109      move.l M_BALL_YVEL(a0), d0 
000012BE  7212                    2110      move.l #GRAVITY, d1 
000012C0  D081                    2111      add.l d1, d0 
000012C2  2140 0014               2112      move.l d0, M_BALL_YVEL(a0)
000012C6                          2113      
000012C6                          2114      ; Update the position of ball
000012C6  2028 0010               2115      move.l M_BALL_XVEL(a0), d0 
000012CA  2228 0000               2116      move.l M_BALL_X(a0), d1 
000012CE  D280                    2117      add.l d0, d1 
000012D0  2141 0000               2118      move.l d1, M_BALL_X(a0)
000012D4                          2119      
000012D4  2028 0014               2120      move.l M_BALL_YVEL(a0), d0 
000012D8  2228 0004               2121      move.l M_BALL_Y(a0), d1 
000012DC  D280                    2122      add.l d0, d1 
000012DE  2141 0004               2123      move.l d1, M_BALL_Y(a0)
000012E2                          2124      
000012E2                          2125      ; Check if ball goes past left or right bounds 
000012E2  2028 0000               2126      move.l M_BALL_X(a0), d0 
000012E6  0C80 00000000           2127      cmpi.l #LEFT_BOUND, d0 
000012EC  6D00 0012               2128      blt .bounce_left
000012F0  0C80 00013800           2129      cmpi.l #RIGHT_BOUND, d0 
000012F6  6E00 0016               2130      bgt .bounce_right
000012FA  4EF9 00001320           2131      jmp .check_hit_top 
00001300                          2132      
00001300                          2133  .bounce_left
00001300  217C 00000000 0000      2134      move.l #LEFT_BOUND, M_BALL_X(a0)
00001308  4EF9 00001316           2135      jmp .reverse_xvel
0000130E                          2136      
0000130E                          2137  .bounce_right 
0000130E  217C 00013800 0000      2138      move.l #RIGHT_BOUND, M_BALL_X(a0)
00001316                          2139  
00001316                          2140  .reverse_xvel
00001316  2028 0010               2141      move.l M_BALL_XVEL(a0), d0 
0000131A  4480                    2142      neg.l d0 
0000131C  2140 0010               2143      move.l d0, M_BALL_XVEL(a0)
00001320                          2144      
00001320                          2145  .check_hit_top
00001320                          2146      ; Check if ball goes past upper bounds 
00001320  2028 0004               2147      move.l M_BALL_Y(a0), d0 
00001324  0C80 00000000           2148      cmpi.l #0, d0 
0000132A  6C00 000E               2149      bge .check_collisions
0000132E                          2150      
0000132E                          2151      ; ball hit the top. Reverse y vel 
0000132E  217C 00000000 0004      2152      move.l #0, M_BALL_Y(a0)
00001336  44A8 0014               2153      neg.l M_BALL_YVEL(a0)
0000133A                          2154      
0000133A                          2155  .check_collisions
0000133A                          2156      ; Lastly, check for any peg collisions 
0000133A  2F08                    2157      move.l a0, -(sp)            ; save a0
0000133C  4EB9 00001394           2158      jsr _Ball_CheckPegCollisions
00001342  205F                    2159      move.l (sp)+, a0              ; restore a0 
00001344                          2160      
00001344                          2161  .update_sprite
00001344                          2162      ; Update sprite 
00001344                          2163      ; don't worry about a0 getting trashed
00001344                          2164      ; as this will be the last step of Update
00001344  4EB9 0000134C           2165      jsr Ball_Draw
0000134A                          2166      
0000134A  4E75                    2167      rts 
0000134C                          2168  
0000134C                          2169  ; ------ SUBROUTINE ------
0000134C                          2170  ; Ball_Draw
0000134C                          2171  ;
0000134C                          2172  ; Draws the ball at location x/y.
0000134C                          2173  ; 
0000134C                          2174  ; Input:
0000134C                          2175  ;   a0.l = pointer to ball struct 
0000134C                          2176  ; ------------------------  
0000134C                          2177  Ball_Draw:
0000134C  7000                    2178      move.l #0, d0             ; param d0: chunk x coordinate
0000134E  7200                    2179      move.l #0, d1             ; param d1: chunk y coordinate 
00001350  7408                    2180      move.l #8, d2            ; param d2: chunk width 
00001352  7608                    2181      move.l #8, d3            ; param d3: chunk height 
00001354  2828 0000               2182      move.l M_BALL_X(a0), d4  ; param d4: screen x coordinate
00001358  E084                    2183      asr.l #8, d4              ; convert from fixed to int 
0000135A  2A28 0004               2184      move.l M_BALL_Y(a0), d5  ; param d5: screen y coordinate 
0000135E  E085                    2185      asr.l #8, d5              ; convert from fixed to int 
00001360  41F9 0000A46A           2186      lea BallBitmap, a0       ; param a0: pointer to bitmap file data
00001366  4EB8 04B4               2187      jsr RenderBitmap16 
0000136A  4E75                    2188      rts 
0000136C                          2189      
0000136C                          2190  Ball_Hide:
0000136C  2028 0000               2191      move.l M_BALL_X(a0), d0  ; param d0: chunk x coordinate
00001370  E080                    2192      asr.l #8, d0              ; convert from fixed to int 
00001372  2228 0004               2193      move.l M_BALL_Y(a0), d1  ; param d1: chunk y coordinate
00001376  E081                    2194      asr.l #8, d1              ; convert from fixed to int     
00001378  7408                    2195      move.l #8, d2            ; param d2: chunk width 
0000137A  7608                    2196      move.l #8, d3            ; param d3: chunk height 
0000137C  2828 0000               2197      move.l M_BALL_X(a0), d4  ; param d4: screen x coordinate
00001380  E084                    2198      asr.l #8, d4              ; convert from fixed to int 
00001382  2A28 0004               2199      move.l M_BALL_Y(a0), d5  ; param d5: screen y coordinate 
00001386  E085                    2200      asr.l #8, d5              ; convert from fixed to int 
00001388  41F9 0000A616           2201      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
0000138E  4EB8 04B4               2202      jsr RenderBitmap16 
00001392  4E75                    2203      rts 
00001394                          2204  
00001394                          2205  ; ------ SUBROUTINE ------
00001394                          2206  ; _Ball_CheckPegCollisions
00001394                          2207  ;
00001394                          2208  ; Private subroutine that iterates through 
00001394                          2209  ; the peg list and checks if the ball is
00001394                          2210  ; overlapping any pegs. Handles collision 
00001394                          2211  ; when ball is overlapping a peg.
00001394                          2212  ;
00001394                          2213  ; Input:
00001394                          2214  ;   a0.l = pointer to ball struct 
00001394                          2215  ; ------------------------      
00001394                          2216  _Ball_CheckPegCollisions:
00001394                          2217      
00001394                          2218  REGS REG a0/a1/d0 
00001394                          2219  
00001394  43F8 0006               2220      lea Pegs, a1            ; get the peg array 
00001398  4280                    2221      clr.l d0                ; d0 = loop counter 
0000139A                          2222      
0000139A                          2223  .loop
0000139A                          2224      
0000139A  1229 0011               2225      move.b M_PEG_ACTIVE(a1), d1 
0000139E  4A01                    2226      tst.b d1
000013A0  6700 00C2               2227      beq .continue           ; continue if peg is inactive 
000013A4                          2228      
000013A4                          2229      ; Otherwise, peg is active. So check if the ball 
000013A4                          2230      ; is hitting it. 
000013A4                          2231      ; save regs 
000013A4  48E7 80C0               2232      movem.l REGS, -(sp) 
000013A8  4EB9 000015A2           2233      jsr Rect_OverlapsRect
000013AE  2200                    2234      move.l d0, d1           ; save result in d1 
000013B0                          2235      ; restore regs 
000013B0  4CDF 0301               2236      movem.l (sp)+, REGS
000013B4                          2237      
000013B4  4A81                    2238      tst.l d1 
000013B6  6700 00AC               2239      beq .continue 
000013BA                          2240      
000013BA                          2241      ; So after a bunch of testing and experimenting, I've decided to 
000013BA                          2242      ; use a very basic collision model where the ball bounces in the 
000013BA                          2243      ; exact same direct as the vector between the ball's position 
000013BA                          2244      ; and the peg's position. 
000013BA                          2245      
000013BA                          2246      ; Calculate the displacement vector (dispVec)
000013BA                          2247      ; The dispVec is the vector difference of the 
000013BA                          2248      ; positions of the ball and peg. The dispVec is 
000013BA                          2249      ; important because it shows what direction the ball 
000013BA                          2250      ; is from the peg.
000013BA  2228 0000               2251      move.l M_BALL_X(a0), d1 
000013BE  2428 0004               2252      move.l M_BALL_Y(a0), d2
000013C2  2629 0000               2253      move.l M_PEG_X(a1), d3 
000013C6  2829 0004               2254      move.l M_PEG_Y(a1), d4 
000013CA                          2255      
000013CA                          2256      ; subtract peg pos from ball pos 
000013CA  9283                    2257      sub.l d3, d1
000013CC  9484                    2258      sub.l d4, d2                ; <d1, d2> is the displacement vector now
000013CE                          2259      
000013CE  2628 0010               2260      move.l M_BALL_XVEL(a0), d3 
000013D2  2828 0014               2261      move.l M_BALL_YVEL(a0), d4  ; <d3, d4> is the velocity vector 
000013D6                          2262      
000013D6                          2263      ; Get the magnitude of the velocity 
000013D6  2A03                    2264      move.l d3, d5 
000013D8  C7C5                    2265      muls d5, d3     ; square the xvel
000013DA  E083                    2266      asr.l #8, d3    ; return to 24.8 format 
000013DC  2A04                    2267      move.l d4, d5 
000013DE  C9C5                    2268      muls d5, d4     ; square the yvel 
000013E0  E084                    2269      asr.l #8, d4    ; return to 24.8 format 
000013E2  D684                    2270      add.l d4, d3    ; add the squares of the x/y components 
000013E4                          2271      
000013E4                          2272      ; clamp the magnitude so it stays within sqrt table 
000013E4  E083                    2273      asr.l #8, d3             ; convert to int 
000013E6  0C83 00000080           2274      cmpi.l #MAX_SQRT_INPUT,d3 
000013EC  6500 0008               2275      blo .no_vel_clamp
000013F0  263C 00000080           2276      move.l #MAX_SQRT_INPUT, d3 
000013F6                          2277  .no_vel_clamp
000013F6  E383                    2278      asl.l #1, d3 
000013F8  47F8 117A               2279      lea SqrtTable, a3 
000013FC  D7C3                    2280      add.l d3, a3 
000013FE  4283                    2281      clr.l d3 
00001400  3613                    2282      move.w (a3), d3   ; d3 = magnitude of velocity 
00001402                          2283      
00001402                          2284      ; Dampen the velocity a tiny bit for some realistic collision 
00001402  283C 000000E0           2285      move.l #DAMPENING_COEFFICIENT, d4 
00001408  C7C4                    2286      muls d4, d3       
0000140A  E083                    2287      asr.l #8, d3        ; d3 = the new speed of the ball
0000140C                          2288      
0000140C                          2289      ; Normalize the displacement vector for performing projection 
0000140C                          2290      ; first step is to get magnitude squared 
0000140C  2A01                    2291      move.l d1, d5 
0000140E  CBC1                    2292      muls d1, d5
00001410  E085                    2293      asr.l #8, d5 
00001412  2C02                    2294      move.l d2, d6
00001414  CDC2                    2295      muls d2, d6 
00001416  E086                    2296      asr.l #8, d6
00001418  DA86                    2297      add.l d6, d5        ; d5 = magnitude squared 
0000141A                          2298      
0000141A                          2299      ; Next step to normalizing is to find the magnitude (sqrt of magnitude squared)
0000141A  E085                    2300      asr.l #8, d5        ; convert mag squared from 24.8 to int 
0000141C  0C85 00000080           2301      cmpi.l #MAX_SQRT_INPUT, d5 
00001422  6500 0008               2302      blo .skip_mag_clamp
00001426  2A3C 00000080           2303      move.l #MAX_SQRT_INPUT, d5  ; clamp if outside of table index range 
0000142C                          2304  .skip_mag_clamp
0000142C  E38D                    2305      lsl.l #1, d5                ; get the index into the sqrt table in bytes 
0000142E  47F8 117A               2306      lea SqrtTable, a3 
00001432  D7C5                    2307      add.l d5, a3 
00001434  4285                    2308      clr.l d5                    ; clear the long because we are about to store a positive word in this reg 
00001436  3A13                    2309      move.w (a3), d5             ; d5 = magnitude 
00001438                          2310      
00001438                          2311      ; Last step of normalizing is to divide dispVec by the magnitude 
00001438  E181                    2312      asl.l #8, d1        ; the divors can be in 16.16 format 
0000143A  E182                    2313      asl.l #8, d2 
0000143C  83C5                    2314      divs d5, d1 
0000143E  85C5                    2315      divs d5, d2 
00001440  48C1                    2316      ext.l d1            ; now d1 should be in 24.8
00001442  48C2                    2317      ext.l d2            ; and d2 should be in 24.8
00001444                          2318      
00001444                          2319      ; <d1, d2> = the normalized displacement vector 
00001444                          2320      ; Now (for basic collision) we can just multiply the dampened velocity 
00001444                          2321      ; with the normalized displacement vector and then set that as the new 
00001444                          2322      ; xvel/yvel of the ball. 
00001444  C3C3                    2323      muls d3, d1
00001446  E081                    2324      asr.l #8, d1 
00001448  C5C3                    2325      muls d3, d2
0000144A  E082                    2326      asr.l #8, d2 
0000144C                          2327      
0000144C  2141 0010               2328      move.l d1, M_BALL_XVEL(a0)
00001450  2142 0014               2329      move.l d2, M_BALL_YVEL(a0)
00001454                          2330      
00001454                          2331      ; Consume the peg! omnom (deactivate it and add to score)
00001454  48E7 80C0               2332      movem.l REGS, -(sp) 
00001458  2049                    2333      move.l a1, a0         ; put peg into a0 for param 
0000145A  4EB9 0000151C           2334      jsr Peg_Consume 
00001460  4CDF 0301               2335      movem.l (sp)+, REGS 
00001464                          2336      
00001464                          2337  .continue
00001464  D3FC 00000020           2338      adda.l #PEG_DATA_SIZE, a1 
0000146A  5280                    2339      addq.l #1, d0 
0000146C  B0B8 041E               2340      cmp.l LevelPegCount, d0 
00001470  6600 FF28               2341      bne .loop 
00001474                          2342      
00001474  4E75                    2343      rts 
00001474  4E75                    2344  -------------------- end include --------------------
00001476                          2345      INCLUDE "source/peg.asm"
00001476                          2346  ; ++++++ STRUCT ++++++
00001476                          2347  ; Peg  
00001476                          2348  ;
00001476                          2349  ; size  = 32 bytes 
00001476                          2350  ; 
00001476                          2351  ; 0(Peg)  = x position (24.8 long)
00001476                          2352  ; 4(Peg)  = y position (24.8 long)
00001476                          2353  ; 8(Peg)  = width (24.8 long)
00001476                          2354  ; 12(Peg) = height (24.8 long)
00001476                          2355  ; 16(Peg) = type (byte)
00001476                          2356  ; 17(Peg) = active (byte)
00001476                          2357  ; 18(Peg) = moving (byte)
00001476                          2358  ; 19(Peg) = sprite index (byte)
00001476                          2359  ; 20(Peg) = left bound (word)
00001476                          2360  ; 22(Peg) = right bound (word)
00001476                          2361  ; ++++++++++++++++++++
00001476  =00000000               2362  M_PEG_RECT         EQU 0 
00001476  =00000000               2363  M_PEG_X            EQU 0 
00001476  =00000004               2364  M_PEG_Y            EQU 4 
00001476  =00000008               2365  M_PEG_WIDTH        EQU 8 
00001476  =0000000C               2366  M_PEG_HEIGHT       EQU 12 
00001476  =00000010               2367  M_PEG_TYPE         EQU 16 
00001476  =00000011               2368  M_PEG_ACTIVE       EQU 17
00001476  =00000012               2369  M_PEG_MOVING       EQU 18 
00001476  =00000013               2370  M_PEG_SPRITE_INDEX EQU 19
00001476  =00000014               2371  M_PEG_LEFT_BOUND   EQU 20 
00001476  =00000016               2372  M_PEG_RIGHT_BOUND  EQU 22 
00001476                          2373  
00001476                          2374  
00001476                          2375  ; ------ SUBROUTINE ------
00001476                          2376  ; Peg_Init
00001476                          2377  ;
00001476                          2378  ; Initializes a peg struct with standard 
00001476                          2379  ; starting values. Defaults active to 0 
00001476                          2380  ; 
00001476                          2381  ; Input:
00001476                          2382  ;   a0.l = pointer to peg struct 
00001476                          2383  ; ------------------------  
00001476                          2384  Peg_Init:
00001476                          2385  
00001476  217C FFFF9400 0000      2386      move.l #PEG_INIT_X, M_PEG_X(a0) 
0000147E  217C FFFF9400 0004      2387      move.l #PEG_INIT_Y, M_PEG_Y(a0)
00001486  217C 00000800 0008      2388      move.l #PEG_WIDTH, M_PEG_WIDTH(a0)
0000148E  217C 00000800 000C      2389      move.l #PEG_HEIGHT, M_PEG_HEIGHT(a0)
00001496                          2390      
00001496  117C 0000 0010          2391      move.b #PEG_TYPE_BLUE, M_PEG_TYPE(a0)
0000149C  117C 0000 0011          2392      move.b #0, M_PEG_ACTIVE(a0)
000014A2  117C 0000 0012          2393      move.b #0, M_PEG_MOVING(a0)
000014A8  117C 0002 0013          2394      move.b #PEGS_SPRITE_INDEX, M_PEG_SPRITE_INDEX(a0)
000014AE                          2395      
000014AE  317C 0000 0014          2396      move.w #0, M_PEG_LEFT_BOUND(a0)
000014B4  317C 0000 0016          2397      move.w #0, M_PEG_RIGHT_BOUND(a0)
000014BA                          2398      
000014BA  4E75                    2399      rts 
000014BC                          2400  
000014BC                          2401  ; ------ SUBROUTINE ------
000014BC                          2402  ; Peg_Draw
000014BC                          2403  ;
000014BC                          2404  ; Draws the peg.
000014BC                          2405  ; 
000014BC                          2406  ; Input:
000014BC                          2407  ;   a0.l = pointer to peg struct 
000014BC                          2408  ; ------------------------      
000014BC                          2409  Peg_Draw:
000014BC                          2410  
000014BC                          2411      ; Example usage of RenderBitmap16
000014BC  7000                    2412      move.l #0, d0             ; param d0: chunk x coordinate
000014BE  7200                    2413      move.l #0, d1             ; param d1: chunk y coordinate 
000014C0  7408                    2414      move.l #8, d2            ; param d2: chunk width 
000014C2  7608                    2415      move.l #8, d3            ; param d3: chunk height 
000014C4  2828 0000               2416      move.l M_PEG_X(a0), d4  ; param d4: screen x coordinate
000014C8  E084                    2417      asr.l #8, d4 
000014CA  2A28 0004               2418      move.l M_PEG_Y(a0), d5  ; param d5: screen y coordinate 
000014CE  E085                    2419      asr.l #8, d5
000014D0  1E28 0010               2420      move.b M_PEG_TYPE(a0), d7
000014D4  0C07 0001               2421      cmpi.b #PEG_TYPE_RED, d7 
000014D8  6600 000E               2422      bne .blue_peg
000014DC  41F9 0000A33E           2423      lea RedPegBitmap, a0 
000014E2  4EF9 000014EE           2424      jmp .render
000014E8                          2425  .blue_peg
000014E8  41F9 0000A3D4           2426      lea BluePegBitmap, a0       ; param a0: pointer to bitmap file data
000014EE                          2427  .render
000014EE  4EB8 04B4               2428      jsr RenderBitmap16 
000014F2                          2429      
000014F2  4E75                    2430      rts 
000014F4                          2431  
000014F4                          2432  ; ------ SUBROUTINE ------
000014F4                          2433  ; Peg_Hide
000014F4                          2434  ;
000014F4                          2435  ; Hides the peg by drawing the 
000014F4                          2436  ; background over the the peg 
000014F4                          2437  ; 
000014F4                          2438  ; Input:
000014F4                          2439  ;   a0.l = pointer to peg struct 
000014F4                          2440  ; ------------------------         
000014F4                          2441  Peg_Hide:
000014F4                          2442  
000014F4                          2443      ; Example usage of RenderBitmap16
000014F4  2028 0000               2444      move.l M_PEG_X(a0), d0  ; param d0: chunk x coordinate
000014F8  E080                    2445      asr.l #8, d0 
000014FA  2228 0004               2446      move.l M_PEG_Y(a0), d1  ; param d1: chunk y coordinate 
000014FE  E081                    2447      asr.l #8, d1 
00001500  7408                    2448      move.l #8, d2            ; param d2: chunk width 
00001502  7608                    2449      move.l #8, d3            ; param d3: chunk height 
00001504  2828 0000               2450      move.l M_PEG_X(a0), d4  ; param d4: screen x coordinate
00001508  E084                    2451      asr.l #8, d4 
0000150A  2A28 0004               2452      move.l M_PEG_Y(a0), d5  ; param d5: screen y coordinate 
0000150E  E085                    2453      asr.l #8, d5 
00001510  41F9 0000A616           2454      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
00001516  4EB8 04B4               2455      jsr RenderBitmap16 
0000151A  4E75                    2456      rts 
0000151C                          2457  
0000151C                          2458  ; ------ SUBROUTINE ------
0000151C                          2459  ; Peg_Consume
0000151C                          2460  ;
0000151C                          2461  ; Deactivates the peg and adds to the score
0000151C                          2462  ; based on RedPegCount
0000151C                          2463  ; 
0000151C                          2464  ; Input:
0000151C                          2465  ;   a0.l = pointer to peg struct 
0000151C                          2466  ; ------------------------  
0000151C                          2467  Peg_Consume:
0000151C                          2468  
0000151C                          2469      ; Now mark the peg as inactive and hide the sprite 
0000151C  117C 0000 0011          2470      move.b #0, M_PEG_ACTIVE(a0)
00001522                          2471      
00001522                          2472      ; Draw background over where this peg was 
00001522  2F08                    2473      move.l a0, -(sp)
00001524  4EB8 14F4               2474      jsr Peg_Hide 
00001528  205F                    2475      move.l (sp)+, a0 
0000152A                          2476      
0000152A                          2477      ; Check if peg was a red peg, if so, dec the 
0000152A                          2478      ; global red peg count 
0000152A  1228 0010               2479      move.b M_PEG_TYPE(a0), d1
0000152E  0C01 0001               2480      cmpi.b #PEG_TYPE_RED, d1 
00001532  6600 0016               2481      bne .blue_peg  
00001536  2238 0432               2482      move.l RedPegCount, d1 
0000153A  5381                    2483      subq.l #1, d1 
0000153C  21C1 0432               2484      move.l d1, RedPegCount      ; reduce the number of red pegs 
00001540                          2485      
00001540                          2486      ; Add red peg score 
00001540  54B8 043A               2487      add.l #RED_PEG_SCORE, Score 
00001544  4EF9 0000157A           2488      jmp .return 
0000154A                          2489      
0000154A                          2490  .blue_peg 
0000154A  2038 0432               2491      move.l RedPegCount, d0
0000154E  0C80 00000002           2492      cmpi.l #LOW_RED, d0 
00001554  6E00 000C               2493      bgt .not_low 
00001558                          2494      
00001558                          2495      ; Only 1 or 2 red pegs left. Add 4 points 
00001558  58B8 043A               2496      addi.l #BLUE_PEG_LOW_SCORE, Score 
0000155C  4EF9 0000157A           2497      jmp .return 
00001562                          2498      
00001562                          2499  .not_low 
00001562  0C80 00000006           2500      cmpi.l #MID_RED, d0 
00001568  6E00 000C               2501      bgt .not_mid 
0000156C  54B8 043A               2502      addi.l #BLUE_PEG_MID_SCORE, Score 
00001570  4EF9 0000157A           2503      jmp .return 
00001576                          2504      
00001576                          2505  .not_mid 
00001576                          2506      ; Okay, so there are still a lot of red pegs on the 
00001576                          2507      ; board. Only reward 1 point.
00001576  52B8 043A               2508      addi.l #BLUE_PEG_HIGH_SCORE, Score 
0000157A                          2509      
0000157A                          2510  .return 
0000157A                          2511      
0000157A  4EB8 0AD6               2512      jsr DrawScore 
0000157E  4E75                    2513      rts 
0000157E  4E75                    2514  -------------------- end include --------------------
00001580                          2515      INCLUDE "source/rect.asm"
00001580                          2516  ; ++++++ STRUCT ++++++
00001580                          2517  ; Rect  
00001580                          2518  ;
00001580                          2519  ; size  = 16 bytes 
00001580                          2520  ; 
00001580                          2521  ; 0(Rect)  = x position (24.8 long)
00001580                          2522  ; 4(Rect)  = y position (24.8 long)
00001580                          2523  ; 8(Rect)  = width (24.8 long)
00001580                          2524  ; 12(Rect) = height (24.8 long)
00001580                          2525  ; ++++++++++++++++++++
00001580  =00000000               2526  M_RECT_X            EQU 0 
00001580  =00000004               2527  M_RECT_Y            EQU 4 
00001580  =00000008               2528  M_RECT_WIDTH        EQU 8 
00001580  =0000000C               2529  M_RECT_HEIGHT       EQU 12 
00001580                          2530  
00001580                          2531  ; ------ SUBROUTINE ------
00001580                          2532  ; Rect_Init
00001580                          2533  ;
00001580                          2534  ; Initializes a rect struct with standard 
00001580                          2535  ; starting values. 
00001580                          2536  ; 
00001580                          2537  ; Input:
00001580                          2538  ;   a0.l = pointer to rect struct 
00001580                          2539  ; ------------------------  
00001580                          2540  Rect_Init:
00001580  217C 00000000 0000      2541      move.l #$0, M_RECT_X(a0)
00001588  217C 00000000 0004      2542      move.l #$0, M_RECT_Y(a0)
00001590  217C 00000100 0008      2543      move.l #(1*TO_FIXED), M_RECT_WIDTH(a0)
00001598  217C 00000100 000C      2544      move.l #(1*TO_FIXED), M_RECT_HEIGHT(a0)
000015A0  4E75                    2545      rts 
000015A2                          2546  
000015A2                          2547  
000015A2                          2548  ; ------ SUBROUTINE ------
000015A2                          2549  ; OverlapsRect
000015A2                          2550  ;
000015A2                          2551  ; Checks if this rect struct overlaps
000015A2                          2552  ; another rect struct 
000015A2                          2553  ; 
000015A2                          2554  ; Input:
000015A2                          2555  ;   a0.l = pointer to this rect 
000015A2                          2556  ;   a1.l = pointer to other rect 
000015A2                          2557  ;
000015A2                          2558  ; Output:
000015A2                          2559  ;   d0.l = 1 if rects are overlapping 
000015A2                          2560  ;          0 otherwise 
000015A2                          2561  ; ------------------------  
000015A2                          2562  Rect_OverlapsRect:
000015A2                          2563  
000015A2                          2564      ; check if this.right < other.left 
000015A2  2028 0000               2565      move.l M_RECT_X(a0), d0 
000015A6  D0A8 0008               2566      add.l M_RECT_WIDTH(a0), d0 
000015AA  B0A9 0000               2567      cmp.l M_RECT_X(a1), d0 
000015AE  6D00 003A               2568      blt .return_false
000015B2                          2569      
000015B2                          2570      ; check if this.left > other.right 
000015B2  2028 0000               2571      move.l M_RECT_X(a0), d0
000015B6  2229 0000               2572      move.l M_RECT_X(a1), d1 
000015BA  D2A9 0008               2573      add.l M_RECT_WIDTH(a1), d1 
000015BE  B081                    2574      cmp.l d1, d0 
000015C0  6E00 0028               2575      bgt .return_false
000015C4                          2576      
000015C4                          2577      ; check if this.bot < other.top 
000015C4  2028 0004               2578      move.l M_RECT_Y(a0), d0 
000015C8  D0A8 000C               2579      add.l M_RECT_HEIGHT(a0), d0 
000015CC  B0A9 0004               2580      cmp.l M_RECT_Y(a1), d0 
000015D0  6D00 0018               2581      blt .return_false
000015D4                          2582      
000015D4                          2583      ; check if this.top > other.bot 
000015D4  2028 0004               2584      move.l M_RECT_Y(a0), d0 
000015D8  2229 0004               2585      move.l M_RECT_Y(a1), d1 
000015DC  D2A9 000C               2586      add.l M_RECT_HEIGHT(a1), d1 
000015E0  B081                    2587      cmp.l d1, d0
000015E2  6E00 0006               2588      bgt .return_false
000015E6                          2589      
000015E6                          2590      ; fall-through to .return_true
000015E6                          2591      
000015E6                          2592  .return_true 
000015E6  7001                    2593      move.l #1, d0 
000015E8  4E75                    2594      rts 
000015EA                          2595  
000015EA                          2596  .return_false 
000015EA  7000                    2597      move.l #0, d0 
000015EC  4E75                    2598      rts
000015EC  4E75                    2599  -------------------- end include --------------------
000015EE                          2600      INCLUDE "source/saver.asm"
000015EE                          2601  ; ++++++ STRUCT ++++++
000015EE                          2602  ; Saver  
000015EE                          2603  ;
000015EE                          2604  ; size  = 32 bytes 
000015EE                          2605  ; 
000015EE                          2606  ; 0(Saver)  = x position (24.8 long)
000015EE                          2607  ; 4(Saver)  = y position (24.8 long)
000015EE                          2608  ; 8(Saver)  = width (24.8 long)
000015EE                          2609  ; 12(Saver) = height (24.8 long)
000015EE                          2610  ; 16(Saver) = x velocity (24.8)
000015EE                          2611  ; ++++++++++++++++++++
000015EE  =00000000               2612  M_SAVER_RECT         EQU 0 
000015EE  =00000000               2613  M_SAVER_X            EQU 0 
000015EE  =00000004               2614  M_SAVER_Y            EQU 4 
000015EE  =00000008               2615  M_SAVER_WIDTH        EQU 8 
000015EE  =0000000C               2616  M_SAVER_HEIGHT       EQU 12 
000015EE  =00000010               2617  M_SAVER_XVEL         EQU 16 
000015EE                          2618  
000015EE                          2619  ; ------ SUBROUTINE ------
000015EE                          2620  ; Saver_Init
000015EE                          2621  ;
000015EE                          2622  ; Initializes a saver struct with 
000015EE                          2623  ; default stating values.
000015EE                          2624  ; 
000015EE                          2625  ; Input:
000015EE                          2626  ;   a0.l = pointer to saver struct 
000015EE                          2627  ; ------------------------  
000015EE                          2628  Saver_Init:
000015EE                          2629  
000015EE  217C 00001400 0000      2630      move.l #SAVER_INIT_X, M_SAVER_X(a0)
000015F6  217C 0000D400 0004      2631      move.l #SAVER_INIT_Y, M_SAVER_Y(a0)
000015FE  217C 00002000 0008      2632      move.l #SAVER_WIDTH, M_SAVER_WIDTH(a0)
00001606  217C 00000800 000C      2633      move.l #SAVER_HEIGHT, M_SAVER_HEIGHT(a0)
0000160E  217C 00000200 0010      2634      move.l #SAVER_XVEL, M_SAVER_XVEL(a0)
00001616                          2635  
00001616  4E75                    2636      rts 
00001618                          2637   
00001618                          2638  ; ------ SUBROUTINE ------
00001618                          2639  ; Saver_Draw
00001618                          2640  ;
00001618                          2641  ; Draws the saver at its current location 
00001618                          2642  ; 
00001618                          2643  ; Input:
00001618                          2644  ;   a0.l = pointer to saver struct 
00001618                          2645  ; ------------------------   
00001618                          2646  Saver_Draw:
00001618                          2647  
00001618                          2648      ; Example usage of RenderBitmap16
00001618  7000                    2649      move.l #0, d0             ; param d0: chunk x coordinate
0000161A  7200                    2650      move.l #0, d1             ; param d1: chunk y coordinate 
0000161C  7420                    2651      move.l #32, d2            ; param d2: chunk width 
0000161E  7610                    2652      move.l #16, d3            ; param d3: chunk height 
00001620  2828 0000               2653      move.l M_SAVER_X(a0), d4  ; param d4: screen x coordinate
00001624  E084                    2654      asr.l #8, d4              ; convert from fixed to int 
00001626  2A28 0004               2655      move.l M_SAVER_Y(a0), d5  ; param d5: screen y coordinate 
0000162A  E085                    2656      asr.l #8, d5              ; convert from fixed to int 
0000162C  41F9 0000A500           2657      lea SaverBitmap, a0       ; param a0: pointer to bitmap file data
00001632  4EB8 04B4               2658      jsr RenderBitmap16 
00001636                          2659      
00001636  4E75                    2660      rts 
00001638                          2661      
00001638                          2662  ; ------ SUBROUTINE ------
00001638                          2663  ; Saver_Hide
00001638                          2664  ;
00001638                          2665  ; Hides the saver at its current location.
00001638                          2666  ; Does this by drawing the background over 
00001638                          2667  ; the the saver.
00001638                          2668  ; 
00001638                          2669  ; Input:
00001638                          2670  ;   a0.l = pointer to saver struct 
00001638                          2671  ; ------------------------   
00001638                          2672  Saver_Hide:
00001638                          2673  
00001638                          2674      ; Example usage of RenderBitmap16
00001638  2028 0000               2675      move.l M_SAVER_X(a0), d0  ; param d0: chunk x coordinate
0000163C  E080                    2676      asr.l #8, d0              ; convert from fixed to int 
0000163E  2228 0004               2677      move.l M_SAVER_Y(a0), d1  ; param d1: chunk y coordinate 
00001642  E081                    2678      asr.l #8, d1              ; convert from fixed to int 
00001644  7420                    2679      move.l #32, d2            ; param d2: chunk width 
00001646  7610                    2680      move.l #16, d3            ; param d3: chunk height 
00001648  2828 0000               2681      move.l M_SAVER_X(a0), d4  ; param d4: screen x coordinate
0000164C  E084                    2682      asr.l #8, d4              ; convert from fixed to int 
0000164E  2A28 0004               2683      move.l M_SAVER_Y(a0), d5  ; param d5: screen y coordinate 
00001652  E085                    2684      asr.l #8, d5              ; convert from fixed to int 
00001654  41F9 0000A616           2685      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
0000165A  4EB8 04B4               2686      jsr RenderBitmap16 
0000165E                          2687      
0000165E  4E75                    2688      rts 
00001660                          2689  
00001660                          2690  
00001660                          2691  ; ------ SUBROUTINE ------
00001660                          2692  ; Saver_Update
00001660                          2693  ;
00001660                          2694  ; Moves the saver based on it's x velocity.
00001660                          2695  ; It the saver hits the edge of the screen then
00001660                          2696  ; its xvelocity will be reversed. If the saver 
00001660                          2697  ; overlaps the ball, then it will set state to 
00001660                          2698  ; STATE_AIM (and thus, not reduce BallCount)
00001660                          2699  ; 
00001660                          2700  ; Input:
00001660                          2701  ;   a0.l = pointer to saver struct 
00001660                          2702  ; ------------------------   
00001660                          2703  Saver_Update
00001660                          2704  
00001660  2F08                    2705      move.l a0, -(sp)
00001662  4EB8 1638               2706      jsr Saver_Hide
00001666  205F                    2707      move.l (sp)+, a0
00001668                          2708      
00001668  2028 0010               2709      move.l M_SAVER_XVEL(a0), d0 
0000166C  2228 0000               2710      move.l M_SAVER_X(a0), d1 
00001670  D280                    2711      add.l d0, d1                ; d1 = updated x position 
00001672                          2712      
00001672  0C81 00000000           2713      cmpi.l #SAVER_LEFT_BOUND, d1 
00001678  6E00 0010               2714      bgt .check_right 
0000167C                          2715      
0000167C                          2716      ; clamp the position to 0 
0000167C  7200                    2717      move.l #SAVER_LEFT_BOUND, d1
0000167E                          2718      ; reverse the direction of velocity 
0000167E  203C 00000200           2719      move.l #(SAVER_XVEL), d0    
00001684                          2720      
00001684  4EF9 000016A0           2721      jmp .update_properties
0000168A                          2722      
0000168A                          2723  .check_right
0000168A                          2724  
0000168A  0C81 00012000           2725      cmpi.l #SAVER_RIGHT_BOUND, d1 
00001690  6D00 000E               2726      blt .update_properties
00001694                          2727      
00001694                          2728      ; clamp the position to 0 
00001694  223C 00012000           2729      move.l #SAVER_RIGHT_BOUND, d1
0000169A                          2730      ; reverse the direction of velocity 
0000169A  203C FFFFFE00           2731      move.l #(-SAVER_XVEL), d0    
000016A0                          2732      ; jmp .update_properties
000016A0                          2733      
000016A0                          2734  .update_properties
000016A0  2140 0010               2735      move.l d0, M_SAVER_XVEL(a0)
000016A4  2141 0000               2736      move.l d1, M_SAVER_X(a0)
000016A8                          2737      
000016A8                          2738      ; Update the sprite to match the x/y pos
000016A8  2F08                    2739      move.l a0, -(sp)
000016AA  4EB8 1618               2740      jsr Saver_Draw
000016AE  205F                    2741      move.l (sp)+, a0 
000016B0                          2742  
000016B0                          2743      ; Lastly, check to see if the ball is overlapping this saver.
000016B0                          2744      ; If so, set state to aim
000016B0  43F8 03C6               2745      lea Ball, a1 
000016B4  4EB8 15A2               2746      jsr Rect_OverlapsRect
000016B8  4A80                    2747      tst.l d0 
000016BA  6700 000A               2748      beq .return 
000016BE                          2749      
000016BE                          2750      ; Change the sate to Aim state to spare a ball.
000016BE  21FC 00000001 040A      2751      move.l #STATE_AIM, GameState
000016C6                          2752      
000016C6                          2753  .return 
000016C6  4E75                    2754      rts
000016C8                          2755      
000016C8                          2756  -------------------- end include --------------------
000016C8                          2757      
000016C8                          2758      ; TILE includes 
000016C8                          2759      ORG (*+1)&-2
000016C8                          2760  TitleBitmap:
000016C8                          2761      INCBIN "bitmaps/title.bmp"
0000A33E                          2762  RedPegBitmap:
0000A33E                          2763      INCBIN "bitmaps/red_peg.bmp"
0000A3D4                          2764  BluePegBitmap:
0000A3D4                          2765      INCBIN "bitmaps/blue_peg.bmp"
0000A46A                          2766  BallBitmap:
0000A46A                          2767      INCBIN "bitmaps/green_peg.bmp"
0000A500                          2768  SaverBitmap:
0000A500                          2769      INCBIN "bitmaps/saver.bmp"
0000A616                          2770  BGBitmap:
0000A616                          2771      INCBIN "bitmaps/background.bmp"
0001328C                          2772  LoseBitmap:
0001328C                          2773      INCBIN "bitmaps/lose.bmp"
00014602                          2774  WinBitmap:
00014602                          2775      INCBIN "bitmaps/win.bmp"
00015678                          2776      
00015678                          2777      ; Level includes 
00015678                          2778      ORG (*+1)&-2 
00015678                          2779      INCLUDE "levels/level0.asm"
00015678                          2780  Level0Data:
00015678= 0000000E                2781      dc.l 14         ; num pegs 
0001567C= 00000001                2782      dc.l 1          ; num red pegs
00015680= 00000006                2783      dc.l 6          ; stating ball count 
00015684= 0008 0050               2784      dc.w 8, 80 
00015688= 0018 0038               2785      dc.w 24, 56 
0001568C= 0030 00A8               2786      dc.w 48, 168 
00015690= 0048 0070               2787      dc.w 72, 112
00015694= 0058 00A8               2788      dc.w 88, 168 
00015698= 0070 0070               2789      dc.w 112, 112 
0001569C= 0088 0048               2790      dc.w 136, 72
000156A0= 00B0 0048               2791      dc.w 176, 72 
000156A4= 00C8 0070               2792      dc.w 200, 112 
000156A8= 00E0 00A8               2793      dc.w 224, 168 
000156AC= 00F0 0070               2794      dc.w 240, 112 
000156B0= 0108 00A8               2795      dc.w 264, 168 
000156B4= 0120 0038               2796      dc.w 288, 56 
000156B8= 0130 0050               2797      dc.w 304, 80
000156BC                          2798      
000156BC                          2799  -------------------- end include --------------------
000156BC                          2800      INCLUDE "levels/level1.asm"
000156BC                          2801  Level1Data:
000156BC= 0000001D                2802      dc.l 29         ; num pegs 
000156C0= 00000008                2803      dc.l 8          ; num red pegs
000156C4= 00000007                2804      dc.l 7          ; stating ball count 
000156C8= 0018 0038               2805      dc.w 24, 56 
000156CC= 0010 0048               2806      dc.w 16, 72 
000156D0= 0008 0058               2807      dc.w 8, 88 
000156D4= 0008 0068               2808      dc.w 8, 104
000156D8= 0010 0078               2809      dc.w 16, 120
000156DC= 0018 0088               2810      dc.w 24, 136
000156E0= 0028 0090               2811      dc.w 40, 144 
000156E4= 0038 0090               2812      dc.w 56, 144 
000156E8= 0048 0090               2813      dc.w 72, 144 
000156EC= 0040 0050               2814      dc.w 64, 80 
000156F0= 0050 0040               2815      dc.w 80, 64 
000156F4= 0060 0050               2816      dc.w 96, 80 
000156F8= 0070 00B0               2817      dc.w 112, 176 
000156FC= 0090 0068               2818      dc.w 144, 104 
00015700= 009C 0078               2819      dc.w 156, 120 
00015704= 00A8 0068               2820      dc.w 168, 104 
00015708= 00D0 00B0               2821      dc.w 208, 176 
0001570C= 00D8 0050               2822      dc.w 216, 80 
00015710= 00E8 0040               2823      dc.w 232, 64 
00015714= 00F8 0050               2824      dc.w 248, 80 
00015718= 00F0 0090               2825      dc.w 240, 144 
0001571C= 0100 0090               2826      dc.w 256, 144 
00015720= 0110 0090               2827      dc.w 272, 144 
00015724= 0120 0088               2828      dc.w 288, 136 
00015728= 0128 0078               2829      dc.w 296, 120 
0001572C= 0130 0068               2830      dc.w 304, 104 
00015730= 0130 0058               2831      dc.w 304, 88 
00015734= 0128 0048               2832      dc.w 296, 72 
00015738= 0120 0038               2833      dc.w 288, 56 
0001573C                          2834      
0001573C                          2835  -------------------- end include --------------------
0001573C                          2836      INCLUDE "levels/levels.asm"    
0001573C                          2837  LevelData:
0001573C= 00015678                2838      dc.l Level0Data 
00015740= 000156BC                2839      dc.l Level1Data 
00015744= 00015678                2840      dc.l Level0Data 
00015748= 000156BC                2841      dc.l Level1Data 
0001574C= 00015678                2842      dc.l Level0Data 
00015750= 000156BC                2843      dc.l Level1Data 
00015754= 00015678                2844      dc.l Level0Data 
00015758= 000156BC                2845      dc.l Level1Data 
00015758= 000156BC                2846  -------------------- end include --------------------
0001575C                          2847      
0001575C                          2848  SegmentsLitTable:
0001575C= 3F                      2849      dc.b $3f
0001575D= 03                      2850      dc.b $03 
0001575E= 6D                      2851      dc.b $6D
0001575F= 67                      2852      dc.b $67
00015760= 53                      2853      dc.b $53 
00015761= 76                      2854      dc.b $76
00015762= 7E                      2855      dc.b $7E
00015763= 23                      2856      dc.b $23 
00015764= 7F                      2857      dc.b $7F 
00015765= 73                      2858      dc.b $73 
00015766                          2859      
00015766                          2860  SegmentsPosTable:
00015766                          2861      ; seg a 
00015766= 0190                    2862      dc.w 400
00015768= 0064                    2863      dc.w 100
0001576A= 0190                    2864      dc.w 400
0001576C= 0096                    2865      dc.w 150
0001576E                          2866  
0001576E                          2867      ; seg b 
0001576E= 0190                    2868      dc.w 400
00015770= 0096                    2869      dc.w 150 
00015772= 0190                    2870      dc.w 400
00015774= 00C8                    2871      dc.w 200 
00015776                          2872  
00015776                          2873      ; seg c 
00015776= 0190                    2874      dc.w 400 
00015778= 00C8                    2875      dc.w 200
0001577A= 0168                    2876      dc.w 360 
0001577C= 00C8                    2877      dc.w 200
0001577E                          2878  
0001577E                          2879      ; seg d 
0001577E= 0168                    2880      dc.w 360
00015780= 00C8                    2881      dc.w 200
00015782= 0168                    2882      dc.w 360 
00015784= 0096                    2883      dc.w 150 
00015786                          2884  
00015786                          2885      ; seg e 
00015786= 0168                    2886      dc.w 360
00015788= 0096                    2887      dc.w 150 
0001578A= 0168                    2888      dc.w 360 
0001578C= 0064                    2889      dc.w 100 
0001578E                          2890  
0001578E                          2891      ; seg f 
0001578E= 0168                    2892      dc.w 360
00015790= 0064                    2893      dc.w 100
00015792= 0190                    2894      dc.w 400
00015794= 0064                    2895      dc.w 100 
00015796                          2896  
00015796                          2897      ; seg g 
00015796= 0168                    2898      dc.w 360
00015798= 0096                    2899      dc.w 150
0001579A= 0190                    2900      dc.w 400
0001579C= 0096                    2901      dc.w 150
0001579E                          2902  
0001579E                          2903      
0001579E                          2904  
0001579E                          2905  EntryPoint:
0001579E                          2906      
0001579E                          2907      ; Set up the stack pointer 
0001579E  2E7C 00000000           2908      move.l #$00000000, sp
000157A4                          2909      
000157A4                          2910      ; Enable the double buffered draw mode 
000157A4  7211                    2911      move.l #DRAW_MODE_DOUBLE_BUFFERED, d1 
000157A6  705C                    2912      move.l #DRAW_MODE_TRAP_CODE, d0 
000157A8  4E4F                    2913      trap #15
000157AA                          2914      
000157AA                          2915      ; Initialize the starting time
000157AA  7008                    2916      move.l #TIME_TRAP_CODE, d0 
000157AC  4E4F                    2917      trap #15 
000157AE  21C1 0446               2918      move.l d1, CurTime
000157B2                          2919      
000157B2  4EB8 071C               2920      jsr LoadStart
000157B6  21FC 00000000 040A      2921      move.l #STATE_START, GameState
000157BE                          2922      
000157BE                          2923  Main_Loop:
000157BE                          2924  
000157BE  4EB9 00015846           2925      jsr WaitForFrame
000157C4                          2926  
000157C4                          2927      ; Swap buffers 
000157C4  705E                    2928      move.l #SWAP_BUFFERS_TRAP_CODE, d0 
000157C6  4E4F                    2929      trap #15 
000157C8                          2930      
000157C8  4EB8 046A               2931      jsr UpdateButtons
000157CC                          2932      
000157CC  2038 040A               2933      move.l GameState, d0 
000157D0  0C80 00000000           2934      cmpi.l #STATE_START, d0 
000157D6  6600 000C               2935      bne .check_aim
000157DA  4EB8 073C               2936      jsr UpdateStart
000157DE  4EF9 000157BE           2937      jmp Main_Loop
000157E4                          2938  
000157E4                          2939  .check_aim
000157E4  0C80 00000001           2940      cmpi.l #STATE_AIM, d0 
000157EA  6600 0012               2941      bne .check_resolve 
000157EE  4EB8 08B2               2942      jsr UpdateAim
000157F2  4EB9 0001585C           2943      jsr DrawSevenSeg
000157F8  4EF9 000157BE           2944      jmp Main_Loop
000157FE                          2945      
000157FE                          2946  .check_resolve
000157FE  0C80 00000002           2947      cmpi.l #STATE_RESOLVE, d0 
00015804  6600 0012               2948      bne .check_lose 
00015808  4EB8 09DC               2949      jsr UpdateResolve 
0001580C  4EB9 0001585C           2950      jsr DrawSevenSeg
00015812  4EF9 000157BE           2951      jmp Main_Loop
00015818                          2952      
00015818                          2953  .check_lose 
00015818  0C80 00000003           2954      cmpi.l #STATE_LOSE, d0 
0001581E  6600 000C               2955      bne .check_win 
00015822  4EB8 0BC0               2956      jsr UpdateLoseWin
00015826  4EF9 000157BE           2957      jmp Main_Loop
0001582C                          2958      
0001582C                          2959  .check_win
0001582C  0C80 00000004           2960      cmpi.l #STATE_WIN, d0 
00015832  6600 000C               2961      bne .error_state 
00015836  4EB8 0BC0               2962      jsr UpdateLoseWin 
0001583A  4EF9 000157BE           2963      jmp Main_Loop
00015840                          2964      
00015840                          2965  .error_state 
00015840                          2966      
00015840  4EF9 000157BE           2967      jmp Main_Loop      ; Hopefully never get to this point 
00015846                          2968      
00015846                          2969      
00015846                          2970      
00015846                          2971  WaitForFrame:
00015846                          2972      
00015846  2238 0446               2973      move.l CurTime, d1 
0001584A  5281                    2974      add.l #FRAME_TIME, d1 
0001584C  2401                    2975      move.l d1, d2 
0001584E                          2976      
0001584E                          2977  .wait_loop
0001584E                          2978      
0001584E                          2979      ; Get the current time 
0001584E  7008                    2980      move.l #TIME_TRAP_CODE, d0 
00015850  4E4F                    2981      trap #15 
00015852                          2982      
00015852  B481                    2983      cmp.l d1, d2 
00015854  6CF8                    2984      bge .wait_loop 
00015856                          2985      
00015856                          2986      ; Reco
00015856  21C1 0446               2987      move.l d1, CurTime 
0001585A                          2988  
0001585A  4E75                    2989      rts 
0001585C                          2990      
0001585C                          2991  
0001585C                          2992  
0001585C                          2993      
0001585C                          2994  DrawSevenSeg:
0001585C                          2995  
0001585C                          2996      ; Clear prev display 
0001585C                          2997      ;move.l #$000000, d1 
0001585C                          2998      ;move.l #PEN_COLOR_TRAP_CODE, d0 
0001585C                          2999      ;trap #15
0001585C                          3000      ;move.l #$000000, d1 
0001585C                          3001      ;move.l #FILL_COLOR_TRAP_CODE, d0 
0001585C                          3002      ;trap #15
0001585C                          3003      
0001585C                          3004  
0001585C                          3005      ; Set pen color to white 
0001585C  223C 00FFFFFF           3006      move.l #$ffffff, d1 
00015862  7050                    3007      move.l #PEN_COLOR_TRAP_CODE, d0 
00015864  4E4F                    3008      trap #15 
00015866                          3009      
00015866  2E38 041A               3010      move.l BallCount, d7
0001586A  7C07                    3011      move.l #7, d6               ; d6 = 7 = times to loop
0001586C  4285                    3012      clr.l d5                    ; d5 holds the offset into seg pos table 
0001586E  41F9 00015766           3013      lea SegmentsPosTable, a0 
00015874                          3014      
00015874                          3015      ; Which leds are being used?
00015874  43F9 0001575C           3016      lea SegmentsLitTable, a1 
0001587A  D3C7                    3017      adda.l d7, a1               ; add the ball count to table to get addr of index we want to render
0001587C  4282                    3018      clr.l d2 
0001587E  1E11                    3019      move.b (a1), d7             ; d7 holds the lit bitfield. We dont need ball count any more.
00015880                          3020      
00015880                          3021  .loop 
00015880  0807 0000               3022      btst.l #0, d7
00015884  6700 0016               3023      beq .continue 
00015888                          3024      
00015888                          3025      ; This bit was 1. So draw a line!
00015888  41F9 00015766           3026      lea SegmentsPosTable, a0 
0001588E  D1C5                    3027      adda.l d5, a0 
00015890  3218                    3028      move.w (a0)+, d1 
00015892  3418                    3029      move.w (a0)+, d2 
00015894  3618                    3030      move.w (a0)+, d3 
00015896  3818                    3031      move.w (a0)+, d4 
00015898                          3032      
00015898  7054                    3033      move.l #DRAW_LINE_TRAP_CODE, d0 
0001589A  4E4F                    3034      trap #15 
0001589C                          3035      
0001589C                          3036  .continue
0001589C                          3037  
0001589C                          3038      ; shift lit bitfield 1 
0001589C  E28F                    3039      lsr.l #1, d7 
0001589E  5085                    3040      addi.l #8, d5       ; move offset into pos table by 8 bytes (4 words)
000158A0  5386                    3041      subq.l #1, d6
000158A2  66DC                    3042      bne .loop 
000158A4                          3043      
000158A4  4E75                    3044      rts 
000158A6                          3045      
000158A6                          3046   
000158A6                          3047      
000158A6                          3048      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AIMANGLE            412
AIM_ANGLE_DELTA     200
AIM_ANGLE_MAX       AF00
AIM_ANGLE_MIN       500
AIM_CENTER_X        9A00
AIM_CENTER_Y        500
AIM_RADIUS          1E00
AIM_START_ANGLE     5A00
BALL                3C6
BALLBITMAP          A46A
BALLCOUNT           41A
BALLS_STRING_X      1
BALLS_STRING_Y      0
BALL_DATA_SIZE      20
BALL_DRAW           134C
BALL_HEIGHT         800
BALL_HIDE           136C
BALL_INIT           127E
BALL_PATTERN        43
BALL_SIZE_SHIFT     5
BALL_SPRITE_INDEX   0
BALL_UPDATE         12B0
BALL_UPDATE:BOUNCE_LEFT  1300
BALL_UPDATE:BOUNCE_RIGHT  130E
BALL_UPDATE:CHECK_COLLISIONS  133A
BALL_UPDATE:CHECK_HIT_TOP  1320
BALL_UPDATE:REVERSE_XVEL  1316
BALL_UPDATE:UPDATE_SPRITE  1344
BALL_WIDTH          800
BGBITMAP            A616
BITMAP_ADDR         6AC
BITMAP_BPP          6F4
BITMAP_BPP_OFFSET   1C
BITMAP_HEADER_SIZE  36
BITMAP_HEIGHT       6EC
BITMAP_HEIGHT_OFFSET  16
BITMAP_PIXEL_ARRAY_OFF_OFFSET  A
BITMAP_WIDTH        6E4
BITMAP_WIDTH_BYTES  708
BITMAP_WIDTH_OFFSET  12
BLUEPEGBITMAP       A3D4
BLUE_PEG_HIGH_SCORE  1
BLUE_PEG_LOW_SCORE  4
BLUE_PEG_MID_SCORE  2
BUTTONSDOWN         406
BUTTON_A            C
BUTTON_B            4
BUTTON_C            5
BUTTON_DOWN         1
BUTTON_LEFT         2
BUTTON_RIGHT        3
BUTTON_START        D
BUTTON_UP           0
CHUNK_HEIGHT        6CC
CHUNK_WIDTH         6C4
CHUNK_X             6B4
CHUNK_Y             6BC
CLEARPEGS           A86
CLIPVIEW            B3A
COLOR_TABLE_ADDR    6F8
COSTABLE            EAA
CURTIME             446
DAMPENING_COEFFICIENT  E0
DRAWBACKGROUND      B18
DRAWBALLCOUNT       B16
DRAWSCORE           AD6
DRAWSEVENSEG        1585C
DRAWSEVENSEG:CONTINUE  1589C
DRAWSEVENSEG:LOOP   15880
DRAW_LINE_TRAP_CODE  54
DRAW_MODE_DOUBLE_BUFFERED  11
DRAW_MODE_TRAP_CODE  5C
DRAW_RECT_TRAP_CODE  57
ENDIANSWAP_L        710
ENDIANSWAP_W        718
ENTRYPOINT          1579E
FALLOUT_Y           E000
FILL_COLOR_TRAP_CODE  51
FRAMECOUNTER        42E
FRAME_TIME          1
GAMESTATE           40A
GRAVITY             12
HIGH_RED            20
IO_TASK_DRAW_PIXEL  52
IO_TASK_PEN_COLOR   50
KEYBOARD_INPUT_TRAP_CODE  13
KEY_LIST            25275A0D
LAUNCH_SPEED        400
LEFT_BOUND          0
LEVEL               416
LEVEL0DATA          15678
LEVEL1DATA          156BC
LEVELBALLCOUNT      426
LEVELDATA           1573C
LEVELPEGCOUNT       41E
LEVELREDPEGCOUNT    422
LEVEL_BALL_COUNT_OFFSET  8
LEVEL_PEGS_OFFSET   C
LEVEL_PEG_COUNT_OFFSET  0
LEVEL_RED_PEG_COUNT_OFFSET  4
LOADGAME            77A
LOADLEVEL           7AC
LOADLEVEL:FIND_BLUE_LOOP  870
LOADLEVEL:FOUND_BLUE  892
LOADLEVEL:LOAD_PEGS  7D0
LOADLEVEL:PEG_LOOP  80E
LOADLEVEL:RED_PEG_LOOP  852
LOADLEVEL:SET_RED_PEGS  84A
LOADLOSE            B78
LOADSTART           71C
LOADWIN             B9C
LOSEBITMAP          1328C
LOSE_HEIGHT         12C
LOSE_WIDTH          12C
LOSE_X              91
LOSE_Y              64
LOW_RED             2
LVARS_SIZE          6
LVARS_SIZE:LOOP     A96
LVARS_SIZE:RETURN   AD2
L_COUNTER           4
L_CUR_PEG           0
L_DIGIT1            4
L_DIGIT2            2
L_DIGIT3            0
MAIN_LOOP           157BE
MAIN_LOOP:CHECK_AIM  157E4
MAIN_LOOP:CHECK_LOSE  15818
MAIN_LOOP:CHECK_RESOLVE  157FE
MAIN_LOOP:CHECK_WIN  1582C
MAIN_LOOP:ERROR_STATE  15840
MAX_GENGGLE_SPRITES  20
MAX_PEGS            1E
MAX_SQRT_INPUT      80
MID_RED             6
M_BALL_HEIGHT       C
M_BALL_RECT         0
M_BALL_WIDTH        8
M_BALL_X            0
M_BALL_XVEL         10
M_BALL_Y            4
M_BALL_YVEL         14
M_PEG_ACTIVE        11
M_PEG_HEIGHT        C
M_PEG_LEFT_BOUND    14
M_PEG_MOVING        12
M_PEG_RECT          0
M_PEG_RIGHT_BOUND   16
M_PEG_SPRITE_INDEX  13
M_PEG_TYPE          10
M_PEG_WIDTH         8
M_PEG_X             0
M_PEG_Y             4
M_RECT_HEIGHT       C
M_RECT_WIDTH        8
M_RECT_X            0
M_RECT_Y            4
M_SAVER_HEIGHT      C
M_SAVER_RECT        0
M_SAVER_WIDTH       8
M_SAVER_X           0
M_SAVER_XVEL        10
M_SAVER_Y           4
NUM_LEVELS          8
PEGCOUNT            436
PEGS                6
PEGS_SPRITE_INDEX   2
PEG_CONSUME         151C
PEG_CONSUME:BLUE_PEG  154A
PEG_CONSUME:NOT_LOW  1562
PEG_CONSUME:NOT_MID  1576
PEG_CONSUME:RETURN  157A
PEG_DATA_SIZE       20
PEG_DRAW            14BC
PEG_DRAW:BLUE_PEG   14E8
PEG_DRAW:RENDER     14EE
PEG_HEIGHT          800
PEG_HIDE            14F4
PEG_INIT            1476
PEG_INIT_X          FFFF9400
PEG_INIT_Y          FFFF9400
PEG_PALETTE         1
PEG_SIZE_SHIFT      5
PEG_TYPE_BLUE       0
PEG_TYPE_PURPLE     2
PEG_TYPE_RED        1
PEG_WIDTH           800
PEN_COLOR_TRAP_CODE  50
PIXEL_ARRAY_ADDR    700
PREVDOWN            43E
PREVTIME            442
RANDOM              450
RANDVAL             42A
RAND_ADDER          929
RAND_MULTIPLIER     1A1
RECT_INIT           1580
RECT_OVERLAPSRECT   15A2
RECT_OVERLAPSRECT:RETURN_FALSE  15EA
RECT_OVERLAPSRECT:RETURN_TRUE  15E6
REDPEGBITMAP        A33E
REDPEGCOUNT         432
RED_PEG_SCORE       2
REGS                301
REGS:CONTINUE       1464
REGS:LOOP           139A
REGS:NO_VEL_CLAMP   13F6
REGS:SKIP_MAG_CLAMP  142C
RENDERBITMAP16      4B4
RENDERBITMAP16:CLAMP_CHUNK_H  5B6
RENDERBITMAP16:FLIP_CHUNK_Y  5E0
RENDERBITMAP16:LOOP_END  690
RENDERBITMAP16:LOOP_EVEN  63E
RENDERBITMAP16:LOOP_ODD  668
RENDERBITMAP16:LOOP_START  62E
RENDERBITMAP16:RETURN  6AA
RENDER_X            6D4
RENDER_Y            6DC
REQUIRED_BITS_PER_PIXEL  4
RIGHT_BOUND         13800
SAVER               3E6
SAVERBITMAP         A500
SAVER_DATA_SIZE     20
SAVER_DRAW          1618
SAVER_HEIGHT        800
SAVER_HIDE          1638
SAVER_INIT          15EE
SAVER_INIT_X        1400
SAVER_INIT_Y        D400
SAVER_LEFT_BOUND    0
SAVER_RECT_OFFSET_X  0
SAVER_RECT_OFFSET_Y  8
SAVER_RIGHT_BOUND   12000
SAVER_SIZE_SHIFT    5
SAVER_SPRITE_INDEX  1
SAVER_UPDATE        1660
SAVER_UPDATE:CHECK_RIGHT  168A
SAVER_UPDATE:RETURN  16C6
SAVER_UPDATE:UPDATE_PROPERTIES  16A0
SAVER_WIDTH         2000
SAVER_XVEL          200
SAVE_STRING_X       2
SAVE_STRING_Y       2
SCORE               43A
SCORE_STRING_X      1D
SCORE_STRING_Y      0
SCREEN_HEIGHT       E0
SCREEN_WIDTH        140
SEEDRANDOM          44A
SEGMENTSLITTABLE    1575C
SEGMENTSPOSTABLE    15766
SETRANDSEED         770
SINTABLE            BDA
SPRITE_DISABLE_X    14
SPRITE_DISABLE_Y    14
SQRTTABLE           117A
START               0
STATE_AIM           1
STATE_LOSE          3
STATE_RESOLVE       2
STATE_START         0
STATE_WIN           4
SWAP_BUFFERS_TRAP_CODE  5E
TIME_TRAP_CODE      8
TITLEBITMAP         16C8
TO_FIXED            100
UPDATEAIM           8B2
UPDATEAIM:CHECK_CLAMP_MAX  8F2
UPDATEAIM:CHECK_RIGHT  8CE
UPDATEAIM:CLAMP_AIM_ANGLE  8DC
UPDATEAIM:RETURN    91C
UPDATEAIM:SAVE_AIM_ANGLE  902
UPDATEBUTTONS       46A
UPDATEBUTTONS:CHECK_RIGHT  48A
UPDATEBUTTONS:CHECK_START  4A2
UPDATEBUTTONS:CHECK_Z  496
UPDATEBUTTONS:SAVE_KEYS  4AE
UPDATELOSEWIN       BC0
UPDATELOSEWIN:RETURN  BD8
UPDATERESOLVE       9DC
UPDATERESOLVE:CHECK_FALLOUT  A34
UPDATERESOLVE:LOAD_NEXT_LEVEL  A22
UPDATERESOLVE:RETURN  A7E
UPDATERESOLVE:SET_STATE_AIM  A76
UPDATESTART         73C
UPDATESTART:RETURN  76E
VBLANKFLAG          40E
WAITFORFRAME        15846
WAITFORFRAME:WAIT_LOOP  1584E
WINBITMAP           14602
WIN_HEIGHT          12C
WIN_WIDTH           12C
WIN_X               91
WIN_Y               64
_BALL_CHECKPEGCOLLISIONS  1394
_CHECKLAUNCH        97C
_CHECKLAUNCH:RETURN  9DA
_POSITIONBALL       924
_POSITIONBALL:RETURN  97A
