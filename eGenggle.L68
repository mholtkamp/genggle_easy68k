00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/13/2016 10:43:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : eGenggle
00000000                             3  * Written by : Martin Holtkamp
00000000                             4  * Date       : 10/14/2016
00000000                             5  * Description: A port of the game Genggle from genesis to 
00000000                             6  *              to Easy68k. Use left/right to aim ball and 
00000000                             7  *              press Z to fire the ball. Hit all red pegs 
00000000                             8  *              to clear a level. The fewer red pegs that 
00000000                             9  *              remain, the higher the score of hitting a 
00000000                            10  *              blue peg.
00000000                            11  *-----------------------------------------------------------
00000000                            12  
00000000                            13  START:                  ; first instruction of program
00000000                            14      ORG 0 
00000000  4EF9 000132CA             15      jmp EntryPoint 
00000006                            16      
00000006                            17      ; Consts include 
00000006                            18      INCLUDE "source/constants.asm"
00000006  =25275A0D                 19  KEY_LIST EQU $25275A0D
00000006  =00000013                 20  KEYBOARD_INPUT_TRAP_CODE EQU 19
00000006  =0000005C                 21  DRAW_MODE_TRAP_CODE EQU 92 
00000006  =0000005E                 22  SWAP_BUFFERS_TRAP_CODE EQU 94 
00000006  =00000011                 23  DRAW_MODE_DOUBLE_BUFFERED EQU 17 
00000006  =00000050                 24  PEN_COLOR_TRAP_CODE EQU 80
00000006  =00000051                 25  FILL_COLOR_TRAP_CODE EQU 81 
00000006  =00000057                 26  DRAW_RECT_TRAP_CODE EQU 87
00000006                            27  
00000006  =00000000                 28  BUTTON_UP    EQU $0 
00000006  =00000001                 29  BUTTON_DOWN  EQU $1 
00000006  =00000002                 30  BUTTON_LEFT  EQU $2 
00000006  =00000003                 31  BUTTON_RIGHT EQU $3 
00000006  =0000000C                 32  BUTTON_A     EQU $C
00000006  =00000004                 33  BUTTON_B     EQU $4 
00000006  =00000005                 34  BUTTON_C     EQU $5 
00000006  =0000000D                 35  BUTTON_START EQU $D
00000006                            36  
00000006  =00000100                 37  TO_FIXED EQU 256
00000006                            38  
00000006  =00000140                 39  SCREEN_WIDTH EQU 320
00000006  =000000E0                 40  SCREEN_HEIGHT EQU 224
00000006                            41  
00000006  =000001A1                 42  RAND_MULTIPLIER EQU 417
00000006  =00000929                 43  RAND_ADDER EQU 2345
00000006                            44  
00000006                            45  ; Game consts 
00000006  =00009A00                 46  AIM_CENTER_X EQU 154*TO_FIXED
00000006  =00000500                 47  AIM_CENTER_Y EQU 5*TO_FIXED 
00000006  =00001E00                 48  AIM_RADIUS EQU 30*TO_FIXED 
00000006  =00005A00                 49  AIM_START_ANGLE EQU 90*TO_FIXED
00000006  =00000200                 50  AIM_ANGLE_DELTA EQU 2*TO_FIXED
00000006  =00000500                 51  AIM_ANGLE_MIN EQU 5*TO_FIXED
00000006  =0000AF00                 52  AIM_ANGLE_MAX EQU 175*TO_FIXED
00000006                            53  
00000006  =00000400                 54  LAUNCH_SPEED EQU 4*TO_FIXED 
00000006  =00000012                 55  GRAVITY EQU 18
00000006  =0000E000                 56  FALLOUT_Y EQU 224*TO_FIXED
00000006  =00000000                 57  LEFT_BOUND EQU 0*TO_FIXED
00000006  =00013800                 58  RIGHT_BOUND SET (320*TO_FIXED)-BALL_WIDTH
00000006                            59  
00000006  =00000001                 60  BALLS_STRING_X EQU 1 
00000006  =00000000                 61  BALLS_STRING_Y EQU 0
00000006                            62  
00000006  =0000001D                 63  SCORE_STRING_X EQU 29 
00000006  =00000000                 64  SCORE_STRING_Y EQU 0 
00000006                            65  
00000006  =00000002                 66  SAVE_STRING_X EQU 2 
00000006  =00000002                 67  SAVE_STRING_Y EQU 2 
00000006                            68   
00000006                            69  ; Game states 
00000006  =00000000                 70  STATE_START   EQU 0 
00000006  =00000001                 71  STATE_AIM     EQU 1 
00000006  =00000002                 72  STATE_RESOLVE EQU 2 
00000006  =00000003                 73  STATE_LOSE    EQU 3 
00000006  =00000004                 74  STATE_WIN     EQU 4 
00000006                            75  
00000006                            76  ; Genggle Data sizes 
00000006  =00000020                 77  PEG_DATA_SIZE    EQU 32 
00000006  =00000020                 78  BALL_DATA_SIZE   EQU 32 
00000006  =00000020                 79  SAVER_DATA_SIZE  EQU 32 
00000006                            80  
00000006                            81  ; Shift values for multiplying 
00000006  =00000005                 82  PEG_SIZE_SHIFT   EQU 5 
00000006  =00000005                 83  BALL_SIZE_SHIFT  EQU 5 
00000006  =00000005                 84  SAVER_SIZE_SHIFT EQU 5 
00000006                            85  
00000006                            86  ; Game consts 
00000006  =0000001E                 87  MAX_PEGS EQU 30 
00000006  =00000020                 88  MAX_GENGGLE_SPRITES EQU 32
00000006  =00000014                 89  SPRITE_DISABLE_X EQU 20 
00000006  =00000014                 90  SPRITE_DISABLE_Y EQU 20 
00000006                            91  
00000006  =00000800                 92  BALL_WIDTH EQU 8*TO_FIXED 
00000006  =00000800                 93  BALL_HEIGHT EQU 8*TO_FIXED
00000006  =00000043                 94  BALL_PATTERN EQU 67
00000006                            95  
00000006  =FFFF9400                 96  PEG_INIT_X EQU -108*TO_FIXED
00000006  =FFFF9400                 97  PEG_INIT_Y EQU -108*TO_FIXED
00000006  =00000800                 98  PEG_WIDTH  EQU 8*TO_FIXED
00000006  =00000800                 99  PEG_HEIGHT EQU 8*TO_FIXED
00000006  =00000001                100  PEG_PALETTE EQU 1
00000006                           101  
00000006  =00000000                102  PEG_TYPE_BLUE   EQU 0 
00000006  =00000001                103  PEG_TYPE_RED    EQU 1 
00000006  =00000002                104  PEG_TYPE_PURPLE EQU 2 
00000006                           105  
00000006  =00001400                106  SAVER_INIT_X EQU 20*TO_FIXED 
00000006  =0000D400                107  SAVER_INIT_Y EQU 212*TO_FIXED 
00000006  =00002000                108  SAVER_WIDTH EQU 32*TO_FIXED 
00000006  =00000800                109  SAVER_HEIGHT EQU 8*TO_FIXED
00000006  =00000200                110  SAVER_XVEL EQU 2*TO_FIXED
00000006  =00000000                111  SAVER_RECT_OFFSET_X EQU 0 
00000006  =00000008                112  SAVER_RECT_OFFSET_Y EQU 8 
00000006  =00000000                113  SAVER_LEFT_BOUND EQU 0*TO_FIXED
00000006  =00012000                114  SAVER_RIGHT_BOUND EQU 288*TO_FIXED
00000006                           115  
00000006  =00000000                116  BALL_SPRITE_INDEX  EQU 0 
00000006  =00000001                117  SAVER_SPRITE_INDEX EQU 1 
00000006  =00000002                118  PEGS_SPRITE_INDEX  EQU 2 
00000006                           119  
00000006  =00000008                120  NUM_LEVELS EQU 8 
00000006                           121  
00000006  =00000000                122  LEVEL_PEG_COUNT_OFFSET     EQU 0 
00000006  =00000004                123  LEVEL_RED_PEG_COUNT_OFFSET EQU 4 
00000006  =00000008                124  LEVEL_BALL_COUNT_OFFSET    EQU 8 
00000006  =0000000C                125  LEVEL_PEGS_OFFSET          EQU 12 
00000006                           126  
00000006  =00000080                127  MAX_SQRT_INPUT EQU 128
00000006  =000000E0                128  DAMPENING_COEFFICIENT EQU $e0
00000006                           129  
00000006  =00000002                130  RED_PEG_SCORE EQU 2 
00000006  =00000004                131  BLUE_PEG_LOW_SCORE  EQU 4 
00000006  =00000002                132  BLUE_PEG_MID_SCORE  EQU 2 
00000006  =00000001                133  BLUE_PEG_HIGH_SCORE EQU 1
00000006  =00000002                134  LOW_RED EQU 2 
00000006  =00000006                135  MID_RED EQU 6
00000006  =00000020                136  HIGH_RED EQU 32 
00000006  =00000020                137  -------------------- end include --------------------
00000006                           138      
00000006                           139      ; BSS data  
00000006                           140      INCLUDE "source/bss.asm"
00000006                           141  Pegs:
00000006                           142      ds.b MAX_PEGS*PEG_DATA_SIZE
000003C6                           143      
000003C6                           144  Ball:
000003C6                           145      ds.b BALL_DATA_SIZE
000003E6                           146      
000003E6                           147  Saver:
000003E6                           148      ds.b SAVER_DATA_SIZE 
00000406                           149  
00000406                           150  ; All global variables are assumed to be longs even if not
00000406                           151  ; used as such in the program.
00000406                           152  ButtonsDown:
00000406                           153      ds.l 1  
0000040A                           154  GameState:
0000040A                           155      ds.l 1
0000040E                           156  VblankFlag:
0000040E                           157      ds.l 1
00000412                           158  AimAngle:
00000412                           159      ds.l 1
00000416                           160  Level:
00000416                           161      ds.l 1
0000041A                           162  BallCount:
0000041A                           163      ds.l 1
0000041E                           164  LevelPegCount:
0000041E                           165      ds.l 1
00000422                           166  LevelRedPegCount:
00000422                           167      ds.l 1
00000426                           168  LevelBallCount:
00000426                           169      ds.l 1
0000042A                           170  RandVal:
0000042A                           171      ds.l 1
0000042E                           172  FrameCounter:
0000042E                           173      ds.l 1
00000432                           174  RedPegCount:
00000432                           175      ds.l 1
00000436                           176  PegCount:
00000436                           177      ds.l 1
0000043A                           178  Score:
0000043A                           179      ds.l 1
0000043A                           180  -------------------- end include --------------------
0000043E                           181      
0000043E                           182      ; CODE includes 
0000043E                           183      INCLUDE "source/util.asm"
0000043E  =0000000A                184  BITMAP_PIXEL_ARRAY_OFF_OFFSET EQU 10
0000043E  =00000012                185  BITMAP_WIDTH_OFFSET           EQU 18 
0000043E  =00000016                186  BITMAP_HEIGHT_OFFSET          EQU 22 
0000043E  =0000001C                187  BITMAP_BPP_OFFSET             EQU 28
0000043E  =00000036                188  BITMAP_HEADER_SIZE            EQU 54
0000043E                           189  
0000043E  =00000004                190  REQUIRED_BITS_PER_PIXEL EQU 4 
0000043E                           191   
0000043E  =00000050                192  IO_TASK_PEN_COLOR  EQU 80
0000043E  =00000052                193  IO_TASK_DRAW_PIXEL EQU 82
0000043E                           194  
0000043E                           195  ; ------ SUBROUTINE ------
0000043E                           196  ; SeedRandom
0000043E                           197  ;
0000043E                           198  ; Seeds the random number generator with 
0000043E                           199  ; a given word 
0000043E                           200  ; 
0000043E                           201  ; Input:
0000043E                           202  ;   d0.w = seed 
0000043E                           203  ; ------------------------  
0000043E                           204  SeedRandom:
0000043E  31C0 042A                205      move.w d0, RandVal
00000442  4E75                     206      rts 
00000444                           207      
00000444                           208  ; ------ SUBROUTINE ------
00000444                           209  ; Random
00000444                           210  ;
00000444                           211  ; Returns a byte between
00000444                           212  ; 
00000444                           213  ; Output:
00000444                           214  ;   d0.b = random value (0-255)
00000444                           215  ; ------------------------  
00000444                           216  Random:
00000444                           217      ; Multiply some magic number 
00000444  3038 042A                218      move.w RandVal, d0 
00000448  323C 01A1                219      move.w #RAND_MULTIPLIER, d1 
0000044C  C0C1                     220      mulu d1, d0 
0000044E                           221      
0000044E                           222      ; Add some magic number 
0000044E  0640 0929                223      addi.w #RAND_ADDER, d0 
00000452                           224      
00000452                           225      ; Save this as the new random value
00000452  31C0 042A                226      move.w d0, RandVal
00000456                           227      
00000456                           228      ; d0.b will contain a random number 
00000456                           229      ; but mask away other bytes just for safety 
00000456  0280 000000FF            230      andi.l #$000000ff, d0 
0000045C                           231      
0000045C  4E75                     232      rts 
0000045E                           233  
0000045E                           234  ; ------ SUBROUTINE ------
0000045E                           235  ; UpdateButtons
0000045E                           236  ;
0000045E                           237  ; Grabs the state of buttons from the controller.
0000045E                           238  ; This subroutine places the updated values in the ButtonsDown
0000045E                           239  ; word in BSS memory. Status of an individual button can be
0000045E                           240  ; checked by using btst.w #BUTTON_X, ButtonsDown
0000045E                           241  ; If the bit is set, then that button is down.
0000045E                           242  ; If cleared, then that button is up.
0000045E                           243  ; ------------------------
0000045E                           244  UpdateButtons:
0000045E  4280                     245      clr.l d0 
00000460  223C 25275A0D            246      move.l #KEY_LIST, d1 
00000466  7013                     247      move.l #KEYBOARD_INPUT_TRAP_CODE, d0 
00000468  4E4F                     248      trap #15 
0000046A                           249      
0000046A  74FF                     250      move.l #$ffffffff, d2
0000046C                           251      
0000046C  0801 0018                252      btst.l #24, d1
00000470  6700 0006                253      beq .check_right 
00000474  0882 0002                254      bclr.l #BUTTON_LEFT, d2 
00000478                           255      
00000478                           256  .check_right 
00000478  0801 0010                257      btst.l #16, d1 
0000047C  6700 0006                258      beq .check_z
00000480  0882 0003                259      bclr.l #BUTTON_RIGHT, d2 
00000484                           260      
00000484                           261  .check_z
00000484  0801 0008                262      btst.l #8, d1 
00000488  6700 0006                263      beq .check_start 
0000048C  0882 000C                264      bclr.l #BUTTON_A, d2 
00000490                           265      
00000490                           266  .check_start 
00000490  0801 0000                267      btst.l #0, d1 
00000494  6700 0006                268      beq .save_keys 
00000498  0882 000D                269      bclr.l #BUTTON_START, d2 
0000049C                           270      
0000049C                           271  .save_keys 
0000049C                           272  
0000049C  31C2 0406                273      move.w d2, ButtonsDown
000004A0                           274      
000004A0  4E75                     275      rts 
000004A2                           276      
000004A2                           277      
000004A2                           278  ;------ SUBROUTINE -------
000004A2                           279  ; RenderBitmap16
000004A2                           280  ; Input:
000004A2                           281  ;   a0.l: pointer to bitmap file data 
000004A2                           282  ;   d0.l: bitmap chunk x position
000004A2                           283  ;   d1.l: bitmap chunk y position 
000004A2                           284  ;   d2.l: bitmap chunk width 
000004A2                           285  ;   d3.l: bitmap chunk height 
000004A2                           286  ;   d4.l: render x position 
000004A2                           287  ;   d5.l: render y position 
000004A2                           288  ;-------------------------
000004A2                           289  RenderBitmap16:
000004A2                           290  
000004A2                           291          ; Save subroutine arguments to system memory for recall later 
000004A2  23C8 0000069A            292          move.l a0, bitmap_addr 
000004A8  23C0 000006A2            293          move.l d0, chunk_x 
000004AE  23C1 000006AA            294          move.l d1, chunk_y 
000004B4  23C2 000006B2            295          move.l d2, chunk_width 
000004BA  23C3 000006BA            296          move.l d3, chunk_height 
000004C0  23C4 000006C2            297          move.l d4, render_x
000004C6  23C5 000006CA            298          move.l d5, render_y
000004CC                           299         
000004CC                           300          ; Examine the bitmap file header, and save important addresses/values
000004CC  2028 0012                301          move.l BITMAP_WIDTH_OFFSET(a0), d0 
000004D0  4EB9 000006FE            302          jsr EndianSwap_L
000004D6  23C0 000006D2            303          move.l d0, bitmap_width  
000004DC                           304          
000004DC  2028 0016                305          move.l BITMAP_HEIGHT_OFFSET(a0), d0 
000004E0  4EB9 000006FE            306          jsr EndianSwap_L
000004E6  23C0 000006DA            307          move.l d0, bitmap_height 
000004EC                           308          
000004EC  3028 001C                309          move.w BITMAP_BPP_OFFSET(a0), d0 
000004F0  4EB9 00000706            310          jsr EndianSwap_W 
000004F6  33C0 000006E2            311          move.w d0, bitmap_bpp
000004FC                           312           
000004FC                           313          ; Find the pixel array address based on the offset given in the header
000004FC  2028 000A                314          move.l BITMAP_PIXEL_ARRAY_OFF_OFFSET(a0), d0    ; d0 = offset in bytes from start of file to pixel array
00000500  4EB9 000006FE            315          jsr EndianSwap_L                                ; correct endianness 
00000506  2248                     316          movea.l a0, a1                                  ; a1 = address of the bitmap file 
00000508  D3C0                     317          add.l d0, a1                                    ; a1 = address of the color table 
0000050A  23C9 000006EE            318          move.l a1, pixel_array_addr                     ; store the address in memory 
00000510                           319          
00000510                           320          ; Find the color table address. It immediately follows the header.
00000510  2248                     321          movea.l a0, a1                                  ; a1 = address of bitmap file 
00000512  D3FC 00000036            322          adda.l #BITMAP_HEADER_SIZE, a1                  ; a1 = address of color table 
00000518  23C9 000006E6            323          move.l a1, color_table_addr                     ; store the address in memory
0000051E                           324          
0000051E                           325          ; Examine the bits per pixel word to see if this bmp
0000051E                           326          ; truly is a 16 color paletted bitmap (4bpp).
0000051E  3039 000006E2            327          move.w bitmap_bpp, d0
00000524  0C40 0004                328          cmpi.w #REQUIRED_BITS_PER_PIXEL, d0  ; is this bitmap's bitdepth 4?
00000528  6600 016E                329          bne .return                          ; if not, return and do not attempt to render.
0000052C                           330          
0000052C                           331          ; Determine the number of nibbles to pad row with.
0000052C                           332          ; In the pixel array, the end of each row must be 4-byte aligned
0000052C  2039 000006D2            333          move.l  bitmap_width, d0               ; d0 = bitmap width 
00000532  E288                     334          lsr.l #1, d0                           ; d0 = bitmap width (bytes)
00000534  5680                     335          addq.l #3, d0                          ; add 3 to offset one long if not long aligned 
00000536  0280 FFFFFFFC            336          andi.l #$fffffffc, d0                  ; snap to the long word boundary
0000053C  23C0 000006F6            337          move.l d0, bitmap_width_bytes
00000542                           338          
00000542                           339          ; Check for valid chunk_x
00000542  2039 000006A2            340          move.l chunk_x, d0 
00000548  2239 000006D2            341          move.l bitmap_width, d1 
0000054E  B280                     342          cmp.l d0, d1                    ; is the bitmap width bigger than chunk_x?
00000550  6300 0146                343          bls .return                     ; if so, return. chunk_x is outside of image. nothing to draw. 
00000554                           344          
00000554                           345          ; Check for valid chunk_y
00000554  2039 000006AA            346          move.l chunk_y, d0 
0000055A  2239 000006DA            347          move.l bitmap_height, d1 
00000560  B280                     348          cmp.l d0, d1                    ; is the bitmap height bigger than chunk_y?
00000562  6300 0134                349          bls .return                     ; if so, return. chunk_y is outside of image. nothing to draw.
00000566                           350          
00000566                           351          ; Check for chunk_width = 0
00000566  2039 000006B2            352          move.l chunk_width, d0 
0000056C  6700 012A                353          beq .return 
00000570                           354          
00000570                           355          ; Check for chunk_height = 0 
00000570  2039 000006BA            356          move.l chunk_height, d0 
00000576  6700 0120                357          beq .return 
0000057A                           358          
0000057A                           359          ; Clamp chunk_width if needed.
0000057A  2039 000006A2            360          move.l chunk_x, d0 
00000580  2239 000006B2            361          move.l chunk_width, d1 
00000586  2439 000006D2            362          move.l bitmap_width, d2
0000058C  D081                     363          add.l d1, d0                    ; d0 = rightmost edge of chunk + 1 
0000058E  5380                     364          subq.l #1, d0                   ; d0 - rightmost edge of chunk
00000590  B480                     365          cmp.l d0, d2                    ;  is the bitmap width bigger than the rightmost edge?
00000592  6200 0010                366          bhi .clamp_chunk_h              ; then no need to clamp. go check the chunk height
00000596  2039 000006A2            367          move.l chunk_x, d0 
0000059C  9480                     368          sub.l d0, d2                    ; d2 = bitmap width - chunk x 
0000059E  23C2 000006B2            369          move.l d2, chunk_width          ; save d2 as the new chunk width 
000005A4                           370          
000005A4                           371  .clamp_chunk_h
000005A4  2039 000006AA            372          move.l chunk_y, d0 
000005AA  2239 000006BA            373          move.l chunk_height, d1 
000005B0  2439 000006DA            374          move.l bitmap_height, d2 
000005B6  D081                     375          add.l d1, d0 
000005B8  5380                     376          subq.l #1, d0                   ; d0 = bottom most edge of chunk
000005BA  B480                     377          cmp.l d0, d2                    ; is the bitmap height bigger than the bottom (top) most edge?
000005BC  6200 0010                378          bhi .flip_chunk_y               ; do not clamp if bitmap height is bigger than bottom most edge
000005C0  2039 000006AA            379          move.l chunk_y, d0 
000005C6  9480                     380          sub.l d0, d2                    ; d2 = bitmap height - chunk_y
000005C8  23C2 000006BA            381          move.l d2, chunk_height         ; save the new, clamped chunk height
000005CE                           382  
000005CE                           383  .flip_chunk_y     
000005CE                           384          ; Correct chunk_y because BMP pixel data starts from bottom-left, not top-left
000005CE  2039 000006AA            385          move.l chunk_y, d0 
000005D4  2239 000006DA            386          move.l bitmap_height, d1 
000005DA  9280                     387          sub.l d0, d1 
000005DC  5381                     388          subq.l #1, d1                  ; d1 = the flipped y position in bitmap
000005DE  23C1 000006AA            389          move.l d1, chunk_y             ; save the corrected chunk_y
000005E4                           390          
000005E4                           391          ; Now we have all the information to perform rendering. 
000005E4                           392          ; This loop will begin from the bottom left of the chunk data
000005E4  2C39 000006B2            393          move.l chunk_width, d6          ; d6 = horizontal counter 
000005EA  2E39 000006BA            394          move.l chunk_height, d7         ; d7 = vertical counter 
000005F0  2839 000006C2            395          move.l render_x, d4             ; d4 = x rendering position
000005F6  2A39 000006CA            396          move.l render_y, d5             ; d5 = y rendering position
000005FC                           397          
000005FC  2479 000006EE            398          move.l pixel_array_addr, a2    
00000602  2039 000006A2            399          move.l chunk_x, d0 
00000608  E288                     400          lsr.l #1, d0            ; divide chunk_x by two to get correct byte offset 
0000060A  D5C0                     401          add.l d0, a2            ; offset into the pixel array b chunk_x/2 bytes 
0000060C                           402          
0000060C  2239 000006F6            403          move.l bitmap_width_bytes, d1   ; d1 = width of a row of pixels in bytes
00000612  2039 000006AA            404          move.l chunk_y, d0      ; d0 = chunk_y
00000618  C0C1                     405          mulu.w d1, d0           ; d0 = number of bytes to offset into pixel array, contributed from chunk_y
0000061A  D5C0                     406          add.l d0, a2            ; a2 = address to start reading pixel data from in loop
0000061C                           407          
0000061C                           408  .loop_start 
0000061C  264A                     409          move.l a2, a3           ; a3 = this row's starting address (save it for later)
0000061E  2039 000006A2            410          move.l chunk_x, d0      ; get chunk_x
00000624  0800 0000                411          btst.l #0, d0           ; test least significant bit 
00000628  6600 002C                412          bne .loop_odd           ; if bit 0 is not equal to 0, start row at loop_odd
0000062C                           413                                  ; else fall through to .loop_even 
0000062C                           414          
0000062C                           415  .loop_even
0000062C  4280                     416          clr.l d0                  
0000062E  1012                     417          move.b (a2), d0           ; d0 = byte with two pixels worth of information
00000630  0200 00F0                418          andi.b #$f0, d0           ; mask out bits to leave the first pixel's color index 
00000634  E408                     419          lsr.b #2, d0              ; shift twice to the right to get offset into color table in bytes
00000636                           420                                    ; instead of the andi + lsr, lsr #4 + lsl #2 could be used for same effect
00000636                           421                                    ; essential 4*index to get the offset in bytes into the color table
00000636  2079 000006E6            422          move.l color_table_addr, a0 
0000063C  D1C0                     423          add.l d0, a0              ; a0 = pointer to 4 byte color BGRX 
0000063E                           424          
0000063E  2210                     425          move.l (a0), d1           ; d1 = pixel color, BGRX
00000640  E089                     426          lsr.l #8, d1              ; d1 = pixel color, 0BGR
00000642  7050                     427          move.l #IO_TASK_PEN_COLOR, d0 
00000644  4E4F                     428          trap #15                  ; set system's pen color 
00000646                           429          
00000646  2204                     430          move.l d4, d1             ; d1 = render x
00000648  5284                     431          addq.l #1, d4             ; increment render x 
0000064A  2405                     432          move.l d5, d2             ; d2 = render y 
0000064C  7052                     433          move.l #IO_TASK_DRAW_PIXEL, d0 
0000064E  4E4F                     434          trap #15 
00000650                           435          
00000650  5386                     436          subq.l #1, d6             ; subtract horizontal counter 
00000652  6700 002A                437          beq .loop_end             ; branch if finished with row 
00000656                           438  
00000656                           439  .loop_odd 
00000656  4280                     440          clr.l d0                  
00000658  101A                     441          move.b (a2)+, d0          ; d0 = byte with two pixels worth of information
0000065A  0200 000F                442          andi.b #$0f, d0           ; mask out bits to leave the second pixel's color index 
0000065E  E508                     443          lsl.b #2, d0              ; shift twice to the left to mult by 4 to get color table offset
00000660                           444  
00000660  2079 000006E6            445          move.l color_table_addr, a0 
00000666  D1C0                     446          add.l d0, a0              ; a0 = pointer to 4 byte color BGRX 
00000668                           447          
00000668  2210                     448          move.l (a0), d1           ; d1 = pixel color, BGRX
0000066A  E089                     449          lsr.l #8, d1              ; d1 = pixel color, 0BGR
0000066C  7050                     450          move.l #IO_TASK_PEN_COLOR, d0 
0000066E  4E4F                     451          trap #15                  ; set system's pen color 
00000670                           452          
00000670  2204                     453          move.l d4, d1             ; d1 = render x
00000672  5284                     454          addq.l #1, d4             ; increment render x 
00000674  2405                     455          move.l d5, d2             ; d2 = render y 
00000676  7052                     456          move.l #IO_TASK_DRAW_PIXEL, d0 
00000678  4E4F                     457          trap #15                  ; draw pixel on screen
0000067A                           458          
0000067A  5386                     459          subq.l #1, d6             ; subtract horizontal counter 
0000067C  66AE                     460          bne .loop_even            ; branch back to even if not finished with row 
0000067E                           461  
0000067E                           462  .loop_end      
0000067E  2839 000006C2            463          move.l render_x, d4       ; reset x rendering position 
00000684  2C39 000006B2            464          move.l chunk_width, d6    ; reset horizontal counter 
0000068A  244B                     465          movea.l a3, a2            ; get the address of first pixel for the just-rendered row 
0000068C  95F9 000006F6            466          suba.l bitmap_width_bytes, a2  ; point to the first pixel of the next row 
00000692  5285                     467          addq.l #1, d5             ; move the y rendering position one scanline down 
00000694  5387                     468          subq.l #1, d7             ; decrement the vertical counter by 1 
00000696  6684                     469          bne .loop_start
00000698                           470          
00000698                           471  .return 
00000698  4E75                     472          rts 
0000069A                           473  
0000069A                           474          ORG (*+1)&-2
0000069A                           475  bitmap_addr            ds 4 
000006A2                           476  chunk_x                ds 4
000006AA                           477  chunk_y                ds 4         
000006B2                           478  chunk_width            ds 4 
000006BA                           479  chunk_height           ds 4
000006C2                           480  render_x               ds 4 
000006CA                           481  render_y               ds 4 
000006D2                           482  bitmap_width           ds 4 
000006DA                           483  bitmap_height          ds 4 
000006E2                           484  bitmap_bpp             ds 2 
000006E6                           485  color_table_addr       ds 4 
000006EE                           486  pixel_array_addr       ds 4 
000006F6                           487  bitmap_width_bytes     ds 4 
000006FE                           488  
000006FE                           489  
000006FE                           490  ;------ SUBROUTINE -------
000006FE                           491  ; EndianSwap_L
000006FE                           492  ; Input:
000006FE                           493  ;   d0.l: value to be swapped
000006FE                           494  ; Output:
000006FE                           495  ;   d0.l: the swapped value
000006FE                           496  ;------------------------- 
000006FE                           497  EndianSwap_L:
000006FE  E158                     498          rol.w #8, d0 
00000700  4840                     499          swap.w d0 
00000702  E158                     500          rol.w #8, d0 
00000704  4E75                     501          rts
00000706                           502          
00000706                           503          
00000706                           504  ;------ SUBROUTINE -------
00000706                           505  ; EndianSwap_W
00000706                           506  ; Input:
00000706                           507  ;   d0.w: value to be swapped
00000706                           508  ; Output:
00000706                           509  ;   d0.w: the swapped value
00000706                           510  ;------------------------- 
00000706                           511  EndianSwap_W:
00000706  E158                     512          rol.w #8, d0 
00000708  4E75                     513          rts
00000708  4E75                     514  -------------------- end include --------------------
0000070A                           515      INCLUDE "source/start.asm"
0000070A                           516  ; ------ SUBROUTINE ------
0000070A                           517  ; LoadStart
0000070A                           518  ;
0000070A                           519  ; Loads graphics data necessary for displaying the 
0000070A                           520  ; start screen. 
0000070A                           521  ; ------------------------      
0000070A                           522  LoadStart:
0000070A                           523  
0000070A  7000                     524      move.l #0, d0             ; param d0: chunk x coordinate
0000070C  7200                     525      move.l #0, d1             ; param d1: chunk y coordinate 
0000070E  243C 00000140            526      move.l #320, d2           ; param d2: chunk width 
00000714  263C 000000E0            527      move.l #224, d3           ; param d3: chunk height 
0000071A  7800                     528      move.l #0, d4             ; param d4: screen x coordinate
0000071C  7A00                     529      move.l #0, d5             ; param d5: screen y coordinate 
0000071E  41F9 00001622            530      lea TitleBitmap, a0       ; param a0: pointer to bitmap file data
00000724  4EB8 04A2                531      jsr RenderBitmap16 
00000728                           532      
00000728  4E75                     533      rts 
0000072A                           534      
0000072A                           535  ; ------ SUBROUTINE ------
0000072A                           536  ; UpdateStart
0000072A                           537  ;
0000072A                           538  ; Checks if the user has pressed start to begin 
0000072A                           539  ; the game.
0000072A                           540  ; ------------------------      
0000072A                           541  UpdateStart:
0000072A                           542      
0000072A                           543      ; Update the frame counter in preparation 
0000072A                           544      ; for seeding the random number generator 
0000072A  3038 042E                545      move.w FrameCounter, d0 
0000072E  5240                     546      addq.w #1, d0 
00000730  31C0 042E                547      move.w d0, FrameCounter
00000734                           548      
00000734                           549      ; Check if the start button is down.
00000734                           550      ; If so, transition to game
00000734  3038 0406                551      move.w ButtonsDown, d0 
00000738  0800 000D                552      btst #BUTTON_START, d0
0000073C  6600 0016                553      bne .return 
00000740  4EB9 00000756            554      jsr SetRandSeed
00000746  4EB9 00000760            555      jsr LoadGame
0000074C  21FC 00000001 040A       556      move.l #STATE_AIM, GameState
00000754                           557  .return 
00000754  4E75                     558      rts 
00000756                           559      
00000756                           560  SetRandSeed:
00000756                           561  
00000756  3038 042E                562      move.w FrameCounter, d0 
0000075A  4EB8 043E                563      jsr SeedRandom
0000075E  4E75                     564      rts 
0000075E  4E75                     565  -------------------- end include --------------------
00000760                           566      INCLUDE "source/game.asm"
00000760                           567  ; ------ SUBROUTINE ------
00000760                           568  ; LoadGame
00000760                           569  ;
00000760                           570  ; Changes the scroll A map to the game map. 
00000760                           571  ; Initializes important game variables.
00000760                           572  ; Should be called before starting a new game
00000760                           573  ; from level 0.
00000760                           574  ; ------------------------  
00000760                           575  LoadGame:
00000760                           576      
00000760                           577      ; Initialize ball 
00000760  41F8 03C6                578      lea Ball, a0 
00000764  4EB9 000011D8            579      jsr Ball_Init 
0000076A                           580      
0000076A                           581      ; Initialize saver 
0000076A  41F8 03E6                582      lea Saver, a0 
0000076E  4EB9 00001548            583      jsr Saver_Init
00000774                           584      
00000774  21FC 00000000 0416       585      move.l #0, Level
0000077C  4EB9 00000792            586      jsr LoadLevel
00000782                           587      
00000782                           588      ; Reset score 
00000782  21FC 00000000 043A       589      move.l #0, Score 
0000078A  4EB9 00000A92            590      jsr DrawScore
00000790                           591      
00000790  4E75                     592      rts
00000792                           593      
00000792                           594  ; ------ SUBROUTINE ------
00000792                           595  ; LoadLevel
00000792                           596  ;
00000792                           597  ; Loads the level based on the value in 
00000792                           598  ; Level global variable.
00000792                           599  ; ------------------------  
00000792                           600  LoadLevel:
00000792                           601      
00000792                           602      ; First draw the background that all other 
00000792                           603      ; objects will be drawn on top of
00000792  4EB9 00000AD4            604      jsr DrawBackground 
00000798                           605      
00000798                           606      ; Reset aim angle 
00000798  21FC 00005A00 0412       607      move.l #AIM_START_ANGLE, AimAngle 
000007A0                           608      
000007A0                           609      ; Reset pegs to default values 
000007A0  4EB9 00000A42            610      jsr ClearPegs
000007A6                           611      
000007A6                           612      ; Get the level data needed for loading
000007A6  2038 0416                613      move.l Level, d0 
000007AA  0C80 00000008            614      cmpi.l #(NUM_LEVELS), d0
000007B0  6500 0004                615      blo .load_pegs 
000007B4                           616      
000007B4                           617      ; confine level number to range [0, NUM_LEVELS)
000007B4  7007                     618      move.l #(NUM_LEVELS-1), d0 
000007B6                           619      
000007B6                           620  .load_pegs
000007B6                           621      ; d0 contains level number. 
000007B6                           622      ; multiply it by 4 to get the long offset into level data table 
000007B6  E588                     623      lsl.l #2, d0 
000007B8  41F9 000132AA            624      lea LevelData, a0 
000007BE  D1C0                     625      add.l d0, a0            ; a0 now pointing at current level data address
000007C0  2250                     626      move.l (a0), a1         ; a1 is not pointing to current level data 
000007C2  2049                     627      move.l a1, a0           ; but put this back in a0 
000007C4                           628      
000007C4                           629      ; Get the level properties 
000007C4  21E8 0000 041E           630      move.l LEVEL_PEG_COUNT_OFFSET(a0), LevelPegCount
000007CA  21E8 0004 0422           631      move.l LEVEL_RED_PEG_COUNT_OFFSET(a0), LevelRedPegCount 
000007D0  21E8 0008 0426           632      move.l LEVEL_BALL_COUNT_OFFSET(a0), LevelBallCount 
000007D6  21F8 041E 0436           633      move.l LevelPegCount, PegCount
000007DC  21F8 0422 0432           634      move.l LevelRedPegCount, RedPegCount    ; set the number of red pegs to get 
000007E2  21F8 0426 041A           635      move.l LevelBallCount, BallCount        ; reset ball count 
000007E8                           636      
000007E8  D1FC 0000000C            637      adda.l #LEVEL_PEGS_OFFSET, a0       ; a0 = pointer to peg pos array in leveldata  
000007EE  43F8 0006                638      lea Pegs, a1                        ; a1 = peg array 
000007F2  4280                     639      clr.l d0                            ; d0 = counter 
000007F4                           640      
000007F4                           641      ; Loop through the peg data and position pegs accordingly
000007F4                           642  .peg_loop 
000007F4                           643      ; set x position of peg 
000007F4  4281                     644      clr.l d1 
000007F6  3218                     645      move.w (a0)+, d1            ; d1 = x pos 
000007F8  E189                     646      lsl.l #8, d1                ; convert from integer to fixed 
000007FA  2341 0000                647      move.l d1, M_PEG_X(a1)
000007FE                           648      
000007FE                           649      ; set y position of peg 
000007FE  4281                     650      clr.l d1 
00000800  3218                     651      move.w (a0)+, d1 
00000802  E189                     652      lsl.l #8, d1 
00000804  2341 0004                653      move.l d1, M_PEG_Y(a1)
00000808                           654      
00000808                           655      ; mark the peg as active 
00000808  137C 0001 0011           656      move.b #1, M_PEG_ACTIVE(a1)    ; 1 = active 
0000080E                           657      
0000080E                           658      ; Update peg sprite 
0000080E  2F08                     659      move.l a0, -(sp)
00000810  2F09                     660      move.l a1, -(sp)
00000812  2F00                     661      move.l d0, -(sp)            ; save reg state
00000814                           662      
00000814  2049                     663      move.l a1, a0 
00000816  4EB9 00001416            664      jsr Peg_Draw
0000081C                           665      
0000081C  201F                     666      move.l (sp)+, d0 
0000081E  225F                     667      move.l (sp)+, a1 
00000820  205F                     668      move.l (sp)+, a0            ; restore reg state
00000822                           669      
00000822                           670      ; point to next peg struct in preparation for next iteration 
00000822  D3FC 00000020            671      adda.l #PEG_DATA_SIZE, a1 
00000828                           672      
00000828                           673      ; check if loop should be repeated 
00000828  5280                     674      addq.l #1, d0 
0000082A  B0B8 041E                675      cmp.l LevelPegCount, d0 
0000082E  66C4                     676      bne .peg_loop
00000830                           677      
00000830                           678  .set_red_pegs 
00000830  2238 0422                679      move.l LevelRedPegCount, d1 
00000834  2438 041E                680      move.l LevelPegCount, d2 
00000838                           681      
00000838                           682  .red_peg_loop
00000838                           683      ; First, get a random byte value 
00000838  48E7 6000                684      movem.l d1-d2, -(sp)    ; save regs before calling Peg_InitSprite 
0000083C  4EB8 0444                685      jsr Random          ; d0.b = random value 
00000840  4CDF 0006                686      movem.l (sp)+, d1-d2 
00000844                           687      
00000844  80C2                     688      divu d2, d0             ; random val / num pegs 
00000846  4840                     689      swap.w d0               ; get the remainder into d0.w 
00000848  0280 0000FFFF            690      andi.l #$0000ffff, d0   ; clear the quotient portion 
0000084E                           691      
0000084E                           692      ; get the peg at this index 
0000084E  EB88                     693      lsl.l #PEG_SIZE_SHIFT, d0
00000850  41F8 0006                694      lea Pegs, a0 
00000854  D1C0                     695      add.l d0, a0 
00000856                           696      
00000856                           697      ; examine this random peg. if it's already red, then 
00000856                           698      ; keep looping until a blue one is found 
00000856                           699  .find_blue_loop
00000856  1628 0010                700      move.b M_PEG_TYPE(a0), d3 
0000085A  0C03 0000                701      cmpi.b #PEG_TYPE_BLUE, d3 
0000085E  6700 0018                702      beq .found_blue                 ; is this a blue peg? Then branch past this infinite loop 
00000862                           703      
00000862  D1FC 00000020            704      adda.l #PEG_DATA_SIZE, a0       ; increment to next peg 
00000868  B1FC 000003C6            705      cmp.l #(Pegs+PEG_DATA_SIZE*MAX_PEGS), a0 ; but check if we just overran the peg array 
0000086E  65E6                     706      blo .find_blue_loop
00000870                           707      
00000870  41F8 0006                708      lea Pegs, a0                   ; we are past the last peg in the array. reset to first peg.
00000874  4EF8 0856                709      jmp .find_blue_loop
00000878                           710      
00000878                           711  .found_blue 
00000878                           712      ; A blue peg as found. Set it to red and then update the sprite 
00000878  117C 0001 0010           713      move.b #PEG_TYPE_RED, M_PEG_TYPE(a0)
0000087E                           714      
0000087E  48E7 6000                715      movem.l d1-d2, -(sp)    ; save regs before calling Peg_InitSprite 
00000882  4EB9 00001416            716      jsr Peg_Draw
00000888  4CDF 0006                717      movem.l (sp)+, d1-d2 
0000088C                           718      
0000088C                           719      ; decrement counter 
0000088C  5381                     720      subq.l #1, d1 
0000088E  66A8                     721      bne .red_peg_loop
00000890                           722      
00000890                           723      ; draw the new ball count 
00000890  4EB9 00000AD2            724      jsr DrawBallCount
00000896                           725      
00000896  4E75                     726      rts 
00000898                           727      
00000898                           728  ; ------ SUBROUTINE ------
00000898                           729  ; UpdateAim
00000898                           730  ;
00000898                           731  ; Updates the aim angle based on user input.
00000898                           732  ; Sets the ball based on the aim angle. 
00000898                           733  ; Will launch ball and enter the resolve state 
00000898                           734  ; if the user pressed A. 
00000898                           735  ; Should only be called in STATE_AIM
00000898                           736  ; ------------------------  
00000898                           737  UpdateAim:
00000898                           738  
00000898  3038 0406                739      move.w ButtonsDown, d0 
0000089C  2238 0412                740      move.l AimAngle, d1
000008A0                           741      
000008A0  0800 0002                742      btst #BUTTON_LEFT, d0 
000008A4  6600 000E                743      bne .check_right
000008A8  0681 00000200            744      addi.l #AIM_ANGLE_DELTA, d1 
000008AE  4EF9 000008C2            745      jmp .clamp_aim_angle
000008B4                           746  .check_right
000008B4  0800 0003                747      btst #BUTTON_RIGHT, d0 
000008B8  6600 0008                748      bne .clamp_aim_angle
000008BC  0481 00000200            749      subi.l #AIM_ANGLE_DELTA, d1 
000008C2                           750      
000008C2                           751  .clamp_aim_angle
000008C2  0C81 00000500            752      cmpi.l #AIM_ANGLE_MIN, d1 
000008C8  6E00 000E                753      bgt .check_clamp_max
000008CC  223C 00000500            754      move.l #AIM_ANGLE_MIN, d1 
000008D2  4EF9 000008E8            755      jmp .save_aim_angle
000008D8                           756  .check_clamp_max
000008D8  0C81 0000AF00            757      cmpi.l #AIM_ANGLE_MAX, d1 
000008DE  6D00 0008                758      blt .save_aim_angle 
000008E2  223C 0000AF00            759      move.l #AIM_ANGLE_MAX, d1 
000008E8                           760      
000008E8                           761  .save_aim_angle
000008E8  21C1 0412                762      move.l d1, AimAngle 
000008EC                           763      
000008EC  4EB9 0000090A            764      jsr _PositionBall
000008F2  4EB9 00000962            765      jsr _CheckLaunch
000008F8                           766      
000008F8  41F8 03E6                767      lea Saver, a0  
000008FC  4EB9 000015BA            768      jsr Saver_Update 
00000902                           769  
00000902                           770  .return 
00000902                           771  
00000902  4EB9 00000AF6            772      jsr ClipView
00000908  4E75                     773      rts 
0000090A                           774      
0000090A                           775  ; ------ SUBROUTINE ------
0000090A                           776  ; _PositionBall
0000090A                           777  ;
0000090A                           778  ; Private subroutine that positions the ball 
0000090A                           779  ; based on the current AimAngle.
0000090A                           780  ; ------------------------  
0000090A                           781  _PositionBall:
0000090A                           782      
0000090A  41F8 03C6                783      lea Ball, a0 
0000090E  4EB9 000012C6            784      jsr Ball_Hide
00000914                           785      
00000914                           786      ; Get delta x from center 
00000914  701E                     787      move.l #(AIM_RADIUS>>8), d0         
00000916  2238 0412                788      move.l AimAngle, d1             ; load global var AimAngle into d1 
0000091A  E089                     789      lsr.l #8, d1                    ; convert from fixed to int 
0000091C                           790      
0000091C  41F9 00000E04            791      lea CosTable, a0 
00000922  E389                     792      lsl.l #1, d1                    ; multiply angle by 2 to get word-offset into table 
00000924  D1C1                     793      add.l d1, a0                    ; a0 pointing at cos((int)AimAngle)
00000926  3210                     794      move.w (a0), d1                 ; d1 = 8.8 cos value 
00000928                           795      
00000928  C3C0                     796      muls d0, d1                     ; d1 = AIM_RADIUS * cos(AimAngle) = DeltaX * 256 
0000092A                           797      
0000092A  243C 00009A00            798      move.l #AIM_CENTER_X, d2 
00000930  D282                     799      add.l d2, d1                    ; d1 = ball x pos. (x = AIM_CENTER_X + DeltaX)
00000932                           800      
00000932                           801  
00000932                           802      ; Get delta y from center 
00000932  2438 0412                803      move.l AimAngle, d2             ; load global var AimAngle into d2 
00000936  E08A                     804      lsr.l #8, d2                    ; convert from fixed to int 
00000938                           805      
00000938  41F9 00000B34            806      lea SinTable, a0 
0000093E  E38A                     807      lsl.l #1, d2                    ; multiply angle by 2 to get word-offset into table 
00000940  D1C2                     808      add.l d2, a0                    ; a0 pointing at sin((int)AimAngle)
00000942  3410                     809      move.w (a0), d2                 ; d2 = 8.8 sin value 
00000944                           810      
00000944  C5C0                     811      muls d0, d2                     ; d2 = AIM_RADIUS * sin(AimAngle) = DeltaX * 256 
00000946                           812      
00000946  263C 00000500            813      move.l #AIM_CENTER_Y, d3 
0000094C  D483                     814      add.l d3, d2                    ; d3 = ball y pos. (y = AIM_CENTER_Y + DeltaX)
0000094E                           815      
0000094E                           816      ; Update the ball position
0000094E  41F8 03C6                817      lea Ball, a0 
00000952  2141 0000                818      move.l d1, M_BALL_X(a0)
00000956  2142 0004                819      move.l d2, M_BALL_Y(a0)
0000095A  4EB9 000012A6            820      jsr Ball_Draw
00000960                           821  
00000960                           822  .return 
00000960                           823  
00000960  4E75                     824      rts 
00000962                           825  
00000962                           826  ; ------ SUBROUTINE ------
00000962                           827  ; _CheckLaunch
00000962                           828  ;
00000962                           829  ; Private subroutine that checks if the user 
00000962                           830  ; has pressed the A button to launch the ball.
00000962                           831  ; If A is pressed, the ball's x/y velocity is 
00000962                           832  ; is set and the game state is changed to 
00000962                           833  ; STATE_RESOLVE. 
00000962                           834  ; This subroutine should only be called from 
00000962                           835  ; UpdateAim
00000962                           836  ; ------------------------  
00000962                           837  _CheckLaunch:
00000962                           838  
00000962  3038 0406                839      move.w ButtonsDown, d0 
00000966  0800 000C                840      btst #BUTTON_A, d0 
0000096A  6600 004C                841      bne .return 
0000096E                           842      
0000096E                           843      ; Set the ball's x/y velocity
0000096E                           844      ; First find the x-component of velocity 
0000096E  203C 00000400            845      move.l #(LAUNCH_SPEED), d0      ; d0 = LAUNCH_SPEED in fixed 24.8
00000974  2238 0412                846      move.l AimAngle, d1             ; load global var AimAngle into d1 
00000978  E081                     847      asr.l #8, d1                    ; convert from fixed to int 
0000097A  41F9 00000E04            848      lea CosTable, a0 
00000980  E381                     849      asl.l #1, d1                    ; mult by 2 to get word-offset into table 
00000982  D1C1                     850      add.l d1, a0                    ; find the cos value. The angle should already be in range 5-175.
00000984                           851      
00000984  3210                     852      move.w (a0), d1                 ; d1 = 8.8 value 
00000986  C3C0                     853      muls d0, d1                     ; mult to get the xvel component of LAUNCH_SPEED
00000988                           854      
00000988  E081                     855      asr.l #8, d1                    ; result is in 16.16 format. shift right to get into 24.8
0000098A  2401                     856      move.l d1, d2                   ; d2 = xvel component 
0000098C                           857      
0000098C                           858      ; Next find the y component of velocity 
0000098C  2238 0412                859      move.l AimAngle, d1 
00000990  E081                     860      asr.l #8, d1 
00000992  41F9 00000B34            861      lea SinTable, a0 
00000998  E381                     862      asl.l #1, d1 
0000099A  D1C1                     863      add.l d1, a0 
0000099C                           864      
0000099C  3210                     865      move.w (a0), d1 
0000099E  C3C0                     866      muls d0, d1 
000009A0                           867      
000009A0  E081                     868      asr.l #8, d1                    ; convert from 16.16 to 24.8 
000009A2  2601                     869      move.l d1, d3                   ; d3 = yvel component
000009A4                           870      
000009A4                           871      ; Update the ball struct's new xvel and yvel 
000009A4  41F8 03C6                872      lea Ball, a0 
000009A8  2142 0010                873      move.l d2, M_BALL_XVEL(a0)
000009AC  2143 0014                874      move.l d3, M_BALL_YVEL(a0)
000009B0                           875      
000009B0                           876      ; Change the game state 
000009B0  21FC 00000002 040A       877      move.l #STATE_RESOLVE, GameState
000009B8                           878      
000009B8                           879  .return 
000009B8  4E75                     880      rts 
000009BA                           881  
000009BA                           882  ; ------ SUBROUTINE ------
000009BA                           883  ; UpdateResolve
000009BA                           884  ;
000009BA                           885  ; Will update the game physics, resolve collisions
000009BA                           886  ; that occur between the ball and pegs. Will change 
000009BA                           887  ; state to STATE_AIM if the ball falls below 
000009BA                           888  ; FALLOUT_Y or if the ball collides with the saver. 
000009BA                           889  ; Will change state to STATE_LOSE if the player
000009BA                           890  ; has no more lives. Will change state to 
000009BA                           891  ; STATE_WIN if all orange pegs are cleared on level
000009BA                           892  ; NUM_LEVELS-1.
000009BA                           893  ; ------------------------  
000009BA                           894  UpdateResolve:
000009BA                           895  
000009BA  41F8 03C6                896      lea Ball, a0 
000009BE  4EB9 0000120A            897      jsr Ball_Update 
000009C4                           898      
000009C4  41F8 03E6                899      lea Saver, a0  
000009C8  4EB9 000015BA            900      jsr Saver_Update 
000009CE                           901      
000009CE                           902      ; Check if the stage has been cleared. (no red pegs remaining)
000009CE  2038 0432                903      move.l RedPegCount, d0 
000009D2  0C80 00000000            904      cmpi.l #0, d0 
000009D8  6600 0018                905      bne .check_fallout
000009DC                           906      ; increment level and call load level again
000009DC  52B8 0416                907      addq.l #1, Level 
000009E0  4EB8 0792                908      jsr LoadLevel 
000009E4  21FC 00000001 040A       909      move.l #STATE_AIM, GameState
000009EC  4EF9 00000A3A            910      jmp .return 
000009F2                           911      
000009F2                           912  .check_fallout
000009F2                           913      ; Check if the ball has passed the fallout threshold 
000009F2  41F8 03C6                914      lea Ball, a0 
000009F6  2028 0004                915      move.l M_BALL_Y(a0), d0 
000009FA  0C80 0000E000            916      cmpi.l #FALLOUT_Y, d0 
00000A00  6D00 0038                917      blt .return 
00000A04                           918      
00000A04                           919      ; Ball has passed fallout_y, so decrement BallCount 
00000A04                           920      ; and if ball count is 0, then go to lose state 
00000A04  2038 041A                921      move.l BallCount, d0 
00000A08  5380                     922      subq.l #1, d0 
00000A0A  21C0 041A                923      move.l d0, BallCount
00000A0E  4EB9 00000AD2            924      jsr DrawBallCount
00000A14  0CB8 00000000 041A       925      cmpi.l #0, BallCount 
00000A1C  6600 0014                926      bne .set_state_aim
00000A20  21FC 00000003 040A       927      move.l #STATE_LOSE, GameState
00000A28  4EB8 070A                928      jsr LoadStart
00000A2C  4EF9 00000A3A            929      jmp .return 
00000A32                           930  .set_state_aim 
00000A32  21FC 00000001 040A       931      move.l #STATE_AIM, GameState
00000A3A                           932      
00000A3A                           933  .return 
00000A3A  4EB9 00000AF6            934      jsr ClipView
00000A40  4E75                     935      rts
00000A42                           936      
00000A42                           937  ; ------ SUBROUTINE ------
00000A42                           938  ; ClearPegs
00000A42                           939  ;
00000A42                           940  ; This will deactive all pegs and set their 
00000A42                           941  ; sprites offscreen. Will also set their 
00000A42                           942  ; sprite index appropriately.
00000A42                           943  ; ------------------------  
00000A42                           944  ClearPegs:
00000A42                           945  
00000A42  =00000000                946  L_CUR_PEG   SET 0 
00000A42  =00000004                947  L_COUNTER   SET 4 
00000A42  =00000008                948  LVARS_SIZE  SET 8 
00000A42                           949  
00000A42                           950      ; add local vars to stack 
00000A42  518F                     951      sub.l #LVARS_SIZE, sp 
00000A44  41F8 0006                952      lea Pegs, a0        ; a0 = pointer to cur peg 
00000A48  4280                     953      clr.l d0            ; d0 = counter 
00000A4A  2F48 0000                954      move.l a0, L_CUR_PEG(sp)
00000A4E  2F40 0004                955      move.l d0, L_COUNTER(sp)
00000A52                           956      
00000A52                           957  .loop 
00000A52                           958      
00000A52                           959      ; Initialize the peg 
00000A52  4EB9 000013D0            960      jsr Peg_Init
00000A58                           961      
00000A58                           962      ; Set the approriate sprite index 
00000A58  206F 0000                963      move.l L_CUR_PEG(sp), a0        ; restore local vars to registers
00000A5C  202F 0004                964      move.l L_COUNTER(sp), d0 
00000A60  2200                     965      move.l d0, d1 
00000A62  5481                     966      addq.l #PEGS_SPRITE_INDEX, d1   ; d1 = sprite index 
00000A64  1141 0013                967      move.b d1, M_PEG_SPRITE_INDEX(a0)
00000A68                           968  
00000A68  202F 0004                969      move.l L_COUNTER(sp), d0 
00000A6C  5280                     970      addq.l #1, d0 
00000A6E  2F40 0004                971      move.l d0, L_COUNTER(sp)
00000A72  0C80 0000001E            972      cmpi.l #MAX_PEGS, d0 
00000A78  6700 0014                973      beq .return 
00000A7C                           974      
00000A7C                           975      ; move pointer to next peg 
00000A7C  206F 0000                976      move.l L_CUR_PEG(sp), a0 
00000A80  D1FC 00000020            977      add.l #PEG_DATA_SIZE, a0 
00000A86  2F48 0000                978      move.l a0, L_CUR_PEG(sp)
00000A8A  4EF8 0A52                979      jmp .loop 
00000A8E                           980      
00000A8E                           981  .return 
00000A8E                           982  
00000A8E                           983      ; remove local vars from stack 
00000A8E  508F                     984      add.l #LVARS_SIZE, sp 
00000A90  4E75                     985      rts
00000A92                           986      
00000A92                           987  ; ------ SUBROUTINE ------
00000A92                           988  ; DrawScore
00000A92                           989  ;
00000A92                           990  ; Uses the current score in the Score 
00000A92                           991  ; global bss variable to draw digits 
00000A92                           992  ; on Plane A in decimal.
00000A92                           993  ; ------------------------  
00000A92                           994  DrawScore:
00000A92  =00000000                995  L_DIGIT3 SET 0
00000A92  =00000002                996  L_DIGIT2 SET 2
00000A92  =00000004                997  L_DIGIT1 SET 4
00000A92  =00000006                998  LVARS_SIZE SET 6 
00000A92                           999  
00000A92                          1000      ; allocate local vars
00000A92  5D8F                    1001      sub.l #LVARS_SIZE, sp 
00000A94                          1002      
00000A94                          1003      ; Get first digit of score 
00000A94  2038 043A               1004      move.l Score, d0 
00000A98  80FC 000A               1005      divu #10, d0 
00000A9C  2200                    1006      move.l d0, d1 
00000A9E  4841                    1007      swap.w d1
00000AA0  3F41 0004               1008      move.w d1, L_DIGIT1(sp)
00000AA4  0280 0000FFFF           1009      andi.l #$0000ffff, d0 
00000AAA                          1010  
00000AAA                          1011      ; second digit 
00000AAA  80FC 000A               1012      divu #10, d0 
00000AAE  2200                    1013      move.l d0, d1 
00000AB0  4841                    1014      swap.w d1
00000AB2  3F41 0002               1015      move.w d1, L_DIGIT2(sp)    
00000AB6  0280 0000FFFF           1016      andi.l #$0000ffff, d0 
00000ABC                          1017      
00000ABC                          1018      ; third digit 
00000ABC  80FC 000A               1019      divu #10, d0 
00000AC0  2200                    1020      move.l d0, d1 
00000AC2  4841                    1021      swap.w d1
00000AC4  3F41 0000               1022      move.w d1, L_DIGIT3(sp)
00000AC8  0280 0000FFFF           1023      andi.l #$0000ffff, d0 
00000ACE                          1024      
00000ACE                          1025      ; E68 TODO
00000ACE                          1026      ;PRINT_THE_SCORE_HERE 
00000ACE                          1027      
00000ACE                          1028      ; destroy local vars
00000ACE  5C8F                    1029      add.l #LVARS_SIZE, sp 
00000AD0                          1030  
00000AD0  4E75                    1031      rts 
00000AD2                          1032      
00000AD2                          1033  ; ------ SUBROUTINE ------
00000AD2                          1034  ; DrawBallCount
00000AD2                          1035  ;
00000AD2                          1036  ; Draws the ball count number on the 
00000AD2                          1037  ; screen (MAX BALLS = 9) by placing the 
00000AD2                          1038  ; proper glyphs into plane a's name table.
00000AD2                          1039  ; ------------------------  
00000AD2                          1040  DrawBallCount:
00000AD2                          1041      
00000AD2                          1042      ; Assume that MAX_BALL_COUNT is being 
00000AD2                          1043      ; used elsewhere to properly clamp the maximum balls
00000AD2                          1044      ; the player can have 
00000AD2                          1045      
00000AD2                          1046      ; E68 TODO
00000AD2                          1047      ;PRINT_THE_TEXT_HERE
00000AD2                          1048      
00000AD2  4E75                    1049      rts
00000AD4                          1050      
00000AD4                          1051      
00000AD4                          1052  DrawBackground:
00000AD4                          1053  
00000AD4  7000                    1054      move.l #0, d0             ; param d0: chunk x coordinate
00000AD6  7200                    1055      move.l #0, d1             ; param d1: chunk y coordinate 
00000AD8  243C 00000140           1056      move.l #320, d2            ; param d2: chunk width 
00000ADE  263C 000000E0           1057      move.l #224, d3            ; param d3: chunk height 
00000AE4  7800                    1058      move.l #0, d4             ; param d4: screen x coordinate
00000AE6  7A00                    1059      move.l #0, d5             ; param d5: screen y coordinate 
00000AE8  41F9 0000A570           1060      lea BGBitmap, a0       ; param a0: pointer to bitmap file data
00000AEE  4EB8 04A2               1061      jsr RenderBitmap16 
00000AF2  4E75                    1062      rts 
00000AF4                          1063      
00000AF4  4E75                    1064      rts 
00000AF6                          1065      
00000AF6                          1066  ; ------ SUBROUTINE ------
00000AF6                          1067  ; ClipView
00000AF6                          1068  ;
00000AF6                          1069  ; Draws two black rectangles outside of the 
00000AF6                          1070  ; game space to hide any pixels that render 
00000AF6                          1071  ; outside the gamespace.
00000AF6                          1072  ; ------------------------  
00000AF6                          1073  ClipView:
00000AF6                          1074  
00000AF6  7050                    1075      move.l #PEN_COLOR_TRAP_CODE, d0 
00000AF8  7200                    1076      move.l #$000000, d1              ; set pen color to black 
00000AFA  4E4F                    1077      trap #15 
00000AFC                          1078      
00000AFC  7051                    1079      move.l #FILL_COLOR_TRAP_CODE, d0 
00000AFE  7200                    1080      move.l #$000000, d1             ; set fill color to black 
00000B00  4E4F                    1081      trap #15 
00000B02                          1082      
00000B02  7200                    1083      move.l #0, d1 
00000B04  243C 000000E0           1084      move.l #224, d2 
00000B0A  263C 00000280           1085      move.l #640, d3 
00000B10  283C 000001E0           1086      move.l #480, d4 
00000B16  7057                    1087      move.l #DRAW_RECT_TRAP_CODE, d0 
00000B18  4E4F                    1088      trap #15 
00000B1A                          1089      
00000B1A  223C 00000140           1090      move.l #320, d1 
00000B20  7400                    1091      move.l #0, d2 
00000B22  263C 00000280           1092      move.l #640, d3 
00000B28  283C 000001E0           1093      move.l #480, d4 
00000B2E  7057                    1094      move.l #DRAW_RECT_TRAP_CODE, d0 
00000B30  4E4F                    1095      trap #15 
00000B32                          1096  
00000B32  4E75                    1097      rts 
00000B32  4E75                    1098  -------------------- end include --------------------
00000B34                          1099      INCLUDE "source/tables.asm"
00000B34                          1100  SinTable:
00000B34= 0000                    1101      dc.w 0
00000B36= 0004                    1102      dc.w 4
00000B38= 0008                    1103      dc.w 8
00000B3A= 000D                    1104      dc.w 13
00000B3C= 0011                    1105      dc.w 17
00000B3E= 0016                    1106      dc.w 22
00000B40= 001A                    1107      dc.w 26
00000B42= 001F                    1108      dc.w 31
00000B44= 0023                    1109      dc.w 35
00000B46= 0028                    1110      dc.w 40
00000B48= 002C                    1111      dc.w 44
00000B4A= 0030                    1112      dc.w 48
00000B4C= 0035                    1113      dc.w 53
00000B4E= 0039                    1114      dc.w 57
00000B50= 003D                    1115      dc.w 61
00000B52= 0042                    1116      dc.w 66
00000B54= 0046                    1117      dc.w 70
00000B56= 004A                    1118      dc.w 74
00000B58= 004F                    1119      dc.w 79
00000B5A= 0053                    1120      dc.w 83
00000B5C= 0057                    1121      dc.w 87
00000B5E= 005B                    1122      dc.w 91
00000B60= 005F                    1123      dc.w 95
00000B62= 0064                    1124      dc.w 100
00000B64= 0068                    1125      dc.w 104
00000B66= 006C                    1126      dc.w 108
00000B68= 0070                    1127      dc.w 112
00000B6A= 0074                    1128      dc.w 116
00000B6C= 0078                    1129      dc.w 120
00000B6E= 007C                    1130      dc.w 124
00000B70= 0080                    1131      dc.w 128
00000B72= 0083                    1132      dc.w 131
00000B74= 0087                    1133      dc.w 135
00000B76= 008B                    1134      dc.w 139
00000B78= 008F                    1135      dc.w 143
00000B7A= 0092                    1136      dc.w 146
00000B7C= 0096                    1137      dc.w 150
00000B7E= 009A                    1138      dc.w 154
00000B80= 009D                    1139      dc.w 157
00000B82= 00A1                    1140      dc.w 161
00000B84= 00A4                    1141      dc.w 164
00000B86= 00A7                    1142      dc.w 167
00000B88= 00AB                    1143      dc.w 171
00000B8A= 00AE                    1144      dc.w 174
00000B8C= 00B1                    1145      dc.w 177
00000B8E= 00B5                    1146      dc.w 181
00000B90= 00B8                    1147      dc.w 184
00000B92= 00BB                    1148      dc.w 187
00000B94= 00BE                    1149      dc.w 190
00000B96= 00C1                    1150      dc.w 193
00000B98= 00C4                    1151      dc.w 196
00000B9A= 00C6                    1152      dc.w 198
00000B9C= 00C9                    1153      dc.w 201
00000B9E= 00CC                    1154      dc.w 204
00000BA0= 00CF                    1155      dc.w 207
00000BA2= 00D1                    1156      dc.w 209
00000BA4= 00D4                    1157      dc.w 212
00000BA6= 00D6                    1158      dc.w 214
00000BA8= 00D9                    1159      dc.w 217
00000BAA= 00DB                    1160      dc.w 219
00000BAC= 00DD                    1161      dc.w 221
00000BAE= 00DF                    1162      dc.w 223
00000BB0= 00E2                    1163      dc.w 226
00000BB2= 00E4                    1164      dc.w 228
00000BB4= 00E6                    1165      dc.w 230
00000BB6= 00E8                    1166      dc.w 232
00000BB8= 00E9                    1167      dc.w 233
00000BBA= 00EB                    1168      dc.w 235
00000BBC= 00ED                    1169      dc.w 237
00000BBE= 00EE                    1170      dc.w 238
00000BC0= 00F0                    1171      dc.w 240
00000BC2= 00F2                    1172      dc.w 242
00000BC4= 00F3                    1173      dc.w 243
00000BC6= 00F4                    1174      dc.w 244
00000BC8= 00F6                    1175      dc.w 246
00000BCA= 00F7                    1176      dc.w 247
00000BCC= 00F8                    1177      dc.w 248
00000BCE= 00F9                    1178      dc.w 249
00000BD0= 00FA                    1179      dc.w 250
00000BD2= 00FB                    1180      dc.w 251
00000BD4= 00FC                    1181      dc.w 252
00000BD6= 00FC                    1182      dc.w 252
00000BD8= 00FD                    1183      dc.w 253
00000BDA= 00FE                    1184      dc.w 254
00000BDC= 00FE                    1185      dc.w 254
00000BDE= 00FF                    1186      dc.w 255
00000BE0= 00FF                    1187      dc.w 255
00000BE2= 00FF                    1188      dc.w 255
00000BE4= 00FF                    1189      dc.w 255
00000BE6= 00FF                    1190      dc.w 255
00000BE8= 00FF                    1191      dc.w 255
00000BEA= 00FF                    1192      dc.w 255
00000BEC= 00FF                    1193      dc.w 255
00000BEE= 00FF                    1194      dc.w 255
00000BF0= 00FF                    1195      dc.w 255
00000BF2= 00FF                    1196      dc.w 255
00000BF4= 00FE                    1197      dc.w 254
00000BF6= 00FE                    1198      dc.w 254
00000BF8= 00FD                    1199      dc.w 253
00000BFA= 00FC                    1200      dc.w 252
00000BFC= 00FC                    1201      dc.w 252
00000BFE= 00FB                    1202      dc.w 251
00000C00= 00FA                    1203      dc.w 250
00000C02= 00F9                    1204      dc.w 249
00000C04= 00F8                    1205      dc.w 248
00000C06= 00F7                    1206      dc.w 247
00000C08= 00F6                    1207      dc.w 246
00000C0A= 00F4                    1208      dc.w 244
00000C0C= 00F3                    1209      dc.w 243
00000C0E= 00F2                    1210      dc.w 242
00000C10= 00F0                    1211      dc.w 240
00000C12= 00EE                    1212      dc.w 238
00000C14= 00ED                    1213      dc.w 237
00000C16= 00EB                    1214      dc.w 235
00000C18= 00E9                    1215      dc.w 233
00000C1A= 00E8                    1216      dc.w 232
00000C1C= 00E6                    1217      dc.w 230
00000C1E= 00E4                    1218      dc.w 228
00000C20= 00E2                    1219      dc.w 226
00000C22= 00DF                    1220      dc.w 223
00000C24= 00DD                    1221      dc.w 221
00000C26= 00DB                    1222      dc.w 219
00000C28= 00D9                    1223      dc.w 217
00000C2A= 00D6                    1224      dc.w 214
00000C2C= 00D4                    1225      dc.w 212
00000C2E= 00D1                    1226      dc.w 209
00000C30= 00CF                    1227      dc.w 207
00000C32= 00CC                    1228      dc.w 204
00000C34= 00C9                    1229      dc.w 201
00000C36= 00C6                    1230      dc.w 198
00000C38= 00C4                    1231      dc.w 196
00000C3A= 00C1                    1232      dc.w 193
00000C3C= 00BE                    1233      dc.w 190
00000C3E= 00BB                    1234      dc.w 187
00000C40= 00B8                    1235      dc.w 184
00000C42= 00B5                    1236      dc.w 181
00000C44= 00B1                    1237      dc.w 177
00000C46= 00AE                    1238      dc.w 174
00000C48= 00AB                    1239      dc.w 171
00000C4A= 00A7                    1240      dc.w 167
00000C4C= 00A4                    1241      dc.w 164
00000C4E= 00A1                    1242      dc.w 161
00000C50= 009D                    1243      dc.w 157
00000C52= 009A                    1244      dc.w 154
00000C54= 0096                    1245      dc.w 150
00000C56= 0092                    1246      dc.w 146
00000C58= 008F                    1247      dc.w 143
00000C5A= 008B                    1248      dc.w 139
00000C5C= 0087                    1249      dc.w 135
00000C5E= 0083                    1250      dc.w 131
00000C60= 007F                    1251      dc.w 127
00000C62= 007C                    1252      dc.w 124
00000C64= 0078                    1253      dc.w 120
00000C66= 0074                    1254      dc.w 116
00000C68= 0070                    1255      dc.w 112
00000C6A= 006C                    1256      dc.w 108
00000C6C= 0068                    1257      dc.w 104
00000C6E= 0064                    1258      dc.w 100
00000C70= 005F                    1259      dc.w 95
00000C72= 005B                    1260      dc.w 91
00000C74= 0057                    1261      dc.w 87
00000C76= 0053                    1262      dc.w 83
00000C78= 004F                    1263      dc.w 79
00000C7A= 004A                    1264      dc.w 74
00000C7C= 0046                    1265      dc.w 70
00000C7E= 0042                    1266      dc.w 66
00000C80= 003D                    1267      dc.w 61
00000C82= 0039                    1268      dc.w 57
00000C84= 0035                    1269      dc.w 53
00000C86= 0030                    1270      dc.w 48
00000C88= 002C                    1271      dc.w 44
00000C8A= 0028                    1272      dc.w 40
00000C8C= 0023                    1273      dc.w 35
00000C8E= 001F                    1274      dc.w 31
00000C90= 001A                    1275      dc.w 26
00000C92= 0016                    1276      dc.w 22
00000C94= 0011                    1277      dc.w 17
00000C96= 000D                    1278      dc.w 13
00000C98= 0008                    1279      dc.w 8
00000C9A= 0004                    1280      dc.w 4
00000C9C= 0000                    1281      dc.w 0
00000C9E= FFFC                    1282      dc.w -4
00000CA0= FFF8                    1283      dc.w -8
00000CA2= FFF3                    1284      dc.w -13
00000CA4= FFEF                    1285      dc.w -17
00000CA6= FFEA                    1286      dc.w -22
00000CA8= FFE6                    1287      dc.w -26
00000CAA= FFE1                    1288      dc.w -31
00000CAC= FFDD                    1289      dc.w -35
00000CAE= FFD8                    1290      dc.w -40
00000CB0= FFD4                    1291      dc.w -44
00000CB2= FFD0                    1292      dc.w -48
00000CB4= FFCB                    1293      dc.w -53
00000CB6= FFC7                    1294      dc.w -57
00000CB8= FFC3                    1295      dc.w -61
00000CBA= FFBE                    1296      dc.w -66
00000CBC= FFBA                    1297      dc.w -70
00000CBE= FFB6                    1298      dc.w -74
00000CC0= FFB1                    1299      dc.w -79
00000CC2= FFAD                    1300      dc.w -83
00000CC4= FFA9                    1301      dc.w -87
00000CC6= FFA5                    1302      dc.w -91
00000CC8= FFA1                    1303      dc.w -95
00000CCA= FF9C                    1304      dc.w -100
00000CCC= FF98                    1305      dc.w -104
00000CCE= FF94                    1306      dc.w -108
00000CD0= FF90                    1307      dc.w -112
00000CD2= FF8C                    1308      dc.w -116
00000CD4= FF88                    1309      dc.w -120
00000CD6= FF84                    1310      dc.w -124
00000CD8= FF80                    1311      dc.w -128
00000CDA= FF7D                    1312      dc.w -131
00000CDC= FF79                    1313      dc.w -135
00000CDE= FF75                    1314      dc.w -139
00000CE0= FF71                    1315      dc.w -143
00000CE2= FF6E                    1316      dc.w -146
00000CE4= FF6A                    1317      dc.w -150
00000CE6= FF66                    1318      dc.w -154
00000CE8= FF63                    1319      dc.w -157
00000CEA= FF5F                    1320      dc.w -161
00000CEC= FF5C                    1321      dc.w -164
00000CEE= FF59                    1322      dc.w -167
00000CF0= FF55                    1323      dc.w -171
00000CF2= FF52                    1324      dc.w -174
00000CF4= FF4F                    1325      dc.w -177
00000CF6= FF4B                    1326      dc.w -181
00000CF8= FF48                    1327      dc.w -184
00000CFA= FF45                    1328      dc.w -187
00000CFC= FF42                    1329      dc.w -190
00000CFE= FF3F                    1330      dc.w -193
00000D00= FF3C                    1331      dc.w -196
00000D02= FF3A                    1332      dc.w -198
00000D04= FF37                    1333      dc.w -201
00000D06= FF34                    1334      dc.w -204
00000D08= FF31                    1335      dc.w -207
00000D0A= FF2F                    1336      dc.w -209
00000D0C= FF2C                    1337      dc.w -212
00000D0E= FF2A                    1338      dc.w -214
00000D10= FF27                    1339      dc.w -217
00000D12= FF25                    1340      dc.w -219
00000D14= FF23                    1341      dc.w -221
00000D16= FF21                    1342      dc.w -223
00000D18= FF1E                    1343      dc.w -226
00000D1A= FF1C                    1344      dc.w -228
00000D1C= FF1A                    1345      dc.w -230
00000D1E= FF18                    1346      dc.w -232
00000D20= FF17                    1347      dc.w -233
00000D22= FF15                    1348      dc.w -235
00000D24= FF13                    1349      dc.w -237
00000D26= FF12                    1350      dc.w -238
00000D28= FF10                    1351      dc.w -240
00000D2A= FF0E                    1352      dc.w -242
00000D2C= FF0D                    1353      dc.w -243
00000D2E= FF0C                    1354      dc.w -244
00000D30= FF0A                    1355      dc.w -246
00000D32= FF09                    1356      dc.w -247
00000D34= FF08                    1357      dc.w -248
00000D36= FF07                    1358      dc.w -249
00000D38= FF06                    1359      dc.w -250
00000D3A= FF05                    1360      dc.w -251
00000D3C= FF04                    1361      dc.w -252
00000D3E= FF04                    1362      dc.w -252
00000D40= FF03                    1363      dc.w -253
00000D42= FF02                    1364      dc.w -254
00000D44= FF02                    1365      dc.w -254
00000D46= FF01                    1366      dc.w -255
00000D48= FF01                    1367      dc.w -255
00000D4A= FF01                    1368      dc.w -255
00000D4C= FF01                    1369      dc.w -255
00000D4E= FF01                    1370      dc.w -255
00000D50= FF01                    1371      dc.w -255
00000D52= FF01                    1372      dc.w -255
00000D54= FF01                    1373      dc.w -255
00000D56= FF01                    1374      dc.w -255
00000D58= FF01                    1375      dc.w -255
00000D5A= FF01                    1376      dc.w -255
00000D5C= FF02                    1377      dc.w -254
00000D5E= FF02                    1378      dc.w -254
00000D60= FF03                    1379      dc.w -253
00000D62= FF04                    1380      dc.w -252
00000D64= FF04                    1381      dc.w -252
00000D66= FF05                    1382      dc.w -251
00000D68= FF06                    1383      dc.w -250
00000D6A= FF07                    1384      dc.w -249
00000D6C= FF08                    1385      dc.w -248
00000D6E= FF09                    1386      dc.w -247
00000D70= FF0A                    1387      dc.w -246
00000D72= FF0C                    1388      dc.w -244
00000D74= FF0D                    1389      dc.w -243
00000D76= FF0E                    1390      dc.w -242
00000D78= FF10                    1391      dc.w -240
00000D7A= FF12                    1392      dc.w -238
00000D7C= FF13                    1393      dc.w -237
00000D7E= FF15                    1394      dc.w -235
00000D80= FF17                    1395      dc.w -233
00000D82= FF18                    1396      dc.w -232
00000D84= FF1A                    1397      dc.w -230
00000D86= FF1C                    1398      dc.w -228
00000D88= FF1E                    1399      dc.w -226
00000D8A= FF21                    1400      dc.w -223
00000D8C= FF23                    1401      dc.w -221
00000D8E= FF25                    1402      dc.w -219
00000D90= FF27                    1403      dc.w -217
00000D92= FF2A                    1404      dc.w -214
00000D94= FF2C                    1405      dc.w -212
00000D96= FF2F                    1406      dc.w -209
00000D98= FF31                    1407      dc.w -207
00000D9A= FF34                    1408      dc.w -204
00000D9C= FF37                    1409      dc.w -201
00000D9E= FF3A                    1410      dc.w -198
00000DA0= FF3C                    1411      dc.w -196
00000DA2= FF3F                    1412      dc.w -193
00000DA4= FF42                    1413      dc.w -190
00000DA6= FF45                    1414      dc.w -187
00000DA8= FF48                    1415      dc.w -184
00000DAA= FF4B                    1416      dc.w -181
00000DAC= FF4F                    1417      dc.w -177
00000DAE= FF52                    1418      dc.w -174
00000DB0= FF55                    1419      dc.w -171
00000DB2= FF59                    1420      dc.w -167
00000DB4= FF5C                    1421      dc.w -164
00000DB6= FF5F                    1422      dc.w -161
00000DB8= FF63                    1423      dc.w -157
00000DBA= FF66                    1424      dc.w -154
00000DBC= FF6A                    1425      dc.w -150
00000DBE= FF6E                    1426      dc.w -146
00000DC0= FF71                    1427      dc.w -143
00000DC2= FF75                    1428      dc.w -139
00000DC4= FF79                    1429      dc.w -135
00000DC6= FF7D                    1430      dc.w -131
00000DC8= FF81                    1431      dc.w -127
00000DCA= FF84                    1432      dc.w -124
00000DCC= FF88                    1433      dc.w -120
00000DCE= FF8C                    1434      dc.w -116
00000DD0= FF90                    1435      dc.w -112
00000DD2= FF94                    1436      dc.w -108
00000DD4= FF98                    1437      dc.w -104
00000DD6= FF9C                    1438      dc.w -100
00000DD8= FFA1                    1439      dc.w -95
00000DDA= FFA5                    1440      dc.w -91
00000DDC= FFA9                    1441      dc.w -87
00000DDE= FFAD                    1442      dc.w -83
00000DE0= FFB1                    1443      dc.w -79
00000DE2= FFB6                    1444      dc.w -74
00000DE4= FFBA                    1445      dc.w -70
00000DE6= FFBE                    1446      dc.w -66
00000DE8= FFC3                    1447      dc.w -61
00000DEA= FFC7                    1448      dc.w -57
00000DEC= FFCB                    1449      dc.w -53
00000DEE= FFD0                    1450      dc.w -48
00000DF0= FFD4                    1451      dc.w -44
00000DF2= FFD8                    1452      dc.w -40
00000DF4= FFDD                    1453      dc.w -35
00000DF6= FFE1                    1454      dc.w -31
00000DF8= FFE6                    1455      dc.w -26
00000DFA= FFEA                    1456      dc.w -22
00000DFC= FFEF                    1457      dc.w -17
00000DFE= FFF3                    1458      dc.w -13
00000E00= FFF8                    1459      dc.w -8
00000E02= FFFC                    1460      dc.w -4
00000E04                          1461  
00000E04                          1462  
00000E04                          1463  CosTable:
00000E04= 0100                    1464      dc.w 256
00000E06= 00FF                    1465      dc.w 255
00000E08= 00FF                    1466      dc.w 255
00000E0A= 00FF                    1467      dc.w 255
00000E0C= 00FF                    1468      dc.w 255
00000E0E= 00FF                    1469      dc.w 255
00000E10= 00FE                    1470      dc.w 254
00000E12= 00FE                    1471      dc.w 254
00000E14= 00FD                    1472      dc.w 253
00000E16= 00FC                    1473      dc.w 252
00000E18= 00FC                    1474      dc.w 252
00000E1A= 00FB                    1475      dc.w 251
00000E1C= 00FA                    1476      dc.w 250
00000E1E= 00F9                    1477      dc.w 249
00000E20= 00F8                    1478      dc.w 248
00000E22= 00F7                    1479      dc.w 247
00000E24= 00F6                    1480      dc.w 246
00000E26= 00F4                    1481      dc.w 244
00000E28= 00F3                    1482      dc.w 243
00000E2A= 00F2                    1483      dc.w 242
00000E2C= 00F0                    1484      dc.w 240
00000E2E= 00EE                    1485      dc.w 238
00000E30= 00ED                    1486      dc.w 237
00000E32= 00EB                    1487      dc.w 235
00000E34= 00E9                    1488      dc.w 233
00000E36= 00E8                    1489      dc.w 232
00000E38= 00E6                    1490      dc.w 230
00000E3A= 00E4                    1491      dc.w 228
00000E3C= 00E2                    1492      dc.w 226
00000E3E= 00DF                    1493      dc.w 223
00000E40= 00DD                    1494      dc.w 221
00000E42= 00DB                    1495      dc.w 219
00000E44= 00D9                    1496      dc.w 217
00000E46= 00D6                    1497      dc.w 214
00000E48= 00D4                    1498      dc.w 212
00000E4A= 00D1                    1499      dc.w 209
00000E4C= 00CF                    1500      dc.w 207
00000E4E= 00CC                    1501      dc.w 204
00000E50= 00C9                    1502      dc.w 201
00000E52= 00C6                    1503      dc.w 198
00000E54= 00C4                    1504      dc.w 196
00000E56= 00C1                    1505      dc.w 193
00000E58= 00BE                    1506      dc.w 190
00000E5A= 00BB                    1507      dc.w 187
00000E5C= 00B8                    1508      dc.w 184
00000E5E= 00B5                    1509      dc.w 181
00000E60= 00B1                    1510      dc.w 177
00000E62= 00AE                    1511      dc.w 174
00000E64= 00AB                    1512      dc.w 171
00000E66= 00A7                    1513      dc.w 167
00000E68= 00A4                    1514      dc.w 164
00000E6A= 00A1                    1515      dc.w 161
00000E6C= 009D                    1516      dc.w 157
00000E6E= 009A                    1517      dc.w 154
00000E70= 0096                    1518      dc.w 150
00000E72= 0092                    1519      dc.w 146
00000E74= 008F                    1520      dc.w 143
00000E76= 008B                    1521      dc.w 139
00000E78= 0087                    1522      dc.w 135
00000E7A= 0083                    1523      dc.w 131
00000E7C= 007F                    1524      dc.w 127
00000E7E= 007C                    1525      dc.w 124
00000E80= 0078                    1526      dc.w 120
00000E82= 0074                    1527      dc.w 116
00000E84= 0070                    1528      dc.w 112
00000E86= 006C                    1529      dc.w 108
00000E88= 0068                    1530      dc.w 104
00000E8A= 0064                    1531      dc.w 100
00000E8C= 005F                    1532      dc.w 95
00000E8E= 005B                    1533      dc.w 91
00000E90= 0057                    1534      dc.w 87
00000E92= 0053                    1535      dc.w 83
00000E94= 004F                    1536      dc.w 79
00000E96= 004A                    1537      dc.w 74
00000E98= 0046                    1538      dc.w 70
00000E9A= 0042                    1539      dc.w 66
00000E9C= 003D                    1540      dc.w 61
00000E9E= 0039                    1541      dc.w 57
00000EA0= 0035                    1542      dc.w 53
00000EA2= 0030                    1543      dc.w 48
00000EA4= 002C                    1544      dc.w 44
00000EA6= 0028                    1545      dc.w 40
00000EA8= 0023                    1546      dc.w 35
00000EAA= 001F                    1547      dc.w 31
00000EAC= 001A                    1548      dc.w 26
00000EAE= 0016                    1549      dc.w 22
00000EB0= 0011                    1550      dc.w 17
00000EB2= 000D                    1551      dc.w 13
00000EB4= 0008                    1552      dc.w 8
00000EB6= 0004                    1553      dc.w 4
00000EB8= 0000                    1554      dc.w 0
00000EBA= FFFC                    1555      dc.w -4
00000EBC= FFF8                    1556      dc.w -8
00000EBE= FFF3                    1557      dc.w -13
00000EC0= FFEF                    1558      dc.w -17
00000EC2= FFEA                    1559      dc.w -22
00000EC4= FFE6                    1560      dc.w -26
00000EC6= FFE1                    1561      dc.w -31
00000EC8= FFDD                    1562      dc.w -35
00000ECA= FFD8                    1563      dc.w -40
00000ECC= FFD4                    1564      dc.w -44
00000ECE= FFD0                    1565      dc.w -48
00000ED0= FFCB                    1566      dc.w -53
00000ED2= FFC7                    1567      dc.w -57
00000ED4= FFC3                    1568      dc.w -61
00000ED6= FFBE                    1569      dc.w -66
00000ED8= FFBA                    1570      dc.w -70
00000EDA= FFB6                    1571      dc.w -74
00000EDC= FFB1                    1572      dc.w -79
00000EDE= FFAD                    1573      dc.w -83
00000EE0= FFA9                    1574      dc.w -87
00000EE2= FFA5                    1575      dc.w -91
00000EE4= FFA1                    1576      dc.w -95
00000EE6= FF9C                    1577      dc.w -100
00000EE8= FF98                    1578      dc.w -104
00000EEA= FF94                    1579      dc.w -108
00000EEC= FF90                    1580      dc.w -112
00000EEE= FF8C                    1581      dc.w -116
00000EF0= FF88                    1582      dc.w -120
00000EF2= FF84                    1583      dc.w -124
00000EF4= FF80                    1584      dc.w -128
00000EF6= FF7D                    1585      dc.w -131
00000EF8= FF79                    1586      dc.w -135
00000EFA= FF75                    1587      dc.w -139
00000EFC= FF71                    1588      dc.w -143
00000EFE= FF6E                    1589      dc.w -146
00000F00= FF6A                    1590      dc.w -150
00000F02= FF66                    1591      dc.w -154
00000F04= FF63                    1592      dc.w -157
00000F06= FF5F                    1593      dc.w -161
00000F08= FF5C                    1594      dc.w -164
00000F0A= FF59                    1595      dc.w -167
00000F0C= FF55                    1596      dc.w -171
00000F0E= FF52                    1597      dc.w -174
00000F10= FF4F                    1598      dc.w -177
00000F12= FF4B                    1599      dc.w -181
00000F14= FF48                    1600      dc.w -184
00000F16= FF45                    1601      dc.w -187
00000F18= FF42                    1602      dc.w -190
00000F1A= FF3F                    1603      dc.w -193
00000F1C= FF3C                    1604      dc.w -196
00000F1E= FF3A                    1605      dc.w -198
00000F20= FF37                    1606      dc.w -201
00000F22= FF34                    1607      dc.w -204
00000F24= FF31                    1608      dc.w -207
00000F26= FF2F                    1609      dc.w -209
00000F28= FF2C                    1610      dc.w -212
00000F2A= FF2A                    1611      dc.w -214
00000F2C= FF27                    1612      dc.w -217
00000F2E= FF25                    1613      dc.w -219
00000F30= FF23                    1614      dc.w -221
00000F32= FF21                    1615      dc.w -223
00000F34= FF1E                    1616      dc.w -226
00000F36= FF1C                    1617      dc.w -228
00000F38= FF1A                    1618      dc.w -230
00000F3A= FF18                    1619      dc.w -232
00000F3C= FF17                    1620      dc.w -233
00000F3E= FF15                    1621      dc.w -235
00000F40= FF13                    1622      dc.w -237
00000F42= FF12                    1623      dc.w -238
00000F44= FF10                    1624      dc.w -240
00000F46= FF0E                    1625      dc.w -242
00000F48= FF0D                    1626      dc.w -243
00000F4A= FF0C                    1627      dc.w -244
00000F4C= FF0A                    1628      dc.w -246
00000F4E= FF09                    1629      dc.w -247
00000F50= FF08                    1630      dc.w -248
00000F52= FF07                    1631      dc.w -249
00000F54= FF06                    1632      dc.w -250
00000F56= FF05                    1633      dc.w -251
00000F58= FF04                    1634      dc.w -252
00000F5A= FF04                    1635      dc.w -252
00000F5C= FF03                    1636      dc.w -253
00000F5E= FF02                    1637      dc.w -254
00000F60= FF02                    1638      dc.w -254
00000F62= FF01                    1639      dc.w -255
00000F64= FF01                    1640      dc.w -255
00000F66= FF01                    1641      dc.w -255
00000F68= FF01                    1642      dc.w -255
00000F6A= FF01                    1643      dc.w -255
00000F6C= FF01                    1644      dc.w -255
00000F6E= FF01                    1645      dc.w -255
00000F70= FF01                    1646      dc.w -255
00000F72= FF01                    1647      dc.w -255
00000F74= FF01                    1648      dc.w -255
00000F76= FF01                    1649      dc.w -255
00000F78= FF02                    1650      dc.w -254
00000F7A= FF02                    1651      dc.w -254
00000F7C= FF03                    1652      dc.w -253
00000F7E= FF04                    1653      dc.w -252
00000F80= FF04                    1654      dc.w -252
00000F82= FF05                    1655      dc.w -251
00000F84= FF06                    1656      dc.w -250
00000F86= FF07                    1657      dc.w -249
00000F88= FF08                    1658      dc.w -248
00000F8A= FF09                    1659      dc.w -247
00000F8C= FF0A                    1660      dc.w -246
00000F8E= FF0C                    1661      dc.w -244
00000F90= FF0D                    1662      dc.w -243
00000F92= FF0E                    1663      dc.w -242
00000F94= FF10                    1664      dc.w -240
00000F96= FF12                    1665      dc.w -238
00000F98= FF13                    1666      dc.w -237
00000F9A= FF15                    1667      dc.w -235
00000F9C= FF17                    1668      dc.w -233
00000F9E= FF18                    1669      dc.w -232
00000FA0= FF1A                    1670      dc.w -230
00000FA2= FF1C                    1671      dc.w -228
00000FA4= FF1E                    1672      dc.w -226
00000FA6= FF21                    1673      dc.w -223
00000FA8= FF23                    1674      dc.w -221
00000FAA= FF25                    1675      dc.w -219
00000FAC= FF27                    1676      dc.w -217
00000FAE= FF2A                    1677      dc.w -214
00000FB0= FF2C                    1678      dc.w -212
00000FB2= FF2F                    1679      dc.w -209
00000FB4= FF31                    1680      dc.w -207
00000FB6= FF34                    1681      dc.w -204
00000FB8= FF37                    1682      dc.w -201
00000FBA= FF3A                    1683      dc.w -198
00000FBC= FF3C                    1684      dc.w -196
00000FBE= FF3F                    1685      dc.w -193
00000FC0= FF42                    1686      dc.w -190
00000FC2= FF45                    1687      dc.w -187
00000FC4= FF48                    1688      dc.w -184
00000FC6= FF4B                    1689      dc.w -181
00000FC8= FF4F                    1690      dc.w -177
00000FCA= FF52                    1691      dc.w -174
00000FCC= FF55                    1692      dc.w -171
00000FCE= FF59                    1693      dc.w -167
00000FD0= FF5C                    1694      dc.w -164
00000FD2= FF5F                    1695      dc.w -161
00000FD4= FF63                    1696      dc.w -157
00000FD6= FF66                    1697      dc.w -154
00000FD8= FF6A                    1698      dc.w -150
00000FDA= FF6E                    1699      dc.w -146
00000FDC= FF71                    1700      dc.w -143
00000FDE= FF75                    1701      dc.w -139
00000FE0= FF79                    1702      dc.w -135
00000FE2= FF7D                    1703      dc.w -131
00000FE4= FF81                    1704      dc.w -127
00000FE6= FF84                    1705      dc.w -124
00000FE8= FF88                    1706      dc.w -120
00000FEA= FF8C                    1707      dc.w -116
00000FEC= FF90                    1708      dc.w -112
00000FEE= FF94                    1709      dc.w -108
00000FF0= FF98                    1710      dc.w -104
00000FF2= FF9C                    1711      dc.w -100
00000FF4= FFA1                    1712      dc.w -95
00000FF6= FFA5                    1713      dc.w -91
00000FF8= FFA9                    1714      dc.w -87
00000FFA= FFAD                    1715      dc.w -83
00000FFC= FFB1                    1716      dc.w -79
00000FFE= FFB6                    1717      dc.w -74
00001000= FFBA                    1718      dc.w -70
00001002= FFBE                    1719      dc.w -66
00001004= FFC3                    1720      dc.w -61
00001006= FFC7                    1721      dc.w -57
00001008= FFCB                    1722      dc.w -53
0000100A= FFD0                    1723      dc.w -48
0000100C= FFD4                    1724      dc.w -44
0000100E= FFD8                    1725      dc.w -40
00001010= FFDD                    1726      dc.w -35
00001012= FFE1                    1727      dc.w -31
00001014= FFE6                    1728      dc.w -26
00001016= FFEA                    1729      dc.w -22
00001018= FFEF                    1730      dc.w -17
0000101A= FFF3                    1731      dc.w -13
0000101C= FFF8                    1732      dc.w -8
0000101E= FFFC                    1733      dc.w -4
00001020= 0000                    1734      dc.w 0
00001022= 0004                    1735      dc.w 4
00001024= 0008                    1736      dc.w 8
00001026= 000D                    1737      dc.w 13
00001028= 0011                    1738      dc.w 17
0000102A= 0016                    1739      dc.w 22
0000102C= 001A                    1740      dc.w 26
0000102E= 001F                    1741      dc.w 31
00001030= 0023                    1742      dc.w 35
00001032= 0028                    1743      dc.w 40
00001034= 002C                    1744      dc.w 44
00001036= 0030                    1745      dc.w 48
00001038= 0035                    1746      dc.w 53
0000103A= 0039                    1747      dc.w 57
0000103C= 003D                    1748      dc.w 61
0000103E= 0042                    1749      dc.w 66
00001040= 0046                    1750      dc.w 70
00001042= 004A                    1751      dc.w 74
00001044= 004F                    1752      dc.w 79
00001046= 0053                    1753      dc.w 83
00001048= 0057                    1754      dc.w 87
0000104A= 005B                    1755      dc.w 91
0000104C= 005F                    1756      dc.w 95
0000104E= 0064                    1757      dc.w 100
00001050= 0068                    1758      dc.w 104
00001052= 006C                    1759      dc.w 108
00001054= 0070                    1760      dc.w 112
00001056= 0074                    1761      dc.w 116
00001058= 0078                    1762      dc.w 120
0000105A= 007C                    1763      dc.w 124
0000105C= 0080                    1764      dc.w 128
0000105E= 0083                    1765      dc.w 131
00001060= 0087                    1766      dc.w 135
00001062= 008B                    1767      dc.w 139
00001064= 008F                    1768      dc.w 143
00001066= 0092                    1769      dc.w 146
00001068= 0096                    1770      dc.w 150
0000106A= 009A                    1771      dc.w 154
0000106C= 009D                    1772      dc.w 157
0000106E= 00A1                    1773      dc.w 161
00001070= 00A4                    1774      dc.w 164
00001072= 00A7                    1775      dc.w 167
00001074= 00AB                    1776      dc.w 171
00001076= 00AE                    1777      dc.w 174
00001078= 00B1                    1778      dc.w 177
0000107A= 00B5                    1779      dc.w 181
0000107C= 00B8                    1780      dc.w 184
0000107E= 00BB                    1781      dc.w 187
00001080= 00BE                    1782      dc.w 190
00001082= 00C1                    1783      dc.w 193
00001084= 00C4                    1784      dc.w 196
00001086= 00C6                    1785      dc.w 198
00001088= 00C9                    1786      dc.w 201
0000108A= 00CC                    1787      dc.w 204
0000108C= 00CF                    1788      dc.w 207
0000108E= 00D1                    1789      dc.w 209
00001090= 00D4                    1790      dc.w 212
00001092= 00D6                    1791      dc.w 214
00001094= 00D9                    1792      dc.w 217
00001096= 00DB                    1793      dc.w 219
00001098= 00DD                    1794      dc.w 221
0000109A= 00DF                    1795      dc.w 223
0000109C= 00E2                    1796      dc.w 226
0000109E= 00E4                    1797      dc.w 228
000010A0= 00E6                    1798      dc.w 230
000010A2= 00E8                    1799      dc.w 232
000010A4= 00E9                    1800      dc.w 233
000010A6= 00EB                    1801      dc.w 235
000010A8= 00ED                    1802      dc.w 237
000010AA= 00EE                    1803      dc.w 238
000010AC= 00F0                    1804      dc.w 240
000010AE= 00F2                    1805      dc.w 242
000010B0= 00F3                    1806      dc.w 243
000010B2= 00F4                    1807      dc.w 244
000010B4= 00F6                    1808      dc.w 246
000010B6= 00F7                    1809      dc.w 247
000010B8= 00F8                    1810      dc.w 248
000010BA= 00F9                    1811      dc.w 249
000010BC= 00FA                    1812      dc.w 250
000010BE= 00FB                    1813      dc.w 251
000010C0= 00FC                    1814      dc.w 252
000010C2= 00FC                    1815      dc.w 252
000010C4= 00FD                    1816      dc.w 253
000010C6= 00FE                    1817      dc.w 254
000010C8= 00FE                    1818      dc.w 254
000010CA= 00FF                    1819      dc.w 255
000010CC= 00FF                    1820      dc.w 255
000010CE= 00FF                    1821      dc.w 255
000010D0= 00FF                    1822      dc.w 255
000010D2= 00FF                    1823      dc.w 255
000010D4                          1824  
000010D4                          1825  SqrtTable:
000010D4= 0000                    1826      dc.w 0 ;0
000010D6= 0100                    1827      dc.w 256 ;1
000010D8= 016A                    1828      dc.w 362 ;2
000010DA= 01BB                    1829      dc.w 443 ;3
000010DC= 0200                    1830      dc.w 512 ;4
000010DE= 023C                    1831      dc.w 572 ;5
000010E0= 0273                    1832      dc.w 627 ;6
000010E2= 02A5                    1833      dc.w 677 ;7
000010E4= 02D4                    1834      dc.w 724 ;8
000010E6= 0300                    1835      dc.w 768 ;9
000010E8= 0329                    1836      dc.w 809 ;10
000010EA= 0351                    1837      dc.w 849 ;11
000010EC= 0376                    1838      dc.w 886 ;12
000010EE= 039B                    1839      dc.w 923 ;13
000010F0= 03BD                    1840      dc.w 957 ;14
000010F2= 03DF                    1841      dc.w 991 ;15
000010F4= 0400                    1842      dc.w 1024 ;16
000010F6= 041F                    1843      dc.w 1055 ;17
000010F8= 043E                    1844      dc.w 1086 ;18
000010FA= 045B                    1845      dc.w 1115 ;19
000010FC= 0478                    1846      dc.w 1144 ;20
000010FE= 0495                    1847      dc.w 1173 ;21
00001100= 04B0                    1848      dc.w 1200 ;22
00001102= 04CB                    1849      dc.w 1227 ;23
00001104= 04E6                    1850      dc.w 1254 ;24
00001106= 0500                    1851      dc.w 1280 ;25
00001108= 0519                    1852      dc.w 1305 ;26
0000110A= 0532                    1853      dc.w 1330 ;27
0000110C= 054A                    1854      dc.w 1354 ;28
0000110E= 0562                    1855      dc.w 1378 ;29
00001110= 057A                    1856      dc.w 1402 ;30
00001112= 0591                    1857      dc.w 1425 ;31
00001114= 05A8                    1858      dc.w 1448 ;32
00001116= 05BE                    1859      dc.w 1470 ;33
00001118= 05D4                    1860      dc.w 1492 ;34
0000111A= 05EA                    1861      dc.w 1514 ;35
0000111C= 0600                    1862      dc.w 1536 ;36
0000111E= 0615                    1863      dc.w 1557 ;37
00001120= 062A                    1864      dc.w 1578 ;38
00001122= 063E                    1865      dc.w 1598 ;39
00001124= 0653                    1866      dc.w 1619 ;40
00001126= 0667                    1867      dc.w 1639 ;41
00001128= 067B                    1868      dc.w 1659 ;42
0000112A= 068E                    1869      dc.w 1678 ;43
0000112C= 06A2                    1870      dc.w 1698 ;44
0000112E= 06B5                    1871      dc.w 1717 ;45
00001130= 06C8                    1872      dc.w 1736 ;46
00001132= 06DB                    1873      dc.w 1755 ;47
00001134= 06ED                    1874      dc.w 1773 ;48
00001136= 0700                    1875      dc.w 1792 ;49
00001138= 0712                    1876      dc.w 1810 ;50
0000113A= 0724                    1877      dc.w 1828 ;51
0000113C= 0736                    1878      dc.w 1846 ;52
0000113E= 0747                    1879      dc.w 1863 ;53
00001140= 0759                    1880      dc.w 1881 ;54
00001142= 076A                    1881      dc.w 1898 ;55
00001144= 077B                    1882      dc.w 1915 ;56
00001146= 078C                    1883      dc.w 1932 ;57
00001148= 079D                    1884      dc.w 1949 ;58
0000114A= 07AE                    1885      dc.w 1966 ;59
0000114C= 07BE                    1886      dc.w 1982 ;60
0000114E= 07CF                    1887      dc.w 1999 ;61
00001150= 07DF                    1888      dc.w 2015 ;62
00001152= 07EF                    1889      dc.w 2031 ;63
00001154= 0800                    1890      dc.w 2048 ;64
00001156= 080F                    1891      dc.w 2063 ;65
00001158= 081F                    1892      dc.w 2079 ;66
0000115A= 082F                    1893      dc.w 2095 ;67
0000115C= 083F                    1894      dc.w 2111 ;68
0000115E= 084E                    1895      dc.w 2126 ;69
00001160= 085D                    1896      dc.w 2141 ;70
00001162= 086D                    1897      dc.w 2157 ;71
00001164= 087C                    1898      dc.w 2172 ;72
00001166= 088B                    1899      dc.w 2187 ;73
00001168= 089A                    1900      dc.w 2202 ;74
0000116A= 08A9                    1901      dc.w 2217 ;75
0000116C= 08B7                    1902      dc.w 2231 ;76
0000116E= 08C6                    1903      dc.w 2246 ;77
00001170= 08D4                    1904      dc.w 2260 ;78
00001172= 08E3                    1905      dc.w 2275 ;79
00001174= 08F1                    1906      dc.w 2289 ;80
00001176= 0900                    1907      dc.w 2304 ;81
00001178= 090E                    1908      dc.w 2318 ;82
0000117A= 091C                    1909      dc.w 2332 ;83
0000117C= 092A                    1910      dc.w 2346 ;84
0000117E= 0938                    1911      dc.w 2360 ;85
00001180= 0946                    1912      dc.w 2374 ;86
00001182= 0953                    1913      dc.w 2387 ;87
00001184= 0961                    1914      dc.w 2401 ;88
00001186= 096F                    1915      dc.w 2415 ;89
00001188= 097C                    1916      dc.w 2428 ;90
0000118A= 098A                    1917      dc.w 2442 ;91
0000118C= 0997                    1918      dc.w 2455 ;92
0000118E= 09A4                    1919      dc.w 2468 ;93
00001190= 09B2                    1920      dc.w 2482 ;94
00001192= 09BF                    1921      dc.w 2495 ;95
00001194= 09CC                    1922      dc.w 2508 ;96
00001196= 09D9                    1923      dc.w 2521 ;97
00001198= 09E6                    1924      dc.w 2534 ;98
0000119A= 09F3                    1925      dc.w 2547 ;99
0000119C= 0A00                    1926      dc.w 2560 ;100
0000119E= 0A0C                    1927      dc.w 2572 ;101
000011A0= 0A19                    1928      dc.w 2585 ;102
000011A2= 0A26                    1929      dc.w 2598 ;103
000011A4= 0A32                    1930      dc.w 2610 ;104
000011A6= 0A3F                    1931      dc.w 2623 ;105
000011A8= 0A4B                    1932      dc.w 2635 ;106
000011AA= 0A58                    1933      dc.w 2648 ;107
000011AC= 0A64                    1934      dc.w 2660 ;108
000011AE= 0A70                    1935      dc.w 2672 ;109
000011B0= 0A7C                    1936      dc.w 2684 ;110
000011B2= 0A89                    1937      dc.w 2697 ;111
000011B4= 0A95                    1938      dc.w 2709 ;112
000011B6= 0AA1                    1939      dc.w 2721 ;113
000011B8= 0AAD                    1940      dc.w 2733 ;114
000011BA= 0AB9                    1941      dc.w 2745 ;115
000011BC= 0AC5                    1942      dc.w 2757 ;116
000011BE= 0AD1                    1943      dc.w 2769 ;117
000011C0= 0ADC                    1944      dc.w 2780 ;118
000011C2= 0AE8                    1945      dc.w 2792 ;119
000011C4= 0AF4                    1946      dc.w 2804 ;120
000011C6= 0B00                    1947      dc.w 2816 ;121
000011C8= 0B0B                    1948      dc.w 2827 ;122
000011CA= 0B17                    1949      dc.w 2839 ;123
000011CC= 0B22                    1950      dc.w 2850 ;124
000011CE= 0B2E                    1951      dc.w 2862 ;125
000011D0= 0B39                    1952      dc.w 2873 ;126
000011D2= 0B44                    1953      dc.w 2884 ;127
000011D4= 0B50                    1954      dc.w 2896 ;128
000011D6= 0B5B                    1955      dc.w 2907 ;129
000011D6= 0B5B                    1956  -------------------- end include --------------------
000011D8                          1957      INCLUDE "source/ball.asm"
000011D8                          1958  ; ++++++ STRUCT ++++++
000011D8                          1959  ; Ball 
000011D8                          1960  ;
000011D8                          1961  ; size  = 32 bytes 
000011D8                          1962  ; 
000011D8                          1963  ; 0(Ball)  = x position (24.8)
000011D8                          1964  ; 4(Ball)  = y position (24.8)
000011D8                          1965  ; 8(Ball)  = width (24.8)
000011D8                          1966  ; 12(Ball) = height (24.8)
000011D8                          1967  ; 16(Ball) = x velocity (24.8)
000011D8                          1968  ; 20(Ball) = y velocity (24.8)
000011D8                          1969  ; ++++++++++++++++++++
000011D8  =00000000               1970  M_BALL_RECT   EQU 0 
000011D8  =00000000               1971  M_BALL_X      EQU 0 
000011D8  =00000004               1972  M_BALL_Y      EQU 4 
000011D8  =00000008               1973  M_BALL_WIDTH  EQU 8 
000011D8  =0000000C               1974  M_BALL_HEIGHT EQU 12 
000011D8  =00000010               1975  M_BALL_XVEL   EQU 16 
000011D8  =00000014               1976  M_BALL_YVEL   EQU 20 
000011D8                          1977  
000011D8                          1978  ; ------ SUBROUTINE ------
000011D8                          1979  ; Ball_Init
000011D8                          1980  ;
000011D8                          1981  ; Initializes a ball struct with standard 
000011D8                          1982  ; starting values
000011D8                          1983  ; 
000011D8                          1984  ; Input:
000011D8                          1985  ;   a0.l = pointer to ball struct 
000011D8                          1986  ; ------------------------  
000011D8                          1987  Ball_Init:
000011D8  217C 00000000 0000      1988      move.l #0, M_BALL_X(a0)
000011E0  217C 00000000 0004      1989      move.l #0, M_BALL_Y(a0)
000011E8  217C 00000800 0008      1990      move.l #BALL_WIDTH, M_BALL_WIDTH(a0)
000011F0  217C 00000800 000C      1991      move.l #BALL_HEIGHT, M_BALL_HEIGHT(a0)
000011F8  217C 00000000 0010      1992      move.l #0, M_BALL_XVEL(a0)
00001200  217C 00000000 0014      1993      move.l #0, M_BALL_YVEL(a0)
00001208  4E75                    1994      rts 
0000120A                          1995  
0000120A                          1996  ; ------ SUBROUTINE ------
0000120A                          1997  ; Ball_Update
0000120A                          1998  ;
0000120A                          1999  ; Applies gravity to the ball. Updates the position
0000120A                          2000  ; of the ball. And handles conflicts with any pegs.
0000120A                          2001  ; 
0000120A                          2002  ; Input:
0000120A                          2003  ;   a0.l = pointer to ball struct 
0000120A                          2004  ; ------------------------  
0000120A                          2005  Ball_Update:
0000120A                          2006  
0000120A  2F08                    2007      move.l a0, -(sp)
0000120C  4EB9 000012C6           2008      jsr Ball_Hide
00001212  205F                    2009      move.l (sp)+, a0
00001214                          2010  
00001214                          2011      ; Apply gravity 
00001214  2028 0014               2012      move.l M_BALL_YVEL(a0), d0 
00001218  7212                    2013      move.l #GRAVITY, d1 
0000121A  D081                    2014      add.l d1, d0 
0000121C  2140 0014               2015      move.l d0, M_BALL_YVEL(a0)
00001220                          2016      
00001220                          2017      ; Update the position of ball
00001220  2028 0010               2018      move.l M_BALL_XVEL(a0), d0 
00001224  2228 0000               2019      move.l M_BALL_X(a0), d1 
00001228  D280                    2020      add.l d0, d1 
0000122A  2141 0000               2021      move.l d1, M_BALL_X(a0)
0000122E                          2022      
0000122E  2028 0014               2023      move.l M_BALL_YVEL(a0), d0 
00001232  2228 0004               2024      move.l M_BALL_Y(a0), d1 
00001236  D280                    2025      add.l d0, d1 
00001238  2141 0004               2026      move.l d1, M_BALL_Y(a0)
0000123C                          2027      
0000123C                          2028      ; Check if ball goes past left or right bounds 
0000123C  2028 0000               2029      move.l M_BALL_X(a0), d0 
00001240  0C80 00000000           2030      cmpi.l #LEFT_BOUND, d0 
00001246  6D00 0012               2031      blt .bounce_left
0000124A  0C80 00013800           2032      cmpi.l #RIGHT_BOUND, d0 
00001250  6E00 0016               2033      bgt .bounce_right
00001254  4EF9 0000127A           2034      jmp .check_hit_top 
0000125A                          2035      
0000125A                          2036  .bounce_left
0000125A  217C 00000000 0000      2037      move.l #LEFT_BOUND, M_BALL_X(a0)
00001262  4EF9 00001270           2038      jmp .reverse_xvel
00001268                          2039      
00001268                          2040  .bounce_right 
00001268  217C 00013800 0000      2041      move.l #RIGHT_BOUND, M_BALL_X(a0)
00001270                          2042  
00001270                          2043  .reverse_xvel
00001270  2028 0010               2044      move.l M_BALL_XVEL(a0), d0 
00001274  4480                    2045      neg.l d0 
00001276  2140 0010               2046      move.l d0, M_BALL_XVEL(a0)
0000127A                          2047      
0000127A                          2048  .check_hit_top
0000127A                          2049      ; Check if ball goes past upper bounds 
0000127A  2028 0004               2050      move.l M_BALL_Y(a0), d0 
0000127E  0C80 00000000           2051      cmpi.l #0, d0 
00001284  6C00 000E               2052      bge .check_collisions
00001288                          2053      
00001288                          2054      ; ball hit the top. Reverse y vel 
00001288  217C 00000000 0004      2055      move.l #0, M_BALL_Y(a0)
00001290  44A8 0014               2056      neg.l M_BALL_YVEL(a0)
00001294                          2057      
00001294                          2058  .check_collisions
00001294                          2059      ; Lastly, check for any peg collisions 
00001294  2F08                    2060      move.l a0, -(sp)            ; save a0
00001296  4EB9 000012EE           2061      jsr _Ball_CheckPegCollisions
0000129C  205F                    2062      move.l (sp)+, a0              ; restore a0 
0000129E                          2063      
0000129E                          2064  .update_sprite
0000129E                          2065      ; Update sprite 
0000129E                          2066      ; don't worry about a0 getting trashed
0000129E                          2067      ; as this will be the last step of Update
0000129E  4EB9 000012A6           2068      jsr Ball_Draw
000012A4                          2069      
000012A4  4E75                    2070      rts 
000012A6                          2071  
000012A6                          2072  ; ------ SUBROUTINE ------
000012A6                          2073  ; Ball_Draw
000012A6                          2074  ;
000012A6                          2075  ; Draws the ball at location x/y.
000012A6                          2076  ; 
000012A6                          2077  ; Input:
000012A6                          2078  ;   a0.l = pointer to ball struct 
000012A6                          2079  ; ------------------------  
000012A6                          2080  Ball_Draw:
000012A6  7000                    2081      move.l #0, d0             ; param d0: chunk x coordinate
000012A8  7200                    2082      move.l #0, d1             ; param d1: chunk y coordinate 
000012AA  7408                    2083      move.l #8, d2            ; param d2: chunk width 
000012AC  7608                    2084      move.l #8, d3            ; param d3: chunk height 
000012AE  2828 0000               2085      move.l M_BALL_X(a0), d4  ; param d4: screen x coordinate
000012B2  E084                    2086      asr.l #8, d4              ; convert from fixed to int 
000012B4  2A28 0004               2087      move.l M_BALL_Y(a0), d5  ; param d5: screen y coordinate 
000012B8  E085                    2088      asr.l #8, d5              ; convert from fixed to int 
000012BA  41F9 0000A3C4           2089      lea BallBitmap, a0       ; param a0: pointer to bitmap file data
000012C0  4EB8 04A2               2090      jsr RenderBitmap16 
000012C4  4E75                    2091      rts 
000012C6                          2092      
000012C6                          2093  Ball_Hide:
000012C6  2028 0000               2094      move.l M_BALL_X(a0), d0  ; param d0: chunk x coordinate
000012CA  E080                    2095      asr.l #8, d0              ; convert from fixed to int 
000012CC  2228 0004               2096      move.l M_BALL_Y(a0), d1  ; param d1: chunk y coordinate
000012D0  E081                    2097      asr.l #8, d1              ; convert from fixed to int     
000012D2  7408                    2098      move.l #8, d2            ; param d2: chunk width 
000012D4  7608                    2099      move.l #8, d3            ; param d3: chunk height 
000012D6  2828 0000               2100      move.l M_BALL_X(a0), d4  ; param d4: screen x coordinate
000012DA  E084                    2101      asr.l #8, d4              ; convert from fixed to int 
000012DC  2A28 0004               2102      move.l M_BALL_Y(a0), d5  ; param d5: screen y coordinate 
000012E0  E085                    2103      asr.l #8, d5              ; convert from fixed to int 
000012E2  41F9 0000A570           2104      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
000012E8  4EB8 04A2               2105      jsr RenderBitmap16 
000012EC  4E75                    2106      rts 
000012EE                          2107  
000012EE                          2108  ; ------ SUBROUTINE ------
000012EE                          2109  ; _Ball_CheckPegCollisions
000012EE                          2110  ;
000012EE                          2111  ; Private subroutine that iterates through 
000012EE                          2112  ; the peg list and checks if the ball is
000012EE                          2113  ; overlapping any pegs. Handles collision 
000012EE                          2114  ; when ball is overlapping a peg.
000012EE                          2115  ;
000012EE                          2116  ; Input:
000012EE                          2117  ;   a0.l = pointer to ball struct 
000012EE                          2118  ; ------------------------      
000012EE                          2119  _Ball_CheckPegCollisions:
000012EE                          2120      
000012EE                          2121  REGS REG a0/a1/d0 
000012EE                          2122  
000012EE  43F8 0006               2123      lea Pegs, a1            ; get the peg array 
000012F2  4280                    2124      clr.l d0                ; d0 = loop counter 
000012F4                          2125      
000012F4                          2126  .loop
000012F4                          2127      
000012F4  1229 0011               2128      move.b M_PEG_ACTIVE(a1), d1 
000012F8  4A01                    2129      tst.b d1
000012FA  6700 00C2               2130      beq .continue           ; continue if peg is inactive 
000012FE                          2131      
000012FE                          2132      ; Otherwise, peg is active. So check if the ball 
000012FE                          2133      ; is hitting it. 
000012FE                          2134      ; save regs 
000012FE  48E7 80C0               2135      movem.l REGS, -(sp) 
00001302  4EB9 000014FC           2136      jsr Rect_OverlapsRect
00001308  2200                    2137      move.l d0, d1           ; save result in d1 
0000130A                          2138      ; restore regs 
0000130A  4CDF 0301               2139      movem.l (sp)+, REGS
0000130E                          2140      
0000130E  4A81                    2141      tst.l d1 
00001310  6700 00AC               2142      beq .continue 
00001314                          2143      
00001314                          2144      ; So after a bunch of testing and experimenting, I've decided to 
00001314                          2145      ; use a very basic collision model where the ball bounces in the 
00001314                          2146      ; exact same direct as the vector between the ball's position 
00001314                          2147      ; and the peg's position. 
00001314                          2148      
00001314                          2149      ; Calculate the displacement vector (dispVec)
00001314                          2150      ; The dispVec is the vector difference of the 
00001314                          2151      ; positions of the ball and peg. The dispVec is 
00001314                          2152      ; important because it shows what direction the ball 
00001314                          2153      ; is from the peg.
00001314  2228 0000               2154      move.l M_BALL_X(a0), d1 
00001318  2428 0004               2155      move.l M_BALL_Y(a0), d2
0000131C  2629 0000               2156      move.l M_PEG_X(a1), d3 
00001320  2829 0004               2157      move.l M_PEG_Y(a1), d4 
00001324                          2158      
00001324                          2159      ; subtract peg pos from ball pos 
00001324  9283                    2160      sub.l d3, d1
00001326  9484                    2161      sub.l d4, d2                ; <d1, d2> is the displacement vector now
00001328                          2162      
00001328  2628 0010               2163      move.l M_BALL_XVEL(a0), d3 
0000132C  2828 0014               2164      move.l M_BALL_YVEL(a0), d4  ; <d3, d4> is the velocity vector 
00001330                          2165      
00001330                          2166      ; Get the magnitude of the velocity 
00001330  2A03                    2167      move.l d3, d5 
00001332  C7C5                    2168      muls d5, d3     ; square the xvel
00001334  E083                    2169      asr.l #8, d3    ; return to 24.8 format 
00001336  2A04                    2170      move.l d4, d5 
00001338  C9C5                    2171      muls d5, d4     ; square the yvel 
0000133A  E084                    2172      asr.l #8, d4    ; return to 24.8 format 
0000133C  D684                    2173      add.l d4, d3    ; add the squares of the x/y components 
0000133E                          2174      
0000133E                          2175      ; clamp the magnitude so it stays within sqrt table 
0000133E  E083                    2176      asr.l #8, d3             ; convert to int 
00001340  0C83 00000080           2177      cmpi.l #MAX_SQRT_INPUT,d3 
00001346  6500 0008               2178      blo .no_vel_clamp
0000134A  263C 00000080           2179      move.l #MAX_SQRT_INPUT, d3 
00001350                          2180  .no_vel_clamp
00001350  E383                    2181      asl.l #1, d3 
00001352  47F8 10D4               2182      lea SqrtTable, a3 
00001356  D7C3                    2183      add.l d3, a3 
00001358  4283                    2184      clr.l d3 
0000135A  3613                    2185      move.w (a3), d3   ; d3 = magnitude of velocity 
0000135C                          2186      
0000135C                          2187      ; Dampen the velocity a tiny bit for some realistic collision 
0000135C  283C 000000E0           2188      move.l #DAMPENING_COEFFICIENT, d4 
00001362  C7C4                    2189      muls d4, d3       
00001364  E083                    2190      asr.l #8, d3        ; d3 = the new speed of the ball
00001366                          2191      
00001366                          2192      ; Normalize the displacement vector for performing projection 
00001366                          2193      ; first step is to get magnitude squared 
00001366  2A01                    2194      move.l d1, d5 
00001368  CBC1                    2195      muls d1, d5
0000136A  E085                    2196      asr.l #8, d5 
0000136C  2C02                    2197      move.l d2, d6
0000136E  CDC2                    2198      muls d2, d6 
00001370  E086                    2199      asr.l #8, d6
00001372  DA86                    2200      add.l d6, d5        ; d5 = magnitude squared 
00001374                          2201      
00001374                          2202      ; Next step to normalizing is to find the magnitude (sqrt of magnitude squared)
00001374  E085                    2203      asr.l #8, d5        ; convert mag squared from 24.8 to int 
00001376  0C85 00000080           2204      cmpi.l #MAX_SQRT_INPUT, d5 
0000137C  6500 0008               2205      blo .skip_mag_clamp
00001380  2A3C 00000080           2206      move.l #MAX_SQRT_INPUT, d5  ; clamp if outside of table index range 
00001386                          2207  .skip_mag_clamp
00001386  E38D                    2208      lsl.l #1, d5                ; get the index into the sqrt table in bytes 
00001388  47F8 10D4               2209      lea SqrtTable, a3 
0000138C  D7C5                    2210      add.l d5, a3 
0000138E  4285                    2211      clr.l d5                    ; clear the long because we are about to store a positive word in this reg 
00001390  3A13                    2212      move.w (a3), d5             ; d5 = magnitude 
00001392                          2213      
00001392                          2214      ; Last step of normalizing is to divide dispVec by the magnitude 
00001392  E181                    2215      asl.l #8, d1        ; the divors can be in 16.16 format 
00001394  E182                    2216      asl.l #8, d2 
00001396  83C5                    2217      divs d5, d1 
00001398  85C5                    2218      divs d5, d2 
0000139A  48C1                    2219      ext.l d1            ; now d1 should be in 24.8
0000139C  48C2                    2220      ext.l d2            ; and d2 should be in 24.8
0000139E                          2221      
0000139E                          2222      ; <d1, d2> = the normalized displacement vector 
0000139E                          2223      ; Now (for basic collision) we can just multiply the dampened velocity 
0000139E                          2224      ; with the normalized displacement vector and then set that as the new 
0000139E                          2225      ; xvel/yvel of the ball. 
0000139E  C3C3                    2226      muls d3, d1
000013A0  E081                    2227      asr.l #8, d1 
000013A2  C5C3                    2228      muls d3, d2
000013A4  E082                    2229      asr.l #8, d2 
000013A6                          2230      
000013A6  2141 0010               2231      move.l d1, M_BALL_XVEL(a0)
000013AA  2142 0014               2232      move.l d2, M_BALL_YVEL(a0)
000013AE                          2233      
000013AE                          2234      ; Consume the peg! omnom (deactivate it and add to score)
000013AE  48E7 80C0               2235      movem.l REGS, -(sp) 
000013B2  2049                    2236      move.l a1, a0         ; put peg into a0 for param 
000013B4  4EB9 00001476           2237      jsr Peg_Consume 
000013BA  4CDF 0301               2238      movem.l (sp)+, REGS 
000013BE                          2239      
000013BE                          2240  .continue
000013BE  D3FC 00000020           2241      adda.l #PEG_DATA_SIZE, a1 
000013C4  5280                    2242      addq.l #1, d0 
000013C6  B0B8 041E               2243      cmp.l LevelPegCount, d0 
000013CA  6600 FF28               2244      bne .loop 
000013CE                          2245      
000013CE  4E75                    2246      rts 
000013CE  4E75                    2247  -------------------- end include --------------------
000013D0                          2248      INCLUDE "source/peg.asm"
000013D0                          2249  ; ++++++ STRUCT ++++++
000013D0                          2250  ; Peg  
000013D0                          2251  ;
000013D0                          2252  ; size  = 32 bytes 
000013D0                          2253  ; 
000013D0                          2254  ; 0(Peg)  = x position (24.8 long)
000013D0                          2255  ; 4(Peg)  = y position (24.8 long)
000013D0                          2256  ; 8(Peg)  = width (24.8 long)
000013D0                          2257  ; 12(Peg) = height (24.8 long)
000013D0                          2258  ; 16(Peg) = type (byte)
000013D0                          2259  ; 17(Peg) = active (byte)
000013D0                          2260  ; 18(Peg) = moving (byte)
000013D0                          2261  ; 19(Peg) = sprite index (byte)
000013D0                          2262  ; 20(Peg) = left bound (word)
000013D0                          2263  ; 22(Peg) = right bound (word)
000013D0                          2264  ; ++++++++++++++++++++
000013D0  =00000000               2265  M_PEG_RECT         EQU 0 
000013D0  =00000000               2266  M_PEG_X            EQU 0 
000013D0  =00000004               2267  M_PEG_Y            EQU 4 
000013D0  =00000008               2268  M_PEG_WIDTH        EQU 8 
000013D0  =0000000C               2269  M_PEG_HEIGHT       EQU 12 
000013D0  =00000010               2270  M_PEG_TYPE         EQU 16 
000013D0  =00000011               2271  M_PEG_ACTIVE       EQU 17
000013D0  =00000012               2272  M_PEG_MOVING       EQU 18 
000013D0  =00000013               2273  M_PEG_SPRITE_INDEX EQU 19
000013D0  =00000014               2274  M_PEG_LEFT_BOUND   EQU 20 
000013D0  =00000016               2275  M_PEG_RIGHT_BOUND  EQU 22 
000013D0                          2276  
000013D0                          2277  
000013D0                          2278  ; ------ SUBROUTINE ------
000013D0                          2279  ; Peg_Init
000013D0                          2280  ;
000013D0                          2281  ; Initializes a peg struct with standard 
000013D0                          2282  ; starting values. Defaults active to 0 
000013D0                          2283  ; 
000013D0                          2284  ; Input:
000013D0                          2285  ;   a0.l = pointer to peg struct 
000013D0                          2286  ; ------------------------  
000013D0                          2287  Peg_Init:
000013D0                          2288  
000013D0  217C FFFF9400 0000      2289      move.l #PEG_INIT_X, M_PEG_X(a0) 
000013D8  217C FFFF9400 0004      2290      move.l #PEG_INIT_Y, M_PEG_Y(a0)
000013E0  217C 00000800 0008      2291      move.l #PEG_WIDTH, M_PEG_WIDTH(a0)
000013E8  217C 00000800 000C      2292      move.l #PEG_HEIGHT, M_PEG_HEIGHT(a0)
000013F0                          2293      
000013F0  117C 0000 0010          2294      move.b #PEG_TYPE_BLUE, M_PEG_TYPE(a0)
000013F6  117C 0000 0011          2295      move.b #0, M_PEG_ACTIVE(a0)
000013FC  117C 0000 0012          2296      move.b #0, M_PEG_MOVING(a0)
00001402  117C 0002 0013          2297      move.b #PEGS_SPRITE_INDEX, M_PEG_SPRITE_INDEX(a0)
00001408                          2298      
00001408  317C 0000 0014          2299      move.w #0, M_PEG_LEFT_BOUND(a0)
0000140E  317C 0000 0016          2300      move.w #0, M_PEG_RIGHT_BOUND(a0)
00001414                          2301      
00001414  4E75                    2302      rts 
00001416                          2303  
00001416                          2304  ; ------ SUBROUTINE ------
00001416                          2305  ; Peg_Draw
00001416                          2306  ;
00001416                          2307  ; Draws the peg.
00001416                          2308  ; 
00001416                          2309  ; Input:
00001416                          2310  ;   a0.l = pointer to peg struct 
00001416                          2311  ; ------------------------      
00001416                          2312  Peg_Draw:
00001416                          2313  
00001416                          2314      ; Example usage of RenderBitmap16
00001416  7000                    2315      move.l #0, d0             ; param d0: chunk x coordinate
00001418  7200                    2316      move.l #0, d1             ; param d1: chunk y coordinate 
0000141A  7408                    2317      move.l #8, d2            ; param d2: chunk width 
0000141C  7608                    2318      move.l #8, d3            ; param d3: chunk height 
0000141E  2828 0000               2319      move.l M_PEG_X(a0), d4  ; param d4: screen x coordinate
00001422  E084                    2320      asr.l #8, d4 
00001424  2A28 0004               2321      move.l M_PEG_Y(a0), d5  ; param d5: screen y coordinate 
00001428  E085                    2322      asr.l #8, d5
0000142A  1E28 0010               2323      move.b M_PEG_TYPE(a0), d7
0000142E  0C07 0001               2324      cmpi.b #PEG_TYPE_RED, d7 
00001432  6600 000E               2325      bne .blue_peg
00001436  41F9 0000A298           2326      lea RedPegBitmap, a0 
0000143C  4EF9 00001448           2327      jmp .render
00001442                          2328  .blue_peg
00001442  41F9 0000A32E           2329      lea BluePegBitmap, a0       ; param a0: pointer to bitmap file data
00001448                          2330  .render
00001448  4EB8 04A2               2331      jsr RenderBitmap16 
0000144C                          2332      
0000144C  4E75                    2333      rts 
0000144E                          2334  
0000144E                          2335  ; ------ SUBROUTINE ------
0000144E                          2336  ; Peg_Hide
0000144E                          2337  ;
0000144E                          2338  ; Hides the peg by drawing the 
0000144E                          2339  ; background over the the peg 
0000144E                          2340  ; 
0000144E                          2341  ; Input:
0000144E                          2342  ;   a0.l = pointer to peg struct 
0000144E                          2343  ; ------------------------         
0000144E                          2344  Peg_Hide:
0000144E                          2345  
0000144E                          2346      ; Example usage of RenderBitmap16
0000144E  2028 0000               2347      move.l M_PEG_X(a0), d0  ; param d0: chunk x coordinate
00001452  E080                    2348      asr.l #8, d0 
00001454  2228 0004               2349      move.l M_PEG_Y(a0), d1  ; param d1: chunk y coordinate 
00001458  E081                    2350      asr.l #8, d1 
0000145A  7408                    2351      move.l #8, d2            ; param d2: chunk width 
0000145C  7608                    2352      move.l #8, d3            ; param d3: chunk height 
0000145E  2828 0000               2353      move.l M_PEG_X(a0), d4  ; param d4: screen x coordinate
00001462  E084                    2354      asr.l #8, d4 
00001464  2A28 0004               2355      move.l M_PEG_Y(a0), d5  ; param d5: screen y coordinate 
00001468  E085                    2356      asr.l #8, d5 
0000146A  41F9 0000A570           2357      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
00001470  4EB8 04A2               2358      jsr RenderBitmap16 
00001474  4E75                    2359      rts 
00001476                          2360  
00001476                          2361  ; ------ SUBROUTINE ------
00001476                          2362  ; Peg_Consume
00001476                          2363  ;
00001476                          2364  ; Deactivates the peg and adds to the score
00001476                          2365  ; based on RedPegCount
00001476                          2366  ; 
00001476                          2367  ; Input:
00001476                          2368  ;   a0.l = pointer to peg struct 
00001476                          2369  ; ------------------------  
00001476                          2370  Peg_Consume:
00001476                          2371  
00001476                          2372      ; Now mark the peg as inactive and hide the sprite 
00001476  117C 0000 0011          2373      move.b #0, M_PEG_ACTIVE(a0)
0000147C                          2374      
0000147C                          2375      ; Draw background over where this peg was 
0000147C  2F08                    2376      move.l a0, -(sp)
0000147E  4EB8 144E               2377      jsr Peg_Hide 
00001482  205F                    2378      move.l (sp)+, a0 
00001484                          2379      
00001484                          2380      ; Check if peg was a red peg, if so, dec the 
00001484                          2381      ; global red peg count 
00001484  1228 0010               2382      move.b M_PEG_TYPE(a0), d1
00001488  0C01 0001               2383      cmpi.b #PEG_TYPE_RED, d1 
0000148C  6600 0016               2384      bne .blue_peg  
00001490  2238 0432               2385      move.l RedPegCount, d1 
00001494  5381                    2386      subq.l #1, d1 
00001496  21C1 0432               2387      move.l d1, RedPegCount      ; reduce the number of red pegs 
0000149A                          2388      
0000149A                          2389      ; Add red peg score 
0000149A  54B8 043A               2390      add.l #RED_PEG_SCORE, Score 
0000149E  4EF9 000014D4           2391      jmp .return 
000014A4                          2392      
000014A4                          2393  .blue_peg 
000014A4  2038 0432               2394      move.l RedPegCount, d0
000014A8  0C80 00000002           2395      cmpi.l #LOW_RED, d0 
000014AE  6E00 000C               2396      bgt .not_low 
000014B2                          2397      
000014B2                          2398      ; Only 1 or 2 red pegs left. Add 4 points 
000014B2  58B8 043A               2399      addi.l #BLUE_PEG_LOW_SCORE, Score 
000014B6  4EF9 000014D4           2400      jmp .return 
000014BC                          2401      
000014BC                          2402  .not_low 
000014BC  0C80 00000006           2403      cmpi.l #MID_RED, d0 
000014C2  6E00 000C               2404      bgt .not_mid 
000014C6  54B8 043A               2405      addi.l #BLUE_PEG_MID_SCORE, Score 
000014CA  4EF9 000014D4           2406      jmp .return 
000014D0                          2407      
000014D0                          2408  .not_mid 
000014D0                          2409      ; Okay, so there are still a lot of red pegs on the 
000014D0                          2410      ; board. Only reward 1 point.
000014D0  52B8 043A               2411      addi.l #BLUE_PEG_HIGH_SCORE, Score 
000014D4                          2412      
000014D4                          2413  .return 
000014D4                          2414      
000014D4  4EB8 0A92               2415      jsr DrawScore 
000014D8  4E75                    2416      rts 
000014D8  4E75                    2417  -------------------- end include --------------------
000014DA                          2418      INCLUDE "source/rect.asm"
000014DA                          2419  ; ++++++ STRUCT ++++++
000014DA                          2420  ; Rect  
000014DA                          2421  ;
000014DA                          2422  ; size  = 16 bytes 
000014DA                          2423  ; 
000014DA                          2424  ; 0(Rect)  = x position (24.8 long)
000014DA                          2425  ; 4(Rect)  = y position (24.8 long)
000014DA                          2426  ; 8(Rect)  = width (24.8 long)
000014DA                          2427  ; 12(Rect) = height (24.8 long)
000014DA                          2428  ; ++++++++++++++++++++
000014DA  =00000000               2429  M_RECT_X            EQU 0 
000014DA  =00000004               2430  M_RECT_Y            EQU 4 
000014DA  =00000008               2431  M_RECT_WIDTH        EQU 8 
000014DA  =0000000C               2432  M_RECT_HEIGHT       EQU 12 
000014DA                          2433  
000014DA                          2434  ; ------ SUBROUTINE ------
000014DA                          2435  ; Rect_Init
000014DA                          2436  ;
000014DA                          2437  ; Initializes a rect struct with standard 
000014DA                          2438  ; starting values. 
000014DA                          2439  ; 
000014DA                          2440  ; Input:
000014DA                          2441  ;   a0.l = pointer to rect struct 
000014DA                          2442  ; ------------------------  
000014DA                          2443  Rect_Init:
000014DA  217C 00000000 0000      2444      move.l #$0, M_RECT_X(a0)
000014E2  217C 00000000 0004      2445      move.l #$0, M_RECT_Y(a0)
000014EA  217C 00000100 0008      2446      move.l #(1*TO_FIXED), M_RECT_WIDTH(a0)
000014F2  217C 00000100 000C      2447      move.l #(1*TO_FIXED), M_RECT_HEIGHT(a0)
000014FA  4E75                    2448      rts 
000014FC                          2449  
000014FC                          2450  
000014FC                          2451  ; ------ SUBROUTINE ------
000014FC                          2452  ; OverlapsRect
000014FC                          2453  ;
000014FC                          2454  ; Checks if this rect struct overlaps
000014FC                          2455  ; another rect struct 
000014FC                          2456  ; 
000014FC                          2457  ; Input:
000014FC                          2458  ;   a0.l = pointer to this rect 
000014FC                          2459  ;   a1.l = pointer to other rect 
000014FC                          2460  ;
000014FC                          2461  ; Output:
000014FC                          2462  ;   d0.l = 1 if rects are overlapping 
000014FC                          2463  ;          0 otherwise 
000014FC                          2464  ; ------------------------  
000014FC                          2465  Rect_OverlapsRect:
000014FC                          2466  
000014FC                          2467      ; check if this.right < other.left 
000014FC  2028 0000               2468      move.l M_RECT_X(a0), d0 
00001500  D0A8 0008               2469      add.l M_RECT_WIDTH(a0), d0 
00001504  B0A9 0000               2470      cmp.l M_RECT_X(a1), d0 
00001508  6D00 003A               2471      blt .return_false
0000150C                          2472      
0000150C                          2473      ; check if this.left > other.right 
0000150C  2028 0000               2474      move.l M_RECT_X(a0), d0
00001510  2229 0000               2475      move.l M_RECT_X(a1), d1 
00001514  D2A9 0008               2476      add.l M_RECT_WIDTH(a1), d1 
00001518  B081                    2477      cmp.l d1, d0 
0000151A  6E00 0028               2478      bgt .return_false
0000151E                          2479      
0000151E                          2480      ; check if this.bot < other.top 
0000151E  2028 0004               2481      move.l M_RECT_Y(a0), d0 
00001522  D0A8 000C               2482      add.l M_RECT_HEIGHT(a0), d0 
00001526  B0A9 0004               2483      cmp.l M_RECT_Y(a1), d0 
0000152A  6D00 0018               2484      blt .return_false
0000152E                          2485      
0000152E                          2486      ; check if this.top > other.bot 
0000152E  2028 0004               2487      move.l M_RECT_Y(a0), d0 
00001532  2229 0004               2488      move.l M_RECT_Y(a1), d1 
00001536  D2A9 000C               2489      add.l M_RECT_HEIGHT(a1), d1 
0000153A  B081                    2490      cmp.l d1, d0
0000153C  6E00 0006               2491      bgt .return_false
00001540                          2492      
00001540                          2493      ; fall-through to .return_true
00001540                          2494      
00001540                          2495  .return_true 
00001540  7001                    2496      move.l #1, d0 
00001542  4E75                    2497      rts 
00001544                          2498  
00001544                          2499  .return_false 
00001544  7000                    2500      move.l #0, d0 
00001546  4E75                    2501      rts
00001546  4E75                    2502  -------------------- end include --------------------
00001548                          2503      INCLUDE "source/saver.asm"
00001548                          2504  ; ++++++ STRUCT ++++++
00001548                          2505  ; Saver  
00001548                          2506  ;
00001548                          2507  ; size  = 32 bytes 
00001548                          2508  ; 
00001548                          2509  ; 0(Saver)  = x position (24.8 long)
00001548                          2510  ; 4(Saver)  = y position (24.8 long)
00001548                          2511  ; 8(Saver)  = width (24.8 long)
00001548                          2512  ; 12(Saver) = height (24.8 long)
00001548                          2513  ; 16(Saver) = x velocity (24.8)
00001548                          2514  ; ++++++++++++++++++++
00001548  =00000000               2515  M_SAVER_RECT         EQU 0 
00001548  =00000000               2516  M_SAVER_X            EQU 0 
00001548  =00000004               2517  M_SAVER_Y            EQU 4 
00001548  =00000008               2518  M_SAVER_WIDTH        EQU 8 
00001548  =0000000C               2519  M_SAVER_HEIGHT       EQU 12 
00001548  =00000010               2520  M_SAVER_XVEL         EQU 16 
00001548                          2521  
00001548                          2522  ; ------ SUBROUTINE ------
00001548                          2523  ; Saver_Init
00001548                          2524  ;
00001548                          2525  ; Initializes a saver struct with 
00001548                          2526  ; default stating values.
00001548                          2527  ; 
00001548                          2528  ; Input:
00001548                          2529  ;   a0.l = pointer to saver struct 
00001548                          2530  ; ------------------------  
00001548                          2531  Saver_Init:
00001548                          2532  
00001548  217C 00001400 0000      2533      move.l #SAVER_INIT_X, M_SAVER_X(a0)
00001550  217C 0000D400 0004      2534      move.l #SAVER_INIT_Y, M_SAVER_Y(a0)
00001558  217C 00002000 0008      2535      move.l #SAVER_WIDTH, M_SAVER_WIDTH(a0)
00001560  217C 00000800 000C      2536      move.l #SAVER_HEIGHT, M_SAVER_HEIGHT(a0)
00001568  217C 00000200 0010      2537      move.l #SAVER_XVEL, M_SAVER_XVEL(a0)
00001570                          2538  
00001570  4E75                    2539      rts 
00001572                          2540   
00001572                          2541  ; ------ SUBROUTINE ------
00001572                          2542  ; Saver_Draw
00001572                          2543  ;
00001572                          2544  ; Draws the saver at its current location 
00001572                          2545  ; 
00001572                          2546  ; Input:
00001572                          2547  ;   a0.l = pointer to saver struct 
00001572                          2548  ; ------------------------   
00001572                          2549  Saver_Draw:
00001572                          2550  
00001572                          2551      ; Example usage of RenderBitmap16
00001572  7000                    2552      move.l #0, d0             ; param d0: chunk x coordinate
00001574  7200                    2553      move.l #0, d1             ; param d1: chunk y coordinate 
00001576  7420                    2554      move.l #32, d2            ; param d2: chunk width 
00001578  7610                    2555      move.l #16, d3            ; param d3: chunk height 
0000157A  2828 0000               2556      move.l M_SAVER_X(a0), d4  ; param d4: screen x coordinate
0000157E  E084                    2557      asr.l #8, d4              ; convert from fixed to int 
00001580  2A28 0004               2558      move.l M_SAVER_Y(a0), d5  ; param d5: screen y coordinate 
00001584  E085                    2559      asr.l #8, d5              ; convert from fixed to int 
00001586  41F9 0000A45A           2560      lea SaverBitmap, a0       ; param a0: pointer to bitmap file data
0000158C  4EB8 04A2               2561      jsr RenderBitmap16 
00001590                          2562      
00001590  4E75                    2563      rts 
00001592                          2564      
00001592                          2565  ; ------ SUBROUTINE ------
00001592                          2566  ; Saver_Hide
00001592                          2567  ;
00001592                          2568  ; Hides the saver at its current location.
00001592                          2569  ; Does this by drawing the background over 
00001592                          2570  ; the the saver.
00001592                          2571  ; 
00001592                          2572  ; Input:
00001592                          2573  ;   a0.l = pointer to saver struct 
00001592                          2574  ; ------------------------   
00001592                          2575  Saver_Hide:
00001592                          2576  
00001592                          2577      ; Example usage of RenderBitmap16
00001592  2028 0000               2578      move.l M_SAVER_X(a0), d0  ; param d0: chunk x coordinate
00001596  E080                    2579      asr.l #8, d0              ; convert from fixed to int 
00001598  2228 0004               2580      move.l M_SAVER_Y(a0), d1  ; param d1: chunk y coordinate 
0000159C  E081                    2581      asr.l #8, d1              ; convert from fixed to int 
0000159E  7420                    2582      move.l #32, d2            ; param d2: chunk width 
000015A0  7610                    2583      move.l #16, d3            ; param d3: chunk height 
000015A2  2828 0000               2584      move.l M_SAVER_X(a0), d4  ; param d4: screen x coordinate
000015A6  E084                    2585      asr.l #8, d4              ; convert from fixed to int 
000015A8  2A28 0004               2586      move.l M_SAVER_Y(a0), d5  ; param d5: screen y coordinate 
000015AC  E085                    2587      asr.l #8, d5              ; convert from fixed to int 
000015AE  41F9 0000A570           2588      lea BGBitmap, a0          ; param a0: pointer to bitmap file data
000015B4  4EB8 04A2               2589      jsr RenderBitmap16 
000015B8                          2590      
000015B8  4E75                    2591      rts 
000015BA                          2592  
000015BA                          2593  
000015BA                          2594  ; ------ SUBROUTINE ------
000015BA                          2595  ; Saver_Update
000015BA                          2596  ;
000015BA                          2597  ; Moves the saver based on it's x velocity.
000015BA                          2598  ; It the saver hits the edge of the screen then
000015BA                          2599  ; its xvelocity will be reversed. If the saver 
000015BA                          2600  ; overlaps the ball, then it will set state to 
000015BA                          2601  ; STATE_AIM (and thus, not reduce BallCount)
000015BA                          2602  ; 
000015BA                          2603  ; Input:
000015BA                          2604  ;   a0.l = pointer to saver struct 
000015BA                          2605  ; ------------------------   
000015BA                          2606  Saver_Update
000015BA                          2607  
000015BA  2F08                    2608      move.l a0, -(sp)
000015BC  4EB8 1592               2609      jsr Saver_Hide
000015C0  205F                    2610      move.l (sp)+, a0
000015C2                          2611      
000015C2  2028 0010               2612      move.l M_SAVER_XVEL(a0), d0 
000015C6  2228 0000               2613      move.l M_SAVER_X(a0), d1 
000015CA  D280                    2614      add.l d0, d1                ; d1 = updated x position 
000015CC                          2615      
000015CC  0C81 00000000           2616      cmpi.l #SAVER_LEFT_BOUND, d1 
000015D2  6E00 0010               2617      bgt .check_right 
000015D6                          2618      
000015D6                          2619      ; clamp the position to 0 
000015D6  7200                    2620      move.l #SAVER_LEFT_BOUND, d1
000015D8                          2621      ; reverse the direction of velocity 
000015D8  203C 00000200           2622      move.l #(SAVER_XVEL), d0    
000015DE                          2623      
000015DE  4EF9 000015FA           2624      jmp .update_properties
000015E4                          2625      
000015E4                          2626  .check_right
000015E4                          2627  
000015E4  0C81 00012000           2628      cmpi.l #SAVER_RIGHT_BOUND, d1 
000015EA  6D00 000E               2629      blt .update_properties
000015EE                          2630      
000015EE                          2631      ; clamp the position to 0 
000015EE  223C 00012000           2632      move.l #SAVER_RIGHT_BOUND, d1
000015F4                          2633      ; reverse the direction of velocity 
000015F4  203C FFFFFE00           2634      move.l #(-SAVER_XVEL), d0    
000015FA                          2635      ; jmp .update_properties
000015FA                          2636      
000015FA                          2637  .update_properties
000015FA  2140 0010               2638      move.l d0, M_SAVER_XVEL(a0)
000015FE  2141 0000               2639      move.l d1, M_SAVER_X(a0)
00001602                          2640      
00001602                          2641      ; Update the sprite to match the x/y pos
00001602  2F08                    2642      move.l a0, -(sp)
00001604  4EB8 1572               2643      jsr Saver_Draw
00001608  205F                    2644      move.l (sp)+, a0 
0000160A                          2645  
0000160A                          2646      ; Lastly, check to see if the ball is overlapping this saver.
0000160A                          2647      ; If so, set state to aim
0000160A  43F8 03C6               2648      lea Ball, a1 
0000160E  4EB8 14FC               2649      jsr Rect_OverlapsRect
00001612  4A80                    2650      tst.l d0 
00001614  6700 000A               2651      beq .return 
00001618                          2652      
00001618                          2653      ; Change the sate to Aim state to spare a ball.
00001618  21FC 00000001 040A      2654      move.l #STATE_AIM, GameState
00001620                          2655      
00001620                          2656  .return 
00001620  4E75                    2657      rts
00001622                          2658      
00001622                          2659  -------------------- end include --------------------
00001622                          2660      
00001622                          2661      ; TILE includes 
00001622                          2662      ORG (*+1)&-2
00001622                          2663  TitleBitmap:
00001622                          2664      INCBIN "bitmaps/title.bmp"
0000A298                          2665  RedPegBitmap:
0000A298                          2666      INCBIN "bitmaps/red_peg.bmp"
0000A32E                          2667  BluePegBitmap:
0000A32E                          2668      INCBIN "bitmaps/blue_peg.bmp"
0000A3C4                          2669  BallBitmap:
0000A3C4                          2670      INCBIN "bitmaps/green_peg.bmp"
0000A45A                          2671  SaverBitmap:
0000A45A                          2672      INCBIN "bitmaps/saver.bmp"
0000A570                          2673  BGBitmap:
0000A570                          2674      INCBIN "bitmaps/background.bmp"
000131E6                          2675      
000131E6                          2676      ; Level includes 
000131E6                          2677      ORG (*+1)&-2 
000131E6                          2678      INCLUDE "levels/level0.asm"
000131E6                          2679  Level0Data:
000131E6= 0000000E                2680      dc.l 14         ; num pegs 
000131EA= 00000001                2681      dc.l 1          ; num red pegs
000131EE= 00000006                2682      dc.l 6          ; stating ball count 
000131F2= 0008 0050               2683      dc.w 8, 80 
000131F6= 0018 0038               2684      dc.w 24, 56 
000131FA= 0030 00A8               2685      dc.w 48, 168 
000131FE= 0048 0070               2686      dc.w 72, 112
00013202= 0058 00A8               2687      dc.w 88, 168 
00013206= 0070 0070               2688      dc.w 112, 112 
0001320A= 0088 0048               2689      dc.w 136, 72
0001320E= 00B0 0048               2690      dc.w 176, 72 
00013212= 00C8 0070               2691      dc.w 200, 112 
00013216= 00E0 00A8               2692      dc.w 224, 168 
0001321A= 00F0 0070               2693      dc.w 240, 112 
0001321E= 0108 00A8               2694      dc.w 264, 168 
00013222= 0120 0038               2695      dc.w 288, 56 
00013226= 0130 0050               2696      dc.w 304, 80
0001322A                          2697      
0001322A                          2698  -------------------- end include --------------------
0001322A                          2699      INCLUDE "levels/level1.asm"
0001322A                          2700  Level1Data:
0001322A= 0000001D                2701      dc.l 29         ; num pegs 
0001322E= 00000008                2702      dc.l 8          ; num red pegs
00013232= 00000007                2703      dc.l 7          ; stating ball count 
00013236= 0018 0038               2704      dc.w 24, 56 
0001323A= 0010 0048               2705      dc.w 16, 72 
0001323E= 0008 0058               2706      dc.w 8, 88 
00013242= 0008 0068               2707      dc.w 8, 104
00013246= 0010 0078               2708      dc.w 16, 120
0001324A= 0018 0088               2709      dc.w 24, 136
0001324E= 0028 0090               2710      dc.w 40, 144 
00013252= 0038 0090               2711      dc.w 56, 144 
00013256= 0048 0090               2712      dc.w 72, 144 
0001325A= 0040 0050               2713      dc.w 64, 80 
0001325E= 0050 0040               2714      dc.w 80, 64 
00013262= 0060 0050               2715      dc.w 96, 80 
00013266= 0070 00B0               2716      dc.w 112, 176 
0001326A= 0090 0068               2717      dc.w 144, 104 
0001326E= 009C 0078               2718      dc.w 156, 120 
00013272= 00A8 0068               2719      dc.w 168, 104 
00013276= 00D0 00B0               2720      dc.w 208, 176 
0001327A= 00D8 0050               2721      dc.w 216, 80 
0001327E= 00E8 0040               2722      dc.w 232, 64 
00013282= 00F8 0050               2723      dc.w 248, 80 
00013286= 00F0 0090               2724      dc.w 240, 144 
0001328A= 0100 0090               2725      dc.w 256, 144 
0001328E= 0110 0090               2726      dc.w 272, 144 
00013292= 0120 0088               2727      dc.w 288, 136 
00013296= 0128 0078               2728      dc.w 296, 120 
0001329A= 0130 0068               2729      dc.w 304, 104 
0001329E= 0130 0058               2730      dc.w 304, 88 
000132A2= 0128 0048               2731      dc.w 296, 72 
000132A6= 0120 0038               2732      dc.w 288, 56 
000132AA                          2733      
000132AA                          2734  -------------------- end include --------------------
000132AA                          2735      INCLUDE "levels/levels.asm"    
000132AA                          2736  LevelData:
000132AA= 000131E6                2737      dc.l Level0Data 
000132AE= 0001322A                2738      dc.l Level1Data 
000132B2= 000131E6                2739      dc.l Level0Data 
000132B6= 0001322A                2740      dc.l Level1Data 
000132BA= 000131E6                2741      dc.l Level0Data 
000132BE= 0001322A                2742      dc.l Level1Data 
000132C2= 000131E6                2743      dc.l Level0Data 
000132C6= 0001322A                2744      dc.l Level1Data 
000132C6= 0001322A                2745  -------------------- end include --------------------
000132CA                          2746      
000132CA                          2747  
000132CA                          2748  EntryPoint:
000132CA                          2749      
000132CA                          2750      ; Set up the stack pointer 
000132CA  2E7C 00000000           2751      move.l #$00000000, sp
000132D0                          2752      
000132D0                          2753      ; Enable the double buffered draw mode 
000132D0  7211                    2754      move.l #DRAW_MODE_DOUBLE_BUFFERED, d1 
000132D2  705C                    2755      move.l #DRAW_MODE_TRAP_CODE, d0 
000132D4  4E4F                    2756      trap #15
000132D6                          2757      
000132D6  4EB8 070A               2758      jsr LoadStart
000132DA  21FC 00000000 040A      2759      move.l #STATE_START, GameState
000132E2                          2760      
000132E2                          2761  Main_Loop:
000132E2                          2762  
000132E2                          2763      ; Swap buffers 
000132E2  705E                    2764      move.l #SWAP_BUFFERS_TRAP_CODE, d0 
000132E4  4E4F                    2765      trap #15 
000132E6                          2766      
000132E6  4EB8 045E               2767      jsr UpdateButtons
000132EA                          2768      
000132EA  2038 040A               2769      move.l GameState, d0 
000132EE  0C80 00000000           2770      cmpi.l #STATE_START, d0 
000132F4  6600 000C               2771      bne .check_aim
000132F8  4EB8 072A               2772      jsr UpdateStart
000132FC  4EF9 000132E2           2773      jmp Main_Loop
00013302                          2774  
00013302                          2775  .check_aim
00013302  0C80 00000001           2776      cmpi.l #STATE_AIM, d0 
00013308  6600 000C               2777      bne .check_resolve 
0001330C  4EB8 0898               2778      jsr UpdateAim
00013310  4EF9 000132E2           2779      jmp Main_Loop
00013316                          2780      
00013316                          2781  .check_resolve
00013316  0C80 00000002           2782      cmpi.l #STATE_RESOLVE, d0 
0001331C  6600 000C               2783      bne .check_lose 
00013320  4EB8 09BA               2784      jsr UpdateResolve 
00013324  4EF9 000132E2           2785      jmp Main_Loop
0001332A                          2786      
0001332A                          2787  .check_lose 
0001332A  0C80 00000003           2788      cmpi.l #STATE_LOSE, d0 
00013330  6600 0010               2789      bne .check_win 
00013334  21FC 00000000 040A      2790      move.l #STATE_START, GameState
0001333C  4EF9 000132E2           2791      jmp Main_Loop
00013342                          2792      
00013342                          2793  .check_win
00013342                          2794      
00013342  4EF9 000132E2           2795      jmp Main_Loop        ; go to next iteration of game loop
00013348                          2796      
00013348                          2797      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AIMANGLE            412
AIM_ANGLE_DELTA     200
AIM_ANGLE_MAX       AF00
AIM_ANGLE_MIN       500
AIM_CENTER_X        9A00
AIM_CENTER_Y        500
AIM_RADIUS          1E00
AIM_START_ANGLE     5A00
BALL                3C6
BALLBITMAP          A3C4
BALLCOUNT           41A
BALLS_STRING_X      1
BALLS_STRING_Y      0
BALL_DATA_SIZE      20
BALL_DRAW           12A6
BALL_HEIGHT         800
BALL_HIDE           12C6
BALL_INIT           11D8
BALL_PATTERN        43
BALL_SIZE_SHIFT     5
BALL_SPRITE_INDEX   0
BALL_UPDATE         120A
BALL_UPDATE:BOUNCE_LEFT  125A
BALL_UPDATE:BOUNCE_RIGHT  1268
BALL_UPDATE:CHECK_COLLISIONS  1294
BALL_UPDATE:CHECK_HIT_TOP  127A
BALL_UPDATE:REVERSE_XVEL  1270
BALL_UPDATE:UPDATE_SPRITE  129E
BALL_WIDTH          800
BGBITMAP            A570
BITMAP_ADDR         69A
BITMAP_BPP          6E2
BITMAP_BPP_OFFSET   1C
BITMAP_HEADER_SIZE  36
BITMAP_HEIGHT       6DA
BITMAP_HEIGHT_OFFSET  16
BITMAP_PIXEL_ARRAY_OFF_OFFSET  A
BITMAP_WIDTH        6D2
BITMAP_WIDTH_BYTES  6F6
BITMAP_WIDTH_OFFSET  12
BLUEPEGBITMAP       A32E
BLUE_PEG_HIGH_SCORE  1
BLUE_PEG_LOW_SCORE  4
BLUE_PEG_MID_SCORE  2
BUTTONSDOWN         406
BUTTON_A            C
BUTTON_B            4
BUTTON_C            5
BUTTON_DOWN         1
BUTTON_LEFT         2
BUTTON_RIGHT        3
BUTTON_START        D
BUTTON_UP           0
CHUNK_HEIGHT        6BA
CHUNK_WIDTH         6B2
CHUNK_X             6A2
CHUNK_Y             6AA
CLEARPEGS           A42
CLIPVIEW            AF6
COLOR_TABLE_ADDR    6E6
COSTABLE            E04
DAMPENING_COEFFICIENT  E0
DRAWBACKGROUND      AD4
DRAWBALLCOUNT       AD2
DRAWSCORE           A92
DRAW_MODE_DOUBLE_BUFFERED  11
DRAW_MODE_TRAP_CODE  5C
DRAW_RECT_TRAP_CODE  57
ENDIANSWAP_L        6FE
ENDIANSWAP_W        706
ENTRYPOINT          132CA
FALLOUT_Y           E000
FILL_COLOR_TRAP_CODE  51
FRAMECOUNTER        42E
GAMESTATE           40A
GRAVITY             12
HIGH_RED            20
IO_TASK_DRAW_PIXEL  52
IO_TASK_PEN_COLOR   50
KEYBOARD_INPUT_TRAP_CODE  13
KEY_LIST            25275A0D
LAUNCH_SPEED        400
LEFT_BOUND          0
LEVEL               416
LEVEL0DATA          131E6
LEVEL1DATA          1322A
LEVELBALLCOUNT      426
LEVELDATA           132AA
LEVELPEGCOUNT       41E
LEVELREDPEGCOUNT    422
LEVEL_BALL_COUNT_OFFSET  8
LEVEL_PEGS_OFFSET   C
LEVEL_PEG_COUNT_OFFSET  0
LEVEL_RED_PEG_COUNT_OFFSET  4
LOADGAME            760
LOADLEVEL           792
LOADLEVEL:FIND_BLUE_LOOP  856
LOADLEVEL:FOUND_BLUE  878
LOADLEVEL:LOAD_PEGS  7B6
LOADLEVEL:PEG_LOOP  7F4
LOADLEVEL:RED_PEG_LOOP  838
LOADLEVEL:SET_RED_PEGS  830
LOADSTART           70A
LOW_RED             2
LVARS_SIZE          6
LVARS_SIZE:LOOP     A52
LVARS_SIZE:RETURN   A8E
L_COUNTER           4
L_CUR_PEG           0
L_DIGIT1            4
L_DIGIT2            2
L_DIGIT3            0
MAIN_LOOP           132E2
MAIN_LOOP:CHECK_AIM  13302
MAIN_LOOP:CHECK_LOSE  1332A
MAIN_LOOP:CHECK_RESOLVE  13316
MAIN_LOOP:CHECK_WIN  13342
MAX_GENGGLE_SPRITES  20
MAX_PEGS            1E
MAX_SQRT_INPUT      80
MID_RED             6
M_BALL_HEIGHT       C
M_BALL_RECT         0
M_BALL_WIDTH        8
M_BALL_X            0
M_BALL_XVEL         10
M_BALL_Y            4
M_BALL_YVEL         14
M_PEG_ACTIVE        11
M_PEG_HEIGHT        C
M_PEG_LEFT_BOUND    14
M_PEG_MOVING        12
M_PEG_RECT          0
M_PEG_RIGHT_BOUND   16
M_PEG_SPRITE_INDEX  13
M_PEG_TYPE          10
M_PEG_WIDTH         8
M_PEG_X             0
M_PEG_Y             4
M_RECT_HEIGHT       C
M_RECT_WIDTH        8
M_RECT_X            0
M_RECT_Y            4
M_SAVER_HEIGHT      C
M_SAVER_RECT        0
M_SAVER_WIDTH       8
M_SAVER_X           0
M_SAVER_XVEL        10
M_SAVER_Y           4
NUM_LEVELS          8
PEGCOUNT            436
PEGS                6
PEGS_SPRITE_INDEX   2
PEG_CONSUME         1476
PEG_CONSUME:BLUE_PEG  14A4
PEG_CONSUME:NOT_LOW  14BC
PEG_CONSUME:NOT_MID  14D0
PEG_CONSUME:RETURN  14D4
PEG_DATA_SIZE       20
PEG_DRAW            1416
PEG_DRAW:BLUE_PEG   1442
PEG_DRAW:RENDER     1448
PEG_HEIGHT          800
PEG_HIDE            144E
PEG_INIT            13D0
PEG_INIT_X          FFFF9400
PEG_INIT_Y          FFFF9400
PEG_PALETTE         1
PEG_SIZE_SHIFT      5
PEG_TYPE_BLUE       0
PEG_TYPE_PURPLE     2
PEG_TYPE_RED        1
PEG_WIDTH           800
PEN_COLOR_TRAP_CODE  50
PIXEL_ARRAY_ADDR    6EE
RANDOM              444
RANDVAL             42A
RAND_ADDER          929
RAND_MULTIPLIER     1A1
RECT_INIT           14DA
RECT_OVERLAPSRECT   14FC
RECT_OVERLAPSRECT:RETURN_FALSE  1544
RECT_OVERLAPSRECT:RETURN_TRUE  1540
REDPEGBITMAP        A298
REDPEGCOUNT         432
RED_PEG_SCORE       2
REGS                301
REGS:CONTINUE       13BE
REGS:LOOP           12F4
REGS:NO_VEL_CLAMP   1350
REGS:SKIP_MAG_CLAMP  1386
RENDERBITMAP16      4A2
RENDERBITMAP16:CLAMP_CHUNK_H  5A4
RENDERBITMAP16:FLIP_CHUNK_Y  5CE
RENDERBITMAP16:LOOP_END  67E
RENDERBITMAP16:LOOP_EVEN  62C
RENDERBITMAP16:LOOP_ODD  656
RENDERBITMAP16:LOOP_START  61C
RENDERBITMAP16:RETURN  698
RENDER_X            6C2
RENDER_Y            6CA
REQUIRED_BITS_PER_PIXEL  4
RIGHT_BOUND         13800
SAVER               3E6
SAVERBITMAP         A45A
SAVER_DATA_SIZE     20
SAVER_DRAW          1572
SAVER_HEIGHT        800
SAVER_HIDE          1592
SAVER_INIT          1548
SAVER_INIT_X        1400
SAVER_INIT_Y        D400
SAVER_LEFT_BOUND    0
SAVER_RECT_OFFSET_X  0
SAVER_RECT_OFFSET_Y  8
SAVER_RIGHT_BOUND   12000
SAVER_SIZE_SHIFT    5
SAVER_SPRITE_INDEX  1
SAVER_UPDATE        15BA
SAVER_UPDATE:CHECK_RIGHT  15E4
SAVER_UPDATE:RETURN  1620
SAVER_UPDATE:UPDATE_PROPERTIES  15FA
SAVER_WIDTH         2000
SAVER_XVEL          200
SAVE_STRING_X       2
SAVE_STRING_Y       2
SCORE               43A
SCORE_STRING_X      1D
SCORE_STRING_Y      0
SCREEN_HEIGHT       E0
SCREEN_WIDTH        140
SEEDRANDOM          43E
SETRANDSEED         756
SINTABLE            B34
SPRITE_DISABLE_X    14
SPRITE_DISABLE_Y    14
SQRTTABLE           10D4
START               0
STATE_AIM           1
STATE_LOSE          3
STATE_RESOLVE       2
STATE_START         0
STATE_WIN           4
SWAP_BUFFERS_TRAP_CODE  5E
TITLEBITMAP         1622
TO_FIXED            100
UPDATEAIM           898
UPDATEAIM:CHECK_CLAMP_MAX  8D8
UPDATEAIM:CHECK_RIGHT  8B4
UPDATEAIM:CLAMP_AIM_ANGLE  8C2
UPDATEAIM:RETURN    902
UPDATEAIM:SAVE_AIM_ANGLE  8E8
UPDATEBUTTONS       45E
UPDATEBUTTONS:CHECK_RIGHT  478
UPDATEBUTTONS:CHECK_START  490
UPDATEBUTTONS:CHECK_Z  484
UPDATEBUTTONS:SAVE_KEYS  49C
UPDATERESOLVE       9BA
UPDATERESOLVE:CHECK_FALLOUT  9F2
UPDATERESOLVE:RETURN  A3A
UPDATERESOLVE:SET_STATE_AIM  A32
UPDATESTART         72A
UPDATESTART:RETURN  754
VBLANKFLAG          40E
_BALL_CHECKPEGCOLLISIONS  12EE
_CHECKLAUNCH        962
_CHECKLAUNCH:RETURN  9B8
_POSITIONBALL       90A
_POSITIONBALL:RETURN  960
